{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./node_modules/safe-buffer/index.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./node_modules/leb128/index.js","webpack://assemblyscript/./node_modules/buffer-pipe/index.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./node_modules/leb128/node_modules/buffer-pipe/index.js","webpack://assemblyscript/./node_modules/bn.js/lib/bn.js","webpack://assemblyscript/./node_modules/buffer/index.js","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/text2json.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/json2wasm.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/wasm2json.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/index.js","webpack://assemblyscript/./node_modules/leb128/signed.js","webpack://assemblyscript/(webpack)/buildin/module.js","webpack://assemblyscript/./node_modules/leb128/unsigned.js","webpack://assemblyscript/./node_modules/isarray/index.js","webpack://assemblyscript/./node_modules/ieee754/index.js","webpack://assemblyscript/./node_modules/base64-js/index.js","webpack://assemblyscript/./node_modules/primea-annotations/index.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__41__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","resolved","resolveIdentifier","ElementKind","CLASS_PROTOTYPE","A_class_may_only_extend_another_class","basePrototype","checkInternalDecorators","parentNode","is","CommonFlags","GLOBAL","source","isLibrary","SOURCE","simpleName","has","Duplicate_identifier_0","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","programLevelInternalName","instance","resolve","type","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","alias","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","resolvedElement","ResolvedElement","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","resolveExpression","targetType","target","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","withTarget","base","resolveElementAccess","elementAccess","indexedGetName","indexedGet","FUNCTION_PROTOTYPE","Index_signature_is_missing_in_type_0","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","apply","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","SEALED","Class_0_is_sealed_and_cannot_be_extended","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_c","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","primea_annotations_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","globalsCount","persistentGlobals","funcsCount","customTypeMap","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","isPersistent","_BinaryenAddGlobal","addFunction","varTypes","customType","concat","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","customJSON","persist","map","form","size","types","typeMap","typeIndex_1","keys","paramString","params","split","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","encodeAndInject","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","g","eval","e","window","Buffer","copyProps","src","dst","key","SafeBuffer","arg","encodingOrOffset","alloc","allocUnsafe","allocUnsafeSlow","TypeError","fill","encoding","buf","undefined","SlowBuffer","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","PERSISTENT","FUNCTION_TYPE","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPE","TYPEPARAMETER","PARAMETER","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","unsigned","[object Object]","_bytesRead","_bytesWrote","num","data","subarray","bytesRead","bytesWrote","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","nullableType","ceil","nonNullableType","computeSmallIntegerShift","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","startFunctionBody","currentEnum","currentType","memorySegments","stringSegments","functionTable","files","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","AMBIENT","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","customTypeDecorator","customTypes","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","operatorName","compileOperatorOverload","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","operatorPrototype","operatorInstance","makeCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","resolvedIndexedSet","valueExpr","valueWithCorrectType","tee","isInstanceTarget","targetExpr","setterInstance","thisArg","getterInstance","nativeReturnType","setElementName","setElement","elementExpr","tempLocalTarget","tempLocalElement","Index_signature_in_type_0_only_permits_reading","indexArg","compileCall","compileCallDirect","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","numArgumentsInclThis","ensureTrampoline","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineParameterTypes","trampolineSignature","trampolineName","numOperands","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_i16","i64_is_i32","i64_is_u8","i64_is_u16","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayPrototype","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","nativeOne","setValue","getValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","compiler","compileAllocate","field","msg","inherits","ctor","superCtor","super_","TempCtor","constructor","BN","number","endian","isBN","negative","words","red","_init","wordSize","parseHex","Math","min","parseBase","mul","isArray","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","toArray","w","off","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","dest","clone","_expand","_normSign","inspect","zeros","groupSizes","groupBases","smallMulTo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","res","q","andln","iushrn","clz32","_countBits","t","_zeroBits","bitLength","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","sub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","x","y","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","outLen","prev","mod3","one","nOne","lpow","z","inv","wnd","currentLen","mont","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","ArrayBuffer","array","byteOffset","fromArrayLike","fromArrayBuffer","string","isEncoding","actual","write","slice","fromString","obj","isBuffer","checked","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","Symbol","species","_isBuffer","compare","list","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","match","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","toHex","checkOffset","ext","checkInt","objectWriteUInt16","objectWriteUInt32","checkIEEE754","writeFloat","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","stringtrim","base64clean","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClass","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","Unreachable","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","eqz","isPositive","other","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","log2","log","LN2","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","immediates","immediataryParser","txt","json","dests","reserved","textArray","textOp","jsonOp","return_type","immediate","leb","Stream","OP_IMMEDIATES","_exports","generate","LANGUAGE_TYPES","anyFunc","block_type","EXTERNAL_KIND","function","table","memory","SECTION_IDS","custom","import","export","OPCODES","unreachable","nop","block","loop","if","else","br","br_if","br_table","return","call_indirect","drop","select","get_local","set_local","tee_local","get_global","set_global","i32.load","i64.load","f32.load","f64.load","i32.load8_s","i32.load8_u","i32.load16_s","i32.load16_u","i64.load8_s","i64.load8_u","i64.load16_s","i64.load16_u","i64.load32_s","i64.load32_u","i32.store","i64.store","f32.store","f64.store","i32.store8","i32.store16","i64.store8","i64.store16","i64.store32","current_memory","grow_memory","i32.const","i64.const","f32.const","f64.const","i32.eqz","i32.eq","i32.ne","i32.lt_s","i32.lt_u","i32.gt_s","i32.gt_u","i32.le_s","i32.le_u","i32.ge_s","i32.ge_u","i64.eqz","i64.eq","i64.ne","i64.lt_s","i64.lt_u","i64.gt_s","i64.gt_u","i64.le_s","i64.le_u","i64.ge_s","i64.ge_u","f32.eq","f32.ne","f32.lt","f32.gt","f32.le","f32.ge","f64.eq","f64.ne","f64.lt","f64.gt","f64.le","f64.ge","i32.clz","i32.ctz","i32.popcnt","i32.add","i32.sub","i32.mul","i32.div_s","i32.div_u","i32.rem_s","i32.rem_u","i32.and","i32.or","i32.xor","i32.shl","i32.shr_s","i32.shr_u","i32.rotl","i32.rotr","i64.clz","i64.ctz","i64.popcnt","i64.add","i64.sub","i64.mul","i64.div_s","i64.div_u","i64.rem_s","i64.rem_u","i64.and","i64.or","i64.xor","i64.shl","i64.shr_s","i64.shr_u","i64.rotl","i64.rotr","f32.abs","f32.neg","f32.ceil","f32.floor","f32.trunc","f32.nearest","f32.sqrt","f32.add","f32.sub","f32.mul","f32.div","f32.min","f32.max","f32.copysign","f64.abs","f64.neg","f64.ceil","f64.floor","f64.trunc","f64.nearest","f64.sqrt","f64.add","f64.sub","f64.mul","f64.div","f64.min","f64.max","f64.copysign","i32.wrap/i64","i32.trunc_s/f32","i32.trunc_u/f32","i32.trunc_s/f64","i32.trunc_u/f64","i64.extend_s/i32","i64.extend_u/i32","i64.trunc_s/f32","i64.trunc_u/f32","i64.trunc_s/f64","i64.trunc_u/f64","f32.convert_s/i32","f32.convert_u/i32","f32.convert_s/i64","f32.convert_u/i64","f32.demote/f64","f64.convert_s/i32","f64.convert_u/i32","f64.convert_s/i64","f64.convert_u/i64","f64.promote/f32","i32.reinterpret/f32","i64.reinterpret/f64","f32.reinterpret/i32","f64.reinterpret/i64","typeGenerators","stream","limits","contentType","mutability","intial","generateOp","immediataryGenerators","varuint1","varuint32","varint32","varint64","uint32","uint64","targets","defaultTarget","memory_immediate","sectionGenerators","payload","sectionName","binEntries","moduleStr","fieldStr","field_str","codeStream","count","generatePreramble","item","magic","version","filter","parse","127","126","125","124","112","96","64","0","1","2","3","parsePreramble","parseSectionHeader","readBn","4","5","11","12","13","14","15","16","17","26","27","32","33","34","35","36","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","113","114","115","116","117","118","119","120","121","122","123","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","6","7","8","9","10","immediataryParsers","typeParsers","parseOp","sectionParsers","header","section","nameLen","numberOfEntries","paramCount","moduleLen","fieldLen","strLength","numElem","codeBody","bodySize","endBytes","localCount","segmentSize","fullName","preramble","wasm2json","json2wasm","text2json","findSections","sections","wantedSections","nextSection","Bn","Pipe","byt","isNegOne","encode","decode","webpackPolyfill","deprecate","paths","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","b64","placeHoldersCount","placeHolders","Arr","L","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","FUNC_TYPE","LANGUAGE_TYPES_STRG","anyref","link","LANGUAGE_TYPES_BIN","EXTERNAL_KIND_BIN","EXTERNAL_KIND_STRG","annotations","encodeCustomSection","encodeType","encodeTypeMap","encodePersist","encodingFunc","decodePersist","numOfEntries","definition","decodeTypeMap","decodeType","injectCustomSection","annotation","mergeTypeSections","iterator","mappedFuncs","mappedTypes","forEach","imports","functions","typeIndex","funcIndex","newType","customIndex","every","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","evaluateConstantOffset","tempLocal0","tempLocal1","Type_0_is_not_generic","stringPrototype","stringInstance","abort","compileAbort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","_malloc","_free","move_memory","_memmove","HEAPU8","previousPrint","print","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","trunc","isTrueish","fromCodePoint","isInteger"],"mappings":"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KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACt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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__41__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 46);\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  Signature,\n\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  // ParameterNode,\n  // ParameterKind,\n  // SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ParameterKind,\n  SignatureNode\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n} from \"./module\";\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"(lib)\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  isReExport: bool;\n  referencedName: string;\n  member: ExportMember;\n}\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  internalName: string;\n  referencedName: string;\n  referencedNameAlt: string;\n  declaration: ImportDeclaration;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedImports = new Array<QueuedImport>();\n    var queuedDerivedClasses = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\n      if (element) {\n        this.elementsLookup.set(queuedImport.internalName, element);\n        queuedImports.splice(i, 1);\n      } else {\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\n          this.elementsLookup.set(queuedImport.internalName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            queuedImport.declaration.range,\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\n            queuedImport.declaration.externalName.text\n          );\n          ++i;\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.referencedName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let resolved = this.resolveIdentifier(derivedType.name, null);\n      if (resolved) {\n        if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            derivedType.range\n          );\n          continue;\n        }\n        queuedDerivedClasses[i].basePrototype = (\n          <ClassPrototype>resolved.element\n        );\n      }\n    }\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    referencedName: string,\n    queuedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(referencedName)) return element;\n      let queuedExport = queuedExports.get(referencedName);\n      if (!queuedExport) return null;\n      if (queuedExport.isReExport) {\n        referencedName = queuedExport.referencedName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.referencedName);\n    } while (true);\n  }\n\n  /** Processes internal decorators, if present. */\n  private checkInternalDecorators(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      element.is(CommonFlags.GLOBAL) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let simpleName = declaration.name.text;\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        element.set(CommonFlags.GLOBAL);\n        this.elementsLookup.set(simpleName, element);\n        if (element.is(CommonFlags.BUILTIN)) {\n          element.internalName = simpleName;\n        }\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedDerivedClasses: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration\n    );\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    var numImplementsTypes = implementsTypes.length;\n    if (prototype.is(CommonFlags.UNMANAGED)) {\n      if (implementsTypes && numImplementsTypes) {\n        this.error(\n          DiagnosticCode.Structs_cannot_implement_interfaces,\n          Range.join(\n            declaration.name.range,\n            implementsTypes[numImplementsTypes - 1].range\n          )\n        );\n      }\n    } else if (numImplementsTypes) {\n      for (let i = 0; i < numImplementsTypes; ++i) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          implementsTypes[i].range\n        );\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) {\n      queuedDerivedClasses.push(prototype);\n    }\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\n        if (prototype.is(CommonFlags.EXPORT)) {\n          prototype.set(CommonFlags.MODULE_EXPORT);\n        }\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkInternalDecorators(prototype, declaration);\n\n    // check and possibly register string type\n    if (\n      prototype.is(CommonFlags.GLOBAL) &&\n      declaration.name.text == \"String\"\n    ) {\n      if (!this.typesLookup.has(\"string\")) {\n        let instance = prototype.resolve(null);\n        if (instance) this.typesLookup.set(\"string\", instance.type);\n      } else {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, declaration.programLevelInternalName\n        );\n      }\n    }\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        declaration,\n        Type.void\n      );\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperators(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    // handle operator annotations. operators are either instance methods taking\n    // a second argument of the instance's type or static methods taking two\n    // arguments of the instance's type. return values vary depending on the\n    // operation.\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              decorator.range\n            );\n            continue;\n          }\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\n          if (numArgs == 1) {\n            let firstArg = (<Expression[]>decorator.arguments)[0];\n            if (\n              firstArg.kind == NodeKind.LITERAL &&\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n            ) {\n              switch ((<StringLiteralExpression>firstArg).value) {\n                case \"[]\": {\n                  classPrototype.fnIndexedGet = prototype.simpleName;\n                  break;\n                }\n                case \"[]=\": {\n                  classPrototype.fnIndexedSet = prototype.simpleName;\n                  break;\n                }\n                case \"+\": {\n                  classPrototype.fnConcat = prototype.simpleName;\n                  break;\n                }\n                case \"==\": {\n                  classPrototype.fnEquals = prototype.simpleName;\n                  break;\n                }\n                default: {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                }\n              }\n            } else {\n              this.error(\n                DiagnosticCode.String_literal_expected,\n                firstArg.range\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"1\", numArgs.toString(0)\n            );\n          }\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\n          // methods support built-in @operator only\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            decorator.range\n          );\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.namespace = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkInternalDecorators(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (isModuleExport) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    name: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    this.fileLevelExports.set(name, element);\n    if (identifier.range.source.isLibrary) { // add global alias\n      if (this.elementsLookup.has(identifier.text)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, identifier.text\n        );\n      } else {\n        element.internalName = identifier.text;\n        this.elementsLookup.set(identifier.text, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.referencedName = referencedName; // -> internal name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.referencedName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.referencedName = referencedName; // -> export name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null\n    );\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    this.checkInternalDecorators(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) {\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        statement.namespaceName.text\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n      this.error( // TODO\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(referencedName)) {\n      this.elementsLookup.set(internalName, element);\n      return;\n    }\n\n    // otherwise queue it\n    var indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.internalName = internalName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration;\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkInternalDecorators(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtendingClasses: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.namespace = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkInternalDecorators(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, namespace);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        Type.void // resolved later on\n      );\n      global.namespace = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(internalName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(internalName, global);\n        }\n      }\n      this.checkInternalDecorators(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameterTypes;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return Type.u32.asFunction(signature);\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n\n    // check file-global / program-global element\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          return instance ? instance.type : null;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    contextualFunction: Function | null,\n    contextualEnum: Enum | null = null\n  ): ResolvedElement | null {\n    var name = identifier.text;\n\n    var element: Element | null;\n    var namespace: Element | null;\n\n    // check siblings\n    if (contextualEnum) {\n\n      if (\n        contextualEnum.members &&\n        (element = contextualEnum.members.get(name)) &&\n        element.kind == ElementKind.ENUMVALUE\n      ) {\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\n        return resolvedElement.set(element);\n      }\n\n    } else if (contextualFunction) {\n\n      // check locals\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\n        if (!resolvedElement) resolvedElement = new ResolvedElement();\n        return resolvedElement.set(element);\n      }\n\n      // search contextual parent namespaces if applicable\n      if (namespace = contextualFunction.prototype.namespace) {\n        do {\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\n            return resolvedElement.set(element);\n          }\n        } while (namespace = namespace.namespace);\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\n      return resolvedElement.set(element);\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      if (!resolvedElement) resolvedElement = new ResolvedElement();\n      return resolvedElement.set(element);\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): ResolvedElement | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    resolvedElement = this.resolveExpression( // reports\n      targetExpression,\n      contextualFunction\n    );\n    if (!resolvedElement) return null;\n    var target = resolvedElement.element;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n    var targetType: Type;\n    var member: Element | null;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (!(targetType = (<VariableLikeElement>target).type).classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, targetType.toString()\n          );\n          return null;\n        }\n        target = <Class>targetType.classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        if (!(targetType = getter.signature.returnType).classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, targetType.toString()\n          );\n          return null;\n        }\n        target = <Class>targetType.classReference;\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          if (target.members && (member = target.members.get(propertyName))) {\n            return resolvedElement.set(member).withTarget(target, targetExpression);\n          }\n          // check inherited static members on the base prototype while target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // or inherited instance members on the base class while target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        if (target.members && (member = target.members.get(propertyName))) {\n          return resolvedElement.set(member).withTarget(target, targetExpression);\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): ResolvedElement | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = elementAccess.expression;\n    resolvedElement = this.resolveExpression(\n      targetExpression,\n      contextualFunction\n    );\n    if (!resolvedElement) return null;\n    var target = resolvedElement.element;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (type.classReference) {\n          let indexedGetName = (target = type.classReference).prototype.fnIndexedGet;\n          let indexedGet: Element | null;\n          if (\n            indexedGetName != null &&\n            target.members &&\n            (indexedGet = target.members.get(indexedGetName)) &&\n            indexedGet.kind == ElementKind.FUNCTION_PROTOTYPE\n          ) {\n            return resolvedElement.set(indexedGet).withTarget(type.classReference, targetExpression);\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Index_signature_is_missing_in_type_0,\n      targetExpression.range, target.internalName\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): ResolvedElement | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            if (!resolvedElement) resolvedElement = new ResolvedElement();\n            return resolvedElement.set(classType);\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        let parent = contextualFunction.memberOf;\n        if (parent) {\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\n          return resolvedElement.set(parent);\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        let parent = contextualFunction.memberOf;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          if (!resolvedElement) resolvedElement = new ResolvedElement();\n          return resolvedElement.set(parent);\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let resolved = this.resolveExpression(\n          (<CallExpression>expression).expression,\n          contextualFunction\n        );\n        if (resolved) {\n          let element = resolved.element;\n          if (element && element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n            let instance = (<FunctionPrototype>element).resolveUsingTypeArguments(\n              (<CallExpression>expression).typeArguments,\n              contextualFunction.contextualTypeArguments,\n              expression\n            );\n            if (instance) {\n              let returnType = instance.signature.returnType;\n              let classType = returnType.classReference;\n              if (classType) {\n                if (!resolvedElement) resolvedElement = new ResolvedElement();\n                return resolvedElement.set(classType);\n              } else {\n                let signature = returnType.signatureReference;\n                if (signature) {\n                  let functionTarget = signature.cachedFunctionTarget;\n                  if (!functionTarget) {\n                    functionTarget = new FunctionTarget(this, signature);\n                    signature.cachedFunctionTarget = functionTarget;\n                  }\n                  if (!resolvedElement) resolvedElement = new ResolvedElement();\n                  return resolvedElement.set(functionTarget);\n                }\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n}\n\n/** Common result structure returned when calling any of the resolve functions on a {@link Program}. */\nexport class ResolvedElement {\n\n  /** The target element, if a property or element access */\n  target: Element | null;\n  /** The target element's expression, if a property or element access. */\n  targetExpression: Expression | null;\n  /** The element being accessed. */\n  element: Element;\n\n  /** Clears the target and sets the resolved element. */\n  set(element: Element): this {\n    this.target = null;\n    this.targetExpression = null;\n    this.element = element;\n    return this;\n  }\n\n  /** Sets the resolved target in addition to the previously set element. */\n  withTarget(target: Element, targetExpression: Expression): this {\n    this.target = target;\n    this.targetExpression = targetExpression;\n    return this;\n  }\n\n  /** Tests if the target is a valid instance target. */\n  get isInstanceTarget(): bool {\n    return (\n      this.target != null &&\n      this.target.kind == ElementKind.CLASS &&\n      this.targetExpression != null\n    );\n  }\n}\n\n// Cached result structure instance\nvar resolvedElement: ResolvedElement | null;\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE\n}\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Internal decorators\n\n  /** Is global. */\n  GLOBAL = 1 << 13,\n  /** Is built-in. */\n  BUILTIN = 1 << 14,\n  /** Is unmanaged. */\n  UNMANAGED = 1 << 15,\n  /** Is sealed. */\n  SEALED = 1 << 16,\n\n  // Extended modifiers usually derived from basic modifiers or internal decorators\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 17,\n  /** Is generic. */\n  GENERIC = 1 << 18,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 19,\n  /** Is an instance member. */\n  INSTANCE = 1 << 20,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 21,\n  /** Is an arrow function. */\n  ARROW = 1 << 22,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 23,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 24,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 25,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 26,\n  /** Is scoped. */\n  SCOPED = 1 << 27\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent namespace, if applicable. */\n  namespace: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** A namespace. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Parent enum. */\n  enum: Enum;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.enum = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  withConstantIntegerValue(lo: i32, hi: i32): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = i64_new(lo, hi);\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: VariableLikeDeclarationStatement,\n    type: Type\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n\n  constructor(program: Program, simpleName: string, index: i32, type: Type) {\n    super(program, simpleName, simpleName);\n    this.index = index;\n    this.type = type;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameterTypes;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(this.classPrototype);\n    if (classTypeArguments && classTypeArguments.length) {\n      let partialPrototype = new FunctionPrototype(\n        this.program,\n        this.simpleName,\n        this.internalName,\n        this.declaration,\n        this.classPrototype\n      );\n      partialPrototype.flags = this.flags;\n      partialPrototype.classTypeArguments = classTypeArguments;\n      return partialPrototype;\n    }\n    return this; // no need to clone\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\n  memberOf: Element | null;\n  /** Map of locals by name. */\n  locals: Map<string,Local> = new Map();\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] | null = null;\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    memberOf: Element | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.memberOf = memberOf;\n    this.flags = prototype.flags;\n    if (!(prototype.is(CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        this.locals.set(\n          \"this\",\n          new Local(\n            prototype.program,\n            \"this\",\n            localIndex++,\n            assert(signature.thisType)\n          )\n        );\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\n        if (contextualTypeArguments) {\n          if (!this.contextualTypeArguments) {\n            this.contextualTypeArguments = new Map();\n          }\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        this.locals.set(\n          parameterName,\n          new Local(\n            prototype.program,\n            parameterName,\n            localIndex++,\n            parameterType\n          )\n        );\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type\n    );\n    if (name) {\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\n      this.locals.set(name, local);\n    }\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    if (temps && temps.length) {\n      let ret = temps.pop();\n      ret.type = type;\n      return ret;\n    }\n    return this.addLocal(type);\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    if (temps.length > 0) {\n      return temps[temps.length - 1];\n    }\n    var local: Local = this.addLocal(type);\n    temps.push(local);\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) {\n      this.breakStack = [ id ];\n    } else {\n      this.breakStack.push(id);\n    }\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      if (debugLocations) {\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\n          let debugLocation = debugLocations[i];\n          module.setDebugLocation(\n            ref,\n            debugLocation.debugInfoRef,\n            debugLocation.source.debugInfoIndex,\n            debugLocation.line,\n            debugLocation.column\n          );\n        }\n      }\n    }\n    this.debugLocations = null;\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(prototype: FieldPrototype, internalName: string, type: Type) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n\n  /** Overloaded indexed get method, if any. */\n  fnIndexedGet: string | null = null;\n  /** Overloaded indexed set method, if any. */\n  fnIndexedSet: string | null = null;\n  /** Overloaded concatenation method, if any. */\n  fnConcat: string | null = null;\n  /** Overloaded equality comparison method, if any. */\n  fnEquals: string | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.is(CommonFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) {\n        instance.constructorInstance = partialConstructor.resolve(); // reports\n      }\n      // TODO: ^ doesn't know the return type, hence returns null\n    }\n\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (fieldType) {\n              let fieldInstance = new Field(\n                <FieldPrototype>member,\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n                fieldType\n              );\n              switch (fieldType.byteSize) { // align\n                case 1: break;\n                case 2: {\n                  if (memoryOffset & 1) ++memoryOffset;\n                  break;\n                }\n                case 4: {\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                  break;\n                }\n                case 8: {\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                  break;\n                }\n                default: assert(false);\n              }\n              fieldInstance.memoryOffset = memoryOffset;\n              memoryOffset += fieldType.byteSize;\n              instance.members.set(member.simpleName, fieldInstance);\n            }\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\n            if (!instance.members) instance.members = new Map();\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (methodPrototype) {\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\n              instance.members.set(member.simpleName, methodPrototype);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n    instance.currentMemoryOffset = memoryOffset; // sizeof<this>() is its byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      if (base.contextualTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) {\n        return true;\n      }\n    } while (current = current.base);\n    return false;\n  }\n\n  toString(): string {\n    return this.prototype.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration\n  ) {\n    super(program, simpleName, internalName, declaration);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always throws. */\n  THROWS = 1 << 1,\n  /** This branch always breaks. */\n  BREAKS = 1 << 2,\n  /** This branch always continues. */\n  CONTINUES = 1 << 3,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 4,\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 5,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 6,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 7,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 8,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 9\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Enters a new branch or scope and returns the new flow. */\n  enterBranchOrScope(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    return branch;\n  }\n\n  /** Leaves the current branch or scope and returns the parent flow. */\n  leaveBranchOrScope(): Flow {\n    var parent = assert(this.parent);\n\n    // Free block-scoped locals\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        this.currentFunction.freeTempLocal(scopedLocal);\n      }\n      this.scopedLocals = null;\n    }\n\n    // Propagate flags to parent\n    if (this.is(FlowFlags.RETURNS)) {\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (this.is(FlowFlags.THROWS)) {\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (this.is(FlowFlags.ALLOCATES)) {\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, reportNode: Node): void {\n    var scopedLocal = this.currentFunction.getTempLocal(type);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else if (this.scopedLocals.has(name)) {\n      this.currentFunction.program.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        reportNode.range\n      );\n      return;\n    }\n    this.scopedLocals.set(name, scopedLocal);\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.locals.get(name);\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null, \"must be the topmost parent flow\");\n    this.continueLabel = null;\n    this.breakLabel = null;\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\n    start--;\n  }\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\n    end++;\n  }\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nimport {\n  encodeAndInject\n} from \"primea-annotations\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64()\n\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n  out: usize;\n  globalsCount: i32 = 0;\n  persistentGlobals: i32[] = [];\n  funcsCount: i32 = 0;\n  customTypeMap: Map<string, i32[]> = new Map();\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.out = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocI32Array(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocI32Array(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef,\n    isPersistent: bool = false\n  ): GlobalRef {\n    var cStr = allocString(name);\n    if (isPersistent) {\n      this.persistentGlobals.push(this.globalsCount);\n    }\n    this.globalsCount++;\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef,\n    customType: string | null = null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    if (customType) {\n      this.customTypeMap.set(customType, (this.customTypeMap.get(customType) || []).concat([this.funcsCount]));\n    }\n    this.funcsCount++;\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocI32Array(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    // Primea custom section - persistent globals, etc\n    let customJSON: {\n      persist?: Array<any>;\n      types?: Array<any>;\n      typeMap?: Array<any>;\n    } = {};\n\n    if (this.persistentGlobals.length > 0) {\n      customJSON.persist = this.persistentGlobals.map((index: i32) => ({\n        index,\n        form: \"global\",\n        type: \"data\"\n      }));\n    }\n\n    if (this.customTypeMap.size > 0) {\n      customJSON.types = [];\n      customJSON.typeMap = [];\n      let typeIndex: i32 = 0;\n\n      for (let paramString of this.customTypeMap.keys()) {\n        customJSON.types.push({\n          form: \"func\",\n          params: paramString.split(',')\n        });\n        let funcs = this.customTypeMap.get(paramString) || [];\n        customJSON.typeMap = customJSON.typeMap.concat(\n          funcs.map((func: i32) => ({\n            func,\n            type: typeIndex\n          }))\n        );\n        typeIndex++;\n      }\n    }\n\n    var out = this.out;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = encodeAndInject(customJSON, readBuffer(binaryPtr, binaryBytes));\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    if (!this.ref) return; // sic\n    _BinaryenModuleDispose(this.ref);\n    free_memory(this.out);\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenLoadIsAtomic(expr)\n          ? _BinaryenAtomicLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadGetOffset(expr),\n              _BinaryenExpressionGetType(expr),\n              nested1\n            )\n          : _BinaryenLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\n              _BinaryenLoadGetOffset(expr),\n               _BinaryenLoadGetAlign(expr),\n               _BinaryenExpressionGetType(expr),\n               nested1\n            );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n      return relooper;\n  }\n\n  static createStub(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = 0;\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameterTypes = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    expression: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = expression; expression.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    if (expression.kind == NodeKind.IDENTIFIER) {\n      switch ((<IdentifierExpression>expression).text) {\n        case \"global\": {\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\n          break;\n        }\n        case \"operator\": {\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\n          break;\n        }\n        case \"unmanaged\": {\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\n          break;\n        }\n        case \"offset\": {\n          stmt.decoratorKind = DecoratorKind.OFFSET;\n          break;\n        }\n        case \"persistent\": {\n          stmt.decoratorKind = DecoratorKind.PERSISTENT;\n          break;\n        }\n        case \"type\": {\n          stmt.decoratorKind = DecoratorKind.FUNCTION_TYPE;\n          break;\n        }\n        default: {\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\n          break;\n        }\n      }\n    } else {\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\n    }\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[], // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[],\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameterTypes: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  UNMANAGED,\n  OFFSET,\n  PERSISTENT,\n  FUNCTION_TYPE\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    this.internalPath = mangleInternalPath(this.normalizedPath);\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented. */\n  implementsTypes: TypeNode[]; // can't be a function\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members. */\n  members: ExportMember[];\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Gets the first decorator by name within at set of decorators, if present. */\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let expression = decorator.name;\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\n        return decorator;\n      }\n    }\n  }\n  return null;\n}\n\n/** Tests if a specific decorator is present within the specified decorators. */\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\n  return getFirstDecorator(name, decorators) != null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","exports.unsigned = require('./unsigned.js')\nexports.signed = require('./signed.js')\n","const Buffer = require('safe-buffer').Buffer\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor (buf = Buffer.from([])) {\n    this.buffer = buf\n    this._bytesRead = 0\n    this._bytesWrote = 0\n  }\n\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n  read (num) {\n    this._bytesRead += num\n    const data = this.buffer.subarray(0, num)\n    this.buffer = this.buffer.subarray(num)\n    return data\n  }\n\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n  write (buf) {\n    buf = Buffer.from(buf)\n    this._bytesWrote += buf.length\n    this.buffer = Buffer.concat([this.buffer, buf])\n  }\n\n  /**\n   * Whether or not there is more data to read from the buffer\n   * returns {Boolean}\n   */\n  get end () {\n    return !this.buffer.length\n  }\n\n  /**\n   * returns the number of bytes read from the stream\n   * @return {Integer}\n   */\n  get bytesRead () {\n    return this._bytesRead\n  }\n\n  /**\n   * returns the number of bytes wrote to the stream\n   * @return {Integer}\n   */\n  get bytesWrote () {\n    return this._bytesWrote\n  }\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport function tokenFomKeyword(text: string): Token {\n  switch (text) {\n    case \"abstract\": return Token.ABSTRACT;\n    case \"as\": return Token.AS;\n    case \"async\": return Token.ASYNC;\n    case \"await\": return Token.AWAIT;\n    case \"break\": return Token.BREAK;\n    case \"case\": return Token.CASE;\n    case \"catch\": return Token.CATCH;\n    case \"class\": return Token.CLASS;\n    case \"continue\": return Token.CONTINUE;\n    case \"const\": return Token.CONST;\n    case \"constructor\": return Token.CONSTRUCTOR;\n    case \"debugger\": return Token.DEBUGGER;\n    case \"declare\": return Token.DECLARE;\n    case \"default\": return Token.DEFAULT;\n    case \"delete\": return Token.DELETE;\n    case \"do\": return Token.DO;\n    case \"else\": return Token.ELSE;\n    case \"enum\": return Token.ENUM;\n    case \"export\": return Token.EXPORT;\n    case \"extends\": return Token.EXTENDS;\n    case \"false\": return Token.FALSE;\n    case \"finally\": return Token.FINALLY;\n    case \"for\": return Token.FOR;\n    case \"from\": return Token.FROM;\n    case \"function\": return Token.FUNCTION;\n    case \"get\": return Token.GET;\n    case \"if\": return Token.IF;\n    case \"implements\": return Token.IMPLEMENTS;\n    case \"import\": return Token.IMPORT;\n    case \"in\": return Token.IN;\n    case \"instanceof\": return Token.INSTANCEOF;\n    case \"interface\": return Token.INTERFACE;\n    case \"is\": return Token.IS;\n    case \"keyof\": return Token.KEYOF;\n    case \"let\": return Token.LET;\n    case \"module\": return Token.MODULE;\n    case \"namespace\": return Token.NAMESPACE;\n    case \"new\": return Token.NEW;\n    case \"null\": return Token.NULL;\n    case \"of\": return Token.OF;\n    case \"package\": return Token.PACKAGE;\n    case \"private\": return Token.PRIVATE;\n    case \"protected\": return Token.PROTECTED;\n    case \"public\": return Token.PUBLIC;\n    case \"readonly\": return Token.READONLY;\n    case \"return\": return Token.RETURN;\n    case \"set\": return Token.SET;\n    case \"static\": return Token.STATIC;\n    case \"super\": return Token.SUPER;\n    case \"switch\": return Token.SWITCH;\n    case \"this\": return Token.THIS;\n    case \"throw\": return Token.THROW;\n    case \"true\": return Token.TRUE;\n    case \"try\": return Token.TRY;\n    case \"type\": return Token.TYPE;\n    case \"typeof\": return Token.TYPEOF;\n    case \"var\": return Token.VAR;\n    case \"void\": return Token.VOID;\n    case \"while\": return Token.WHILE;\n    case \"with\": return Token.WITH;\n    case \"yield\": return Token.YIELD;\n    default: return Token.INVALID;\n  }\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(preferIdentifier: bool = false): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(preferIdentifier);\n  }\n\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFomKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    preferIdentifier: bool = false,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skip(token: Token): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n    reusableState = state;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if (c < CharCode._0 || c > CharCode._9) break;\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a sized integer type with a target specific bit size. */\n  SIZE = 1 << 4,\n  /** Is a small type that is emulated in a larger type. */\n  SMALL = 1 << 5,\n  /** Is a long type larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. Ceiled to 8-bits. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying function reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective nullable type, if non-nullable. */\n  nullableType: Type | null = null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    return ~0 >>> (targetType.size - this.size);\n  }\n\n  /** Tests if this type has the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.nullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.nullableType.classReference = this.classReference;       // either a class reference\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.nullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (currentClass = this.classReference) {\n          if (targetClass = target.classReference) {\n            return currentClass.isAssignableTo(targetClass);\n          }\n        } else if (currentFunction = this.signatureReference) {\n          if (targetFunction = target.signatureReference) {\n            return currentFunction.isAssignableTo(targetFunction);\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) {\n      return left;\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\n      return right;\n    }\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: {\n        let functionType = this.signatureReference;\n        return kindOnly || !functionType\n          ? \"u32\"\n          : functionType.toString(true);\n      }\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: {\n        let classType = this.classReference;\n        return kindOnly || !classType\n          ? \"usize\"\n          : classType.toString();\n      }\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    ret[i] = types[i].toNativeType();\n  }\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    sb[i] = types[i].toString();\n  }\n  return sb.join(\", \");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getGenericParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\n        return false;\n      }\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) {\n      return false; // TODO\n    }\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) {\n      return false;\n    }\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\n        return false;\n      }\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    var sb = [];\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(thisType.toSignatureString());\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(this.returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) {\n          sb.push((<string[]>names)[i]);\n        } else {\n          sb.push(getGenericParameterName(i));\n        }\n        if (i >= optionalStart && i != restIndex) {\n          sb.push(\"?: \");\n        } else {\n          sb.push(\": \");\n        }\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached generic parameter names used where names are unknown.\nvar cachedGenericParameterNames: string[] | null = null;\n\n/** Gets the cached generic parameter name for the specified index. */\nexport function getGenericParameterName(index: i32): string {\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedGenericParameterNames[index - 1];\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileGetConstant as compileBuiltinGetConstant,\n  compileAllocate as compileBuiltinAllocate\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef\n} from \"./module\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  CommonFlags,\n  ConstantValueKind,\n\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  hasDecorator,\n  getFirstDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, does not set up a memory. */\n  noMemory: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Start function being compiled. */\n  startFunction: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[] = [];\n\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = new Array();\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n\n  /** Function table being compiled. */\n  functionTable: Function[] = new Array();\n\n  /** Already processed file names. */\n  files: Set<string> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function wrapping top-level statements, of all files.\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var startFunctionInstance = new Function(\n      <FunctionPrototype>startFunctionPrototype,\n      startFunctionPrototype.internalName,\n      new Signature([], Type.void)\n    );\n    this.startFunction = startFunctionInstance;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing to reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) {\n        this.compileSource(sources[i]);\n      }\n    }\n\n    // compile the start function if not empty\n    var startFunctionBody = this.startFunctionBody;\n    if (startFunctionBody.length) {\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\n      let funcRef: FunctionRef;\n      module.setStart(\n        funcRef = module.addFunction(\n          startFunctionInstance.internalName,\n          typeRef,\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\n          module.createBlock(null, startFunctionBody)\n        )\n      );\n      startFunctionInstance.finalize(module, funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    if (!options.noMemory) {\n      let memoryOffset = this.memoryOffset;\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n      this.memoryOffset = memoryOffset;\n      if (options.isWasm64) {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I64,\n          false,\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I32,\n          false,\n          module.createI32(i64_low(memoryOffset))\n        );\n      }\n\n      // determine initial page size\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\n      module.setMemory(\n        i64_low(pages),\n        this.options.isWasm64\n          ? Module.MAX_MEMORY_WASM64\n          : Module.MAX_MEMORY_WASM32,\n        this.memorySegments,\n        options.target,\n        \"memory\"\n      );\n    }\n\n    // import memory if requested\n    if (options.importMemory) {\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\n    }\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n    }\n\n    // import table if requested\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableSize) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var sources = this.program.sources;\n\n    // try file.ts\n    var expected = normalizedPathWithoutExtension + \".ts\";\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == expected) {\n        this.compileSource(source);\n        return;\n      }\n    }\n\n    // try file/index.ts\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == expected) {\n        this.compileSource(source);\n        return;\n      }\n    }\n\n    // try (lib)/file.ts\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == expected) {\n        this.compileSource(source);\n        return;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.File_0_not_found,\n      reportNode.range, normalizedPathWithoutExtension\n    );\n  }\n\n  compileSource(source: Source): void {\n    var files = this.files;\n    var normalizedPath = source.normalizedPath;\n    if (files.has(normalizedPath)) return;\n    files.add(normalizedPath);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunction = this.startFunction;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunction;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n\n      // resolve now if annotated\n      if (declaration.type) {\n        let resolvedType = this.program.resolveType(declaration.type); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.type.range\n          );\n          return false;\n        }\n        global.type = resolvedType;\n\n      // infer from initializer if not annotated\n      } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n        initExpr = this.compileExpression( // reports\n          declaration.initializer,\n          Type.void,\n          ConversionKind.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.type = this.currentType;\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        module.addGlobalImport(\n          global.internalName,\n          global.namespace\n            ? global.namespace.simpleName\n            : \"env\",\n          global.simpleName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(declaration.initializer, global.type);\n        }\n\n        // check if the initializer is constant\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n    const isPersistent = hasDecorator(\"persistent\", declaration.decorators);\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module), isPersistent);\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = _BinaryenExpressionGetType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              _BinaryenConstGetValueI64Low(initExpr),\n              _BinaryenConstGetValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              global.declaration.range\n            );\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(0);\n            break;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\n          module.addGlobal(internalName, nativeType, false, initExpr, isPersistent);\n        }\n        if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\n          module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr, isPersistent);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                valueDeclaration.range\n              );\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\n          if (member.is(CommonFlags.INLINED)) {\n            module.addGlobalExport(member.internalName, member.internalName);\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!(instance && this.compileFunction(instance))) return null;\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    var thisType = signature.thisType;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    for (let i = 0; i < numParameters; ++i, ++index) {\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\n    }\n    var resultType = signature.returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.simpleName == \"abort\");\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching but still compile as-is\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var typeRef = this.ensureFunctionType(instance.signature);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType: Type = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\n        flow.set(FlowFlags.RETURNS);\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        stmt = this.compileStatement(body);\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createGetLocal(0, nativeSizeType)\n              ], nativeSizeType);\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.memberOf);\n              assert(parent.kind == ElementKind.CLASS);\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createTeeLocal(0,\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\n                )\n              ], nativeSizeType);\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n      }\n      this.currentFunction = previousFunction;\n\n      const customTypeDecorator = getFirstDecorator(\"type\", declaration.decorators);\n      let customTypes\n      if (customTypeDecorator != null && customTypeDecorator.arguments && customTypeDecorator.arguments.length > 0) {\n        customTypes = customTypeDecorator.arguments.map((expr: IdentifierExpression) => expr.text).join(',')\n      }\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt,\n        customTypes\n      );\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n\n      // create the function import\n      let namespace = instance.prototype.namespace;\n      ref = module.addFunctionImport(\n        instance.internalName,\n        namespace\n          ? namespace.simpleName\n          : \"env\",\n        instance.simpleName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\n      module.addFunctionExport(instance.internalName, declaration.name.text);\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: {\n          assert(false);\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            member.range\n          );\n          break;\n        }\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var exports = this.program.fileLevelExports;\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = exports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        expr = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        expr = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        expr = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        expr = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        expr = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        expr = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        expr = this.compileVariableStatement(<VariableStatement>statement);\n        if (!expr) expr = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        expr = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        expr = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunction) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        expr = module.createUnreachable();\n        break;\n      }\n    }\n    if (this.options.sourceMap) {\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\n    }\n    return expr;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    for (let i = 0; i < numStatements; ++i) {\n      stmts[i] = this.compileStatement(statements[i]);\n    }\n    return stmts; // array of 0-es in noEmit-mode\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\n    // statement, but that's not what the source told us to do and left to the\n    // optimizer.\n\n    // Not actually a branch, but can contain its own scoped variables.\n    var flow = this.currentFunction.flow.enterBranchOrScope();\n    this.currentFunction.flow = flow;\n\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\n    var stmtThrows = flow.is(FlowFlags.THROWS);\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\n\n    // Switch back to the parent flow\n    flow = flow.leaveBranchOrScope();\n    this.currentFunction.flow = flow;\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n\n    // A do statement does not initiate a new branch because it is executed at\n    // least once, but has its own break and continue labels.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow;\n    var previousBreakLabel = flow.breakLabel;\n    var previousContinueLabel = flow.continueLabel;\n\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n\n    // Reset to the previous break and continue labels, if any.\n    flow.breakLabel = previousBreakLabel;\n    flow.continueLabel = previousContinueLabel;\n\n    var module = this.module;\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\n\n    this.currentFunction.leaveBreakContext();\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createBlock(null, [\n          body,\n          module.createBreak(continueLabel, condExpr)\n        ], NativeType.None))\n    ], NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var context = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + context;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + context;\n    flow.continueLabel = continueLabel;\n\n    // Compile in correct order\n    var module = this.module;\n    var initializer = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : module.createNop();\n    var condition = statement.condition\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\n      : module.createI32(1);\n    var incrementor = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\n      : module.createNop();\n    var body = this.compileStatement(statement.statement);\n\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\n    // TODO: check other always-true conditions as well, not just omitted\n\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      initializer,\n      module.createLoop(continueLabel, module.createBlock(null, [\n        module.createIf(condition, module.createBlock(null, [\n          body,\n          incrementor,\n          module.createBreak(continueLabel)\n        ], NativeType.None))\n      ], NativeType.None))\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, append a hint\n    if (alwaysReturns || alwaysThrows) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      let ret: ExpressionRef;\n      if (_BinaryenConstGetValueI32(condExpr)) {\n        ret = this.compileStatement(ifTrue);\n      } else if (ifFalse) {\n        ret = this.compileStatement(ifFalse);\n      } else {\n        ret = module.createNop();\n      }\n      return ret;\n    }\n\n    // Each arm initiates a branch\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\n    flow = flow.leaveBranchOrScope();\n    currentFunction.flow = flow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    var ifFalseReturns = false;\n    var ifFalseThrows = false;\n    var ifFalseAllocates = false;\n    if (ifFalse) {\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n    }\n\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var expression: ExpressionRef = 0;\n    if (statement.value) {\n      expression = this.compileExpression(\n        statement.value,\n        currentFunction.signature.returnType\n      );\n    }\n\n    // Remember that this flow returns\n    currentFunction.flow.set(FlowFlags.RETURNS);\n\n    return this.module.createReturn(expression);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n    var cases = statement.cases;\n    var numCases = cases.length;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.i32)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n      let body = new Array<ExpressionRef>(1 + numStatements);\n      body[0] = currentBlock;\n\n      // Each switch case initiates a new branch\n      let flow = currentFunction.flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let fallsThrough = i != numCases - 1;\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      for (let j = 0; j < numStatements; ++j) {\n        body[j + 1] = this.compileStatement(statements[j]);\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\n        alwaysReturns = false; // ignore fall-throughs\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\n        alwaysThrows = false;\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\n        alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      currentFunction.flow = flow.leaveBranchOrScope();\n\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default and always returns, propagate that\n    if (defaultIndex >= 0) {\n      let flow = currentFunction.flow;\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return this.module.createUnreachable();\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunction &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let init: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          currentFunction.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          init = this.compileExpression(declaration.initializer, type); // reports\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        init = this.compileExpression( // reports\n          declaration.initializer,\n          Type.void,\n          ConversionKind.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        if (init) {\n          init = this.precomputeExpressionRef(init);\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (_BinaryenExpressionGetType(init)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  _BinaryenConstGetValueI64Low(init),\n                  _BinaryenConstGetValueI64High(init)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\n                break;\n              }\n              default: {\n                assert(false);\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  declaration.range\n                );\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return 0;\n            }\n            scopedLocals.set(name, local);\n            return 0;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (declaration.is(CommonFlags.LET)) { // here: not top-level\n        currentFunction.flow.addScopedLocal(name, type, declaration.name); // reports\n      } else {\n        currentFunction.addLocal(type, name); // reports\n      }\n      if (init) {\n        initializers.push(this.compileAssignmentWithValue(declaration.name, init));\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      if (!_BinaryenConstGetValueI32(condExpr)) {\n        return module.createNop();\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\n    // TODO: evaluate if condition is always true\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr, module.createBlock(null, [\n          body,\n          module.createBreak(continueLabel)\n        ], NativeType.None))\n      )\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, propagate that and append a hint\n    if (alwaysReturns) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      case TypeKind.F64: {\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          element.declaration.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(\n          <ParenthesizedExpression>expression,\n          contextualType,\n          wrapSmallIntegers\n        );\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n        break;\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\n      this.currentType = contextualType;\n    }\n\n    if (this.options.sourceMap) {\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\n    }\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapSmallIntegers\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\n    var typeRefAdded = false;\n    if (!typeRef) {\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\n      typeRefAdded = true;\n    }\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = _BinaryenFunctionGetBody(funcRef);\n    module.removeFunction(\"__precompute\");\n    if (typeRefAdded) {\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\n      // a `null` typeRef, using an implicit type.\n    }\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) {\n      return module.createDrop(expr);\n    }\n\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\n      this.error(\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n        reportNode.range, fromType.toString(), toType.toString()\n      ); // recoverable\n    }\n\n    // TODO: make this a proper switch?\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n          if (toType.is(TypeFlags.SMALL)) {\n            expr = makeSmallIntegerWrap(expr, toType, module);\n          }\n        }\n\n      // i32 to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\n\n      // i32 or smaller to even smaller or same size int with change of sign\n      } else if (\n        toType.is(TypeFlags.SMALL) &&\n        (\n          fromType.size > toType.size ||\n          (\n            fromType.size == toType.size &&\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\n          )\n        )\n      ) {\n        expr = makeSmallIntegerWrap(expr, toType, module);\n      }\n\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\n  }\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var condExpr: ExpressionRef;\n    var expr: ExpressionRef;\n    var compound = false;\n    var possiblyOverflows = false;\n    var tempLocal: Local | null = null;\n\n    switch (expression.operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n        // TODO?\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                assert(this.currentType == Type.bool);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n        // TODO?\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnConcat;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // TODO: when can division remain unwrapped? does it overflow?\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: possiblyOverflows = true;\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // TODO: when can remainder remain unwrapped? does it overflow?\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            // TODO: internal fmod, possibly simply imported from JS\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false // ^\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // must wrap small integers\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          true // ^\n        );\n        switch (this.currentType.kind) {\n          default: {\n            // assumes signed shr on signed small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // modifies low bits of small integers if unsigned\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          true // ^\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: possiblyOverflows = true;\n          default: {\n            // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false\n        );\n\n        // clone left if free of side effects\n        expr = module.cloneExpression(leftExpr, true, 0);\n\n        // if not possible, tee left to a temp. local\n        if (!expr) {\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\n        }\n\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\n\n        // simplify when cloning left without side effects was successful\n        if (expr) {\n          expr = module.createIf(\n            condExpr,  // left\n            rightExpr, //   ? right\n            expr       //   : cloned left\n          );\n        }\n\n        // otherwise make use of the temp. local\n        else {\n          expr = module.createIf(\n            condExpr,\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false\n        );\n\n        // clone left if free of side effects\n        expr = this.module.cloneExpression(leftExpr, true, 0);\n\n        // if not possible, tee left to a temp. local\n        if (!expr) {\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\n        }\n\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\n\n        // simplify when cloning left without side effects was successful\n        if (expr) {\n          expr = this.module.createIf(\n            condExpr, // left\n            expr,      //   ? cloned left\n            rightExpr      //   : right\n          );\n        }\n\n        // otherwise make use of the temp. local\n        else {\n          expr = module.createIf(\n            condExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n        break;\n      }\n    }\n    if (possiblyOverflows && wrapSmallIntegers) {\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileOperatorOverload(\n    classInstance: Class,\n    operatorName: string,\n    leftExpr: ExpressionRef,\n    rightExpr: ExpressionRef\n  ): ExpressionRef {\n    var classPrototype = classInstance.prototype;\n    var operatorPrototype = assert(assert(classPrototype.members).get(operatorName));\n    assert(operatorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var operatorInstance = (<FunctionPrototype>operatorPrototype).resolve();\n    if (!operatorInstance) return this.module.createUnreachable();\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ]);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var resolved = this.program.resolveExpression(expression, currentFunction); // reports\n    if (!resolved) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var element = resolved.element;\n    var elementType: Type;\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>element).type != Type.void, \"concrete type expected\");\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        elementType = (<VariableLikeElement>element).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>element).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1);\n          elementType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>element).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (expression.kind == NodeKind.ELEMENTACCESS) { // @operator(\"[]\")\n          if (resolved.target && resolved.target.kind == ElementKind.CLASS) {\n            if (element.simpleName == (<Class>resolved.target).prototype.fnIndexedGet) {\n              let resolvedIndexedSet = (<FunctionPrototype>element).resolve(null); // reports\n              if (resolvedIndexedSet) {\n                elementType = resolvedIndexedSet.signature.returnType;\n                break;\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>resolved.target).toString()\n              );\n              return this.module.createUnreachable();\n            }\n          }\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    var valueExpr = this.compileExpression(valueExpression, elementType);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var resolved = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!resolved) return module.createUnreachable();\n\n    var element = resolved.element;\n    switch (element.kind) {\n      case ElementKind.LOCAL: {\n        this.currentType = tee ? (<Local>element).type : Type.void;\n        if ((<Local>element).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Local>element).internalName\n          );\n          return module.createUnreachable();\n        }\n        return tee\n          ? module.createTeeLocal((<Local>element).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>element).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>element)) return module.createUnreachable();\n        let type = (<Global>element).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>element).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            (<Local>element).internalName\n          );\n          return module.createUnreachable();\n        }\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = (<Global>element).internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal((<Global>element).internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>element).internalName\n          );\n          return module.createUnreachable();\n        }\n        assert(resolved.isInstanceTarget);\n        let targetExpr = this.compileExpression(\n          <Expression>resolved.targetExpression,\n          (<Class>resolved.target).type\n        );\n        let type = (<Field>element).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (tee) {\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.size >> 3,\n              targetExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>element).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.size >> 3,\n            targetExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>element).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>element).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              assert(resolved.isInstanceTarget);\n              let thisArg = this.compileExpression(\n                <Expression>resolved.targetExpression,\n                (<Class>resolved.target).type\n              );\n              return this.makeCallDirect(setterInstance, [ thisArg, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>element).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            assert(resolved.isInstanceTarget);\n            let thisArg = this.compileExpression(\n              <Expression>resolved.targetExpression,\n              (<Class>resolved.target).type\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisArg),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>element).internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // @operator(\"[]\") ?\n        if (expression.kind == NodeKind.ELEMENTACCESS) {\n          assert(resolved.isInstanceTarget);\n          let getterInstance = (<FunctionPrototype>element).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          // obtain @operator(\"[]=\")\n          let setElementName = (<Class>resolved.target).prototype.fnIndexedSet;\n          let setElement: Element | null;\n          if (\n            setElementName != null &&\n            (<Class>resolved.target).members &&\n            (setElement = (<Map<string,Element>>(<Class>resolved.target).members).get(setElementName)) &&\n            setElement.kind == ElementKind.FUNCTION_PROTOTYPE\n          ) {\n            let setterInstance = (<FunctionPrototype>setElement).resolve(); // reports\n            if (!setterInstance) return module.createUnreachable();\n            let targetType = (<Class>resolved.target).type;\n            let targetExpr = this.compileExpression(\n              <Expression>resolved.targetExpression,\n              targetType\n            );\n            let elementExpr = this.compileExpression(\n              (<ElementAccessExpression>expression).elementExpression,\n              Type.i32\n            );\n            if (tee) {\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\n              let returnType = getterInstance.signature.returnType;\n              this.currentFunction.freeTempLocal(tempLocalTarget);\n              return module.createBlock(null, [\n                this.makeCallDirect(setterInstance, [\n                  module.createTeeLocal(tempLocalTarget.index, targetExpr),\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\n                  valueWithCorrectType\n                ]),\n                this.makeCallDirect(getterInstance, [\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n                ])\n              ], returnType.toNativeType());\n            } else {\n              return this.makeCallDirect(setterInstance, [\n                targetExpr,\n                elementExpr,\n                valueWithCorrectType\n              ]);\n            }\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>resolved.target).internalName\n            );\n            return module.createUnreachable();\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var resolved = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!resolved) return module.createUnreachable();\n\n    var element = resolved.element;\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (element.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>element;\n\n        // builtins are compiled on the fly\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          let expr = compileBuiltinCall( // reports\n            this,\n            prototype,\n            prototype.resolveBuiltinTypeArguments(\n              expression.typeArguments,\n              currentFunction.contextualTypeArguments\n            ),\n            expression.arguments,\n            contextualType,\n            expression\n          );\n          if (!expr) {\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n          return expr;\n\n        // otherwise compile to a call\n        } else {\n          let instance = prototype.resolveUsingTypeArguments( // reports\n            expression.typeArguments,\n            currentFunction.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return module.createUnreachable();\n          let thisArg: ExpressionRef = 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            assert(resolved.isInstanceTarget);\n            thisArg = this.compileExpression(\n              <Expression>resolved.targetExpression,\n              (<Class>resolved.target).type\n            );\n            if (!thisArg) return module.createUnreachable();\n          } else {\n            assert(!resolved.isInstanceTarget);\n          }\n          return this.compileCallDirect(instance, expression.arguments, expression, thisArg);\n        }\n      }\n\n      // indirect call: index argument with signature\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>element).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>element).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>element).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>element).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>element).internalName, (<Global>element).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>element).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>element).type;\n        if (signature = type.signatureReference) {\n          let targetExpr = this.compileExpression(assert(resolved.targetExpression), type);\n          indexArg = module.createLoad(\n            4,\n            false,\n            targetExpr,\n            NativeType.I32,\n            (<Field>element).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>element).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>element).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>element).type);\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i]\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = maxOperands - minOperands;\n    assert(numOptional);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // append an additional parameter taking the number of optional arguments provided\n    var trampolineParameterTypes = new Array<Type>(maxArguments + 1);\n    for (let i = 0; i < maxArguments; ++i) {\n      trampolineParameterTypes[i] = originalParameterTypes[i];\n    }\n    trampolineParameterTypes[maxArguments] = Type.i32;\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(trampolineParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments + 1;\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\n    trampoline.flags = original.flags;\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\n    trampoline.set(CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. 'with0'\n    var names = new Array<string>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      let label = \"N=\" + i.toString();\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"N=invalid\", [\n        module.createSwitch(names, \"N=invalid\",\n          // condition is number of provided optional operands, so subtract required operands\n          minOperands\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetLocal(maxOperands, NativeType.I32),\n                module.createI32(minOperands)\n              )\n            : module.createGetLocal(maxOperands, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      body = module.createBlock(names[i + 1], [\n        body,\n        module.createSetLocal(operandIndex,\n          this.compileExpression(\n            assert(originalParameterDeclarations[minArguments + i].initializer),\n            type\n          )\n        )\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var typeRef = this.ensureFunctionType(trampolineSignature);\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(instance: Function, operands: ExpressionRef[] | null = null): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    if (numOperands < maxOperands) {\n      instance = this.ensureTrampoline(instance);\n      if (!this.compileFunction(instance)) return module.createUnreachable();\n      if (!operands) {\n        operands = new Array(maxOperands + 1);\n        operands.length = 0;\n      }\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(instance.signature.parameterTypes[i].toNativeZero(module));\n      }\n      operands.push(module.createI32(numOperands)); // actual number of provided operands\n    }\n    var returnType = instance.signature.returnType;\n    this.currentType = returnType;\n    if (instance.is(CommonFlags.MODULE_IMPORT)) {\n      return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    } else {\n      return module.createCall(instance.internalName, operands, returnType.toNativeType());\n    }\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i]\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(signature: Signature, indexArg: ExpressionRef, operands: ExpressionRef[]): ExpressionRef {\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    this.ensureFunctionType(signature);\n    return this.module.createCallIndirect(indexArg, operands, signature.toSignatureString());\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var resolved = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!resolved) return this.module.createUnreachable();\n\n    assert( // should be guaranteed by resolveElementAccess\n      resolved.element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n      resolved.target &&\n      resolved.target.kind == ElementKind.CLASS\n    );\n    var target = <Class>resolved.target;\n    var instance = (<FunctionPrototype>resolved.element).resolve( // reports\n      null,\n      target.contextualTypeArguments\n    );\n    if (!instance) return this.module.createUnreachable();\n    var thisArg = this.compileExpression(expression.expression, target.type);\n    return this.compileCallDirect(instance, [\n      expression.elementExpression\n    ], expression, thisArg);\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + \"~\" + simpleName,\n      declaration\n    );\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      currentFunction.contextualTypeArguments,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let currentFunction = this.currentFunction;\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.memberOf);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            let flow = currentFunction.flow;\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                makeConditionalAllocate(this, <Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let currentFunction = this.currentFunction;\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.memberOf);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var resolved = this.program.resolveIdentifier( // reports\n      expression,\n      this.currentFunction,\n      this.currentEnum\n    );\n    if (!resolved) return module.createUnreachable();\n\n    var element = resolved.element;\n    switch (element.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>element).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>element, contextualType, retainConstantType);\n        }\n        let localType = (<Local>element).type;\n        let localIndex = (<Local>element).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return compileBuiltinGetConstant(this, <Global>element, expression);\n        }\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>element).type;\n        assert(globalType != Type.void);\n        if ((<Global>element).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!element.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>element).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>element).resolve(\n          null,\n          this.currentFunction.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.elementsLookup.get(\"Array\")\n        ) {\n          return this.compileStaticArray(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.elementsLookup.get(\"Array\"));\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayType) return module.createUnreachable();\n\n    var elementSize = expressions.length;\n    var nativeType = elementType.toNativeType();\n    var values: usize;\n    var memorySize: usize;\n    switch (nativeType) {\n      case NativeType.I32: {\n        values = changetype<usize>(new Int32Array(elementSize));\n        memorySize = elementSize * 4;\n        break;\n      }\n      case NativeType.I64: {\n        values = changetype<usize>(new Array<I64>(elementSize));\n        memorySize = elementSize * 8;\n        break;\n      }\n      case NativeType.F32: {\n        values = changetype<usize>(new Float32Array(elementSize));\n        memorySize = elementSize * 4;\n        break;\n      }\n      case NativeType.F64: {\n        values = changetype<usize>(new Float64Array(elementSize));\n        memorySize = elementSize * 8;\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // precompute value expressions\n    var exprs = new Array<ExpressionRef>(elementSize);\n    var expr: BinaryenExpressionRef;\n    for (let i = 0; i < elementSize; ++i) {\n      exprs[i] = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType)\n        : elementType.toNativeZero(module);\n      if (isStatic) {\n        expr = this.precomputeExpressionRef(exprs[i]);\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\n          switch (nativeType) {\n            case NativeType.I32: {\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\n              break;\n            }\n            case NativeType.I64: {\n              changetype<I64[]>(values)[i] = i64_new(\n                _BinaryenConstGetValueI64Low(expr),\n                _BinaryenConstGetValueI64High(expr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\n              break;\n            }\n            case NativeType.F64: {\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\n              break;\n            }\n            default: {\n              assert(false); // checked above\n            }\n          }\n        } else {\n          // TODO: emit a warning if declared 'const'\n          isStatic = false;\n        }\n      }\n    }\n\n    var usizeTypeSize = this.options.usizeType.byteSize;\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\n\n    if (isStatic) {\n      let buffer = new Uint8Array(headerSize + memorySize);\n      let segment = this.addMemorySegment(buffer);\n\n      // make header\n      let offset = 0;\n      if (usizeTypeSize == 8) {\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\n      } else {\n        assert(i64_high(segment.offset) == 0);\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\n      }\n      offset += usizeTypeSize;\n      writeI32(elementSize, buffer, offset); // capacity\n      offset += 4;\n      writeI32(elementSize, buffer, offset); // length\n      offset += 4;\n      assert(offset == headerSize);\n\n      // make memory\n      switch (nativeType) {\n        case NativeType.I32: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\n          }\n          break;\n        }\n        case NativeType.I64: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\n          }\n          break;\n        }\n        case NativeType.F32: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\n          }\n          break;\n        }\n        case NativeType.F64: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\n          }\n          break;\n        }\n        default: {\n          assert(false);\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          return module.createUnreachable();\n        }\n      }\n      assert(offset == headerSize + memorySize);\n      this.currentType = arrayType.type;\n      return usizeTypeSize == 8\n        ? module.createI64(\n            i64_low(segment.offset),\n            i64_high(segment.offset)\n          )\n        : module.createI32(\n            i64_low(segment.offset)\n          );\n    } else {\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\n      // on top? any benefits?\n      throw new Error(\"not implemented\");\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var resolved = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!resolved) return module.createUnreachable();\n    if (resolved.element.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>resolved.element;\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\n      expression.typeArguments,\n      null,\n      expression\n    );\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n    var constructorInstance = classInstance.constructorInstance;\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = makeAllocate(this, classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      wrapSmallIntegers\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var resolved = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!resolved) return module.createUnreachable();\n\n    var element = resolved.element;\n    var targetExpr: ExpressionRef;\n    switch (element.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (element.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return compileBuiltinGetConstant(this, <Global>element, propertyAccess);\n        }\n        if (!this.compileGlobal(<Global>element)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>element).type;\n        assert(globalType != Type.void);\n        if ((<Global>element).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>element, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>element).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        if (!this.compileEnum((<EnumValue>element).enum)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>element).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>element).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>element).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert(resolved.isInstanceTarget);\n        assert((<Field>element).memoryOffset >= 0);\n        targetExpr = this.compileExpression(\n          <Expression>resolved.targetExpression,\n          this.options.usizeType,\n          ConversionKind.NONE\n        );\n        this.currentType = (<Field>element).type;\n        return module.createLoad(\n          (<Field>element).type.size >> 3,\n          (<Field>element).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          targetExpr,\n          (<Field>element).type.toNativeType(),\n          (<Field>element).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>element).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.memberOf);\n            assert(parent.kind == ElementKind.CLASS);\n            targetExpr = this.compileExpression(\n              <Expression>resolved.targetExpression,\n              (<Class>parent).type\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, targetExpr);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>element).simpleName, (<Property>element).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = makeIsTrueish(\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\n      this.currentType,\n      this.module\n    );\n\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      return _BinaryenConstGetValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var currentFunction = this.currentFunction;\n    var ifThenExpr: ExpressionRef;\n    var ifElseExpr: ExpressionRef;\n\n    // if part of a constructor, keep track of memory allocations\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let flow = currentFunction.flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // otherwise simplify\n    } else {\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\n    }\n\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression(\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      false // wrapped below\n    );\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n    var possiblyOverflows = false;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    var setValue: ExpressionRef;\n    var tempLocal: Local | null = null;\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      setValue = module.createBinary(op,\n        getValue,\n        nativeOne\n      );\n\n    // otherwise use a temp local for the intermediate value\n    } else {\n      tempLocal = currentFunction.getTempLocal(currentType);\n      setValue = module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      );\n    }\n\n    if (possiblyOverflows) {\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\n    }\n\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\n    // ^ sets currentType = void\n    if (contextualType == Type.void) {\n      assert(!tempLocal);\n      return setValue;\n    }\n\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType);\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    var module = this.module;\n    var currentType = this.currentType;\n\n    var possiblyOverflows = false;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\n        break;\n      }\n      case Token.MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          if (this.options.sourceMap) {\n            // compileExpression normally does this\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\n          }\n          currentType = this.currentType;\n        } else {\n          expr = this.compileExpression(\n            expression.operand,\n            contextualType == Type.void\n              ? Type.i32\n              : contextualType,\n            ConversionKind.NONE,\n            false // wrapped below\n          );\n          currentType = this.currentType;\n          switch (currentType.kind) {\n            case TypeKind.I8:\n            case TypeKind.I16:\n            case TypeKind.U8:\n            case TypeKind.U16:\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n            default: {\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n              break;\n            }\n            case TypeKind.USIZE: {\n              if (currentType.is(TypeFlags.REFERENCE)) {\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  expression.range\n                );\n                return module.createUnreachable();\n              }\n              // fall-through\n            }\n            case TypeKind.ISIZE: {\n              expr = module.createBinary(\n                this.options.isWasm64\n                  ? BinaryOp.SubI64\n                  : BinaryOp.SubI32,\n                currentType.toNativeZero(module),\n                expr\n              );\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: {\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n              break;\n            }\n            case TypeKind.F32: {\n              expr = module.createUnary(UnaryOp.NegF32, expr);\n              break;\n            }\n            case TypeKind.F64: {\n              expr = module.createUnary(UnaryOp.NegF64, expr);\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          true // must wrap small integers\n        );\n        expr = makeIsFalseish(expr, this.currentType, module);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          contextualType == Type.void\n            ? ConversionKind.NONE\n            : ConversionKind.IMPLICIT,\n          false // retains low bits of small integers\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        // it might make sense to implement typeof in a way that a generic function can detect\n        // whether its type argument is a class type or string. that could then be used, for\n        // example, to generate hash codes for sets and maps, depending on the kind of type\n        // parameter we have. ideally the comparison would not involve actual string comparison and\n        // limit available operations to hard-coded string literals.\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    if (possiblyOverflows && wrapSmallIntegers) {\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\n      expr = makeSmallIntegerWrap(expr, currentType, module);\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n}\n\n// helpers\n\n/** Adds the debug location of the specified expression at the specified range to the source map. */\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\n  var source = range.source;\n  if (source.debugInfoIndex < 0) {\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\n  }\n  range.debugInfoRef = expr;\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\n  currentFunction.debugLocations.push(range);\n}\n\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    case TypeKind.I8: {\n      return module.createBinary(BinaryOp.ShrI32,\n        module.createBinary(BinaryOp.ShlI32,\n          expr,\n          module.createI32(24)\n        ),\n        module.createI32(24)\n      );\n    }\n    case TypeKind.I16: {\n      return module.createBinary(BinaryOp.ShrI32,\n        module.createBinary(BinaryOp.ShlI32,\n          expr,\n          module.createI32(16)\n        ),\n        module.createI32(16)\n      );\n    }\n    case TypeKind.U8: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0xff)\n      );\n    }\n    case TypeKind.U16: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0xffff)\n      );\n    }\n    case TypeKind.BOOL: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0x1)\n      );\n    }\n    default: {\n      assert(false);\n      return expr;\n    }\n  }\n}\n\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    default: { // any native i32\n      return module.createUnary(UnaryOp.EqzI32, expr);\n    }\n    case TypeKind.I64:\n    case TypeKind.U64: {\n      return module.createUnary(UnaryOp.EqzI64, expr);\n    }\n    case TypeKind.USIZE: // TODO: strings?\n    case TypeKind.ISIZE: {\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n    }\n    case TypeKind.F32: {\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n    }\n    case TypeKind.F64: {\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n    }\n    case TypeKind.VOID: {\n      assert(false);\n      return module.createI32(1);\n    }\n  }\n}\n\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    default: { // any native i32\n      return expr;\n    }\n    case TypeKind.I64:\n    case TypeKind.U64: {\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n    }\n    case TypeKind.USIZE: // TODO: strings?\n    case TypeKind.ISIZE: {\n      return type.size == 64\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n        : expr;\n    }\n    case TypeKind.F32: {\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n    }\n    case TypeKind.F64: {\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n    }\n    case TypeKind.VOID: {\n      assert(false);\n      return module.createI32(0);\n    }\n  }\n}\n\n/** Makes an allocation expression for an instance of the specified class. */\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\n  var module = compiler.module;\n  var currentFunction = compiler.currentFunction;\n  var nativeSizeType = compiler.options.nativeSizeType;\n\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\n\n  // allocate the necessary memory\n  var initializers = new Array<ExpressionRef>();\n  initializers.push(\n    module.createSetLocal(tempLocal.index,\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\n    )\n  );\n\n  // apply field initializers\n  if (classInstance.members) {\n    for (let member of classInstance.members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        let field = <Field>member;\n        let fieldType = field.type;\n        let fieldDeclaration = field.prototype.declaration;\n        assert(!field.isAny(CommonFlags.CONST));\n        if (fieldDeclaration.initializer) { // use initializer\n          initializers.push(module.createStore(fieldType.byteSize,\n            module.createGetLocal(tempLocal.index, nativeSizeType),\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\n            fieldType.toNativeType(),\n            field.memoryOffset\n          ));\n        } else { // initialize with zero\n          // TODO: might be unnecessary if the ctor initializes the field\n          initializers.push(module.createStore(field.type.byteSize,\n            module.createGetLocal(tempLocal.index, nativeSizeType),\n            field.type.toNativeZero(module),\n            field.type.toNativeType(),\n            field.memoryOffset\n          ));\n        }\n      }\n    }\n  }\n\n  // return `this`\n  initializers.push(\n    module.createGetLocal(tempLocal.index, nativeSizeType)\n  );\n\n  currentFunction.freeTempLocal(tempLocal);\n  compiler.currentType = classInstance.type;\n  return module.createBlock(null, initializers, nativeSizeType);\n}\n\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\n  // requires that `this` is the first local\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  compiler.currentType = classInstance.type;\n  return module.createIf(\n    nativeSizeType == NativeType.I64\n      ? module.createBinary(\n          BinaryOp.NeI64,\n          module.createGetLocal(0, NativeType.I64),\n          module.createI64(0)\n        )\n      : module.createGetLocal(0, NativeType.I32),\n    module.createGetLocal(0, nativeSizeType),\n    module.createTeeLocal(0,\n      makeAllocate(compiler, classInstance, reportNode)\n    )\n  );\n}\n","const Buffer = require('safe-buffer').Buffer\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor (buf = Buffer.from([])) {\n    this.buffer = buf\n  }\n\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n  read (num) {\n    const data = this.buffer.subarray(0, num)\n    this.buffer = this.buffer.subarray(num)\n    return data\n  }\n\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n  write (buf) {\n    buf = Buffer.from(buf)\n    this.buffer = Buffer.concat([this.buffer, buf])\n  }\n}\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  Program,\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Log of source file names to be requested. */\n  backlog: string[] = new Array();\n  /** Log of source file names already processed. */\n  seenlog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var program = this.program;\n\n    // check if already parsed\n    var normalizedPath = normalizePath(path);\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].normalizedPath == normalizedPath) return;\n    }\n    this.seenlog.add(normalizedPath);\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      let name = decorator.name;\n      if (name.kind == NodeKind.IDENTIFIER) {\n        let text = (<IdentifierExpression>name).text;\n        if (text == \"global\") {\n          flags |= CommonFlags.GLOBAL;\n          continue;\n        }\n        if (text == \"unmananged\") {\n          flags |= CommonFlags.UNMANAGED;\n          continue;\n        }\n        if (text == \"sealed\") {\n          flags |= CommonFlags.SEALED;\n          continue;\n        }\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        tn.next();\n        flags |= CommonFlags.ABSTRACT;\n        if (!tn.skip(Token.CLASS)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(tn.pos), \"class\"\n          );\n          break;\n        }\n        // fall through\n      }\n      case Token.CLASS: {\n        tn.next();\n        statement = this.parseClass(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        tn.next();\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: {\n        tn.next();\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    // 'void'\n    if (token == Token.VOID) {\n      return Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n    }\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skip(Token.IDENTIFIER)) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.IDENTIFIER)) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\n        if (!member) return null;\n        members.push(<EnumValueDeclaration>member);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"}\"\n        );\n        return null;\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    if (!tn.skip(Token.GREATERTHAN)) {\n      do {\n        let typeParameter = this.parseTypeParameter(tn);\n        if (!typeParameter) return null;\n        typeParameters.push(<TypeParameterNode>typeParameter);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \">\"\n        );\n        return null;\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseParameters(\n    tn: Tokenizer\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n\n    if (tn.peek() != Token.CLOSEPAREN) {\n      do {\n        let param = this.parseParameter(tn);\n        if (!param) return null;\n        if (seenRest && !reportedRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n            seenRest.name.range\n          );\n          reportedRest = true;\n        }\n        switch (param.parameterKind) {\n          default: {\n            if (seenOptional) {\n              this.error(\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n                param.name.range\n              );\n            }\n            break;\n          }\n          case ParameterKind.OPTIONAL: {\n            seenOptional = true;\n            break;\n          }\n          case ParameterKind.REST: {\n            seenRest = param;\n            break;\n          }\n        }\n        parameters.push(param);\n      } while (tn.skip(Token.COMMA));\n    }\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    suppressErrors: bool = false\n  ): ParameterNode | null {\n\n    // before: '...'? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      isRest = true;\n      startRange = tn.range();\n    }\n    if (tn.skip(Token.IDENTIFIER)) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      return Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClass(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at 'class':\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes = new Array<TypeNode>();\n    if (tn.skip(Token.IMPLEMENTS)) {\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        implementsTypes.push(<TypeNode>type);\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, flags);\n        if (!member) return null;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassDeclaration(\n      identifier,\n      typeParameters,\n      extendsType,\n      implementsTypes,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parentFlags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parentFlags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn);\n      if (!parameters) return null;\n\n      if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        null,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n      let path: StringLiteralExpression | null = null;\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      if (ret.normalizedPath && !this.seenlog.has(<string>ret.normalizedPath)) {\n        this.backlog.push(<string>ret.normalizedPath);\n        this.seenlog.add(<string>ret.normalizedPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseImportDeclaration(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        if (!this.seenlog.has(ret.normalizedPath)) {\n          this.backlog.push(ret.normalizedPath);\n          this.seenlog.add(ret.normalizedPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.TYPE: {\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(true);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(true);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.IDENTIFIER)) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(true);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var p = determinePrecedenceStart(token);\n    if (p != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, p);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(true)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        if (!tn.skip(Token.CLOSEBRACKET)) {\n          do {\n            if (tn.peek() == Token.COMMA) {\n              expr = null; // omitted\n            } else {\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\n              if (!expr) return null;\n            }\n            elementExpressions.push(expr);\n            if (tn.peek() == Token.CLOSEBRACKET) break;\n          } while (tn.skip(Token.COMMA));\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      do {\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!expr) return null;\n        args.push(expr);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        return null;\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression with type arguments\n    var typeArguments: CommonTypeNode[] | null;\n    while (\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\n      tn.skip(Token.OPENPAREN)\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) return null;\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn);\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn);\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.CLOSEBRACE     // current step should handle this\n      ) {\n        break;\n      }\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): i32 {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): i32 {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  Program,\n  Element,\n  CommonFlags,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Function,\n  Class,\n  Namespace,\n  FunctionPrototype,\n  ClassPrototype,\n  ConstantValueKind,\n  Interface\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program) {\n    this.program = program;\n  }\n\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) {\n      this.visitElement(element);\n    }\n  }\n\n  visitElement(element: Element): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) {\n          this.visitGlobal(<Global>element);\n        }\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) {\n          this.visitEnum(<Enum>element);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          if (instance.is(CommonFlags.COMPILED)) {\n            this.visitFunction(<Function>instance);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          if (instance.is(CommonFlags.COMPILED)) {\n            this.visitClass(<Class>instance);\n          }\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\n          this.visitNamespace(<Namespace>element);\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private seen: Set<Element> = new Set();\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program) {\n    super(program);\n  }\n\n  visitGlobal(element: Global): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) {\n      sb.push(\"const \");\n    }\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) {\n            sb.push(\"const \");\n          } else {\n            sb.push(\"readonly \");\n          }\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) {\n          this.visitElement(member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitNamespace(element: Namespace): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private seen: Set<Element> = new Set();\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program) {\n    super(program);\n  }\n\n  visitGlobal(element: Global): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) {\n      sb.push(\"const \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          this.seen.add(member);\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) {\n        this.visitNamespace(element);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(\"function \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    sb.push(\"): \");\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) {\n        sb.push(\"abstract \");\n      }\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      // TODO\n    }\n    members = element.members; // instance\n    if (members) {\n      // TODO\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  readString\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\n    var body = _BinaryenFunctionGetBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\n    this.push(\" \");\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = _BinaryenExpressionGetId(expr);\n    var type = _BinaryenExpressionGetType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = _BinaryenBlockGetNumChildren(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = _BinaryenBreakGetCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  _BinaryenConstGetValueI64Low(expr),\n                  _BinaryenConstGetValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (_BinaryenUnaryGetOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (_BinaryenBinaryGetOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(_BinaryenDropGetValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = _BinaryenReturnGetValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (_BinaryenHostGetOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program,\n  LIBRARY_PREFIX\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) {\n    parser = new Parser();\n    isEntry = true;\n  }\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `noMemory` option. */\nexport function setNoMemory(options: Options, noMemory: bool): void {\n  options.noMemory = noMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX };\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const immediates = require('./immediates.json')\n\nmodule.exports = (text) => {\n  const json = []\n  const textArray = text.split(/\\s|\\n/)\n  while (textArray.length) {\n    const textOp = textArray.shift()\n    const jsonOp = {}\n\n    let [type, name] = textOp.split('.')\n\n    if (name === undefined) {\n      name = type\n    } else {\n      jsonOp.return_type = type\n    }\n\n    jsonOp.name = name\n\n    const immediate = immediates[jsonOp.name === 'const' ? jsonOp.return_type : jsonOp.name]\n\n    if (immediate) {\n      jsonOp.immediates = immediataryParser(immediate, textArray)\n    }\n\n    json.push(jsonOp)\n  }\n  return json\n}\n\nfunction immediataryParser (type, txt) {\n  const json = {}\n  switch (type) {\n    case 'br_table':\n      const dests = []\n\n      while (1) {\n        let dest = txt[0]\n        if (isNaN(dest)) break\n        txt.shift()\n        dests.push(dest)\n      }\n\n      return dests\n    case 'call_indirect':\n      json.index = txt.shift()\n      json.reserved = 0\n      return json\n    case 'memory_immediate':\n      json.flags = txt.shift()\n      json.offset = txt.shift()\n      return json\n    default:\n      return txt.shift()\n  }\n}\n","const Buffer = require('safe-buffer').Buffer\nconst leb = require('leb128')\nconst Stream = require('buffer-pipe')\nconst OP_IMMEDIATES = require('./immediates.json')\n\nconst _exports = module.exports = (json) => {\n  return _exports.generate(json).buffer\n}\n\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#language-types\n// All types are distinguished by a negative varint7 values that is the first\n// byte of their encoding (representing a type constructor)\nconst LANGUAGE_TYPES = _exports.LANGUAGE_TYPES = {\n  'i32': 0x7f,\n  'i64': 0x7e,\n  'f32': 0x7d,\n  'f64': 0x7c,\n  'anyFunc': 0x70,\n  'func': 0x60,\n  'block_type': 0x40\n}\n\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#external_kind\n// A single-byte unsigned integer indicating the kind of definition being imported or defined:\nconst EXTERNAL_KIND = _exports.EXTERNAL_KIND = {\n  'function': 0,\n  'table': 1,\n  'memory': 2,\n  'global': 3\n}\n\nconst SECTION_IDS = _exports.SECTION_IDS = {\n  'custom': 0,\n  'type': 1,\n  'import': 2,\n  'function': 3,\n  'table': 4,\n  'memory': 5,\n  'global': 6,\n  'export': 7,\n  'start': 8,\n  'element': 9,\n  'code': 10,\n  'data': 11\n}\n\nconst OPCODES = _exports.OPCODES = {\n  'unreachable': 0x0,\n  'nop': 0x1,\n  'block': 0x2,\n  'loop': 0x3,\n  'if': 0x4,\n  'else': 0x5,\n  'end': 0xb,\n  'br': 0xc,\n  'br_if': 0xd,\n  'br_table': 0xe,\n  'return': 0xf,\n  'call': 0x10,\n  'call_indirect': 0x11,\n  'drop': 0x1a,\n  'select': 0x1b,\n  'get_local': 0x20,\n  'set_local': 0x21,\n  'tee_local': 0x22,\n  'get_global': 0x23,\n  'set_global': 0x24,\n  'i32.load': 0x28,\n  'i64.load': 0x29,\n  'f32.load': 0x2a,\n  'f64.load': 0x2b,\n  'i32.load8_s': 0x2c,\n  'i32.load8_u': 0x2d,\n  'i32.load16_s': 0x2e,\n  'i32.load16_u': 0x2f,\n  'i64.load8_s': 0x30,\n  'i64.load8_u': 0x31,\n  'i64.load16_s': 0x32,\n  'i64.load16_u': 0x33,\n  'i64.load32_s': 0x34,\n  'i64.load32_u': 0x35,\n  'i32.store': 0x36,\n  'i64.store': 0x37,\n  'f32.store': 0x38,\n  'f64.store': 0x39,\n  'i32.store8': 0x3a,\n  'i32.store16': 0x3b,\n  'i64.store8': 0x3c,\n  'i64.store16': 0x3d,\n  'i64.store32': 0x3e,\n  'current_memory': 0x3f,\n  'grow_memory': 0x40,\n  'i32.const': 0x41,\n  'i64.const': 0x42,\n  'f32.const': 0x43,\n  'f64.const': 0x44,\n  'i32.eqz': 0x45,\n  'i32.eq': 0x46,\n  'i32.ne': 0x47,\n  'i32.lt_s': 0x48,\n  'i32.lt_u': 0x49,\n  'i32.gt_s': 0x4a,\n  'i32.gt_u': 0x4b,\n  'i32.le_s': 0x4c,\n  'i32.le_u': 0x4d,\n  'i32.ge_s': 0x4e,\n  'i32.ge_u': 0x4f,\n  'i64.eqz': 0x50,\n  'i64.eq': 0x51,\n  'i64.ne': 0x52,\n  'i64.lt_s': 0x53,\n  'i64.lt_u': 0x54,\n  'i64.gt_s': 0x55,\n  'i64.gt_u': 0x56,\n  'i64.le_s': 0x57,\n  'i64.le_u': 0x58,\n  'i64.ge_s': 0x59,\n  'i64.ge_u': 0x5a,\n  'f32.eq': 0x5b,\n  'f32.ne': 0x5c,\n  'f32.lt': 0x5d,\n  'f32.gt': 0x5e,\n  'f32.le': 0x5f,\n  'f32.ge': 0x60,\n  'f64.eq': 0x61,\n  'f64.ne': 0x62,\n  'f64.lt': 0x63,\n  'f64.gt': 0x64,\n  'f64.le': 0x65,\n  'f64.ge': 0x66,\n  'i32.clz': 0x67,\n  'i32.ctz': 0x68,\n  'i32.popcnt': 0x69,\n  'i32.add': 0x6a,\n  'i32.sub': 0x6b,\n  'i32.mul': 0x6c,\n  'i32.div_s': 0x6d,\n  'i32.div_u': 0x6e,\n  'i32.rem_s': 0x6f,\n  'i32.rem_u': 0x70,\n  'i32.and': 0x71,\n  'i32.or': 0x72,\n  'i32.xor': 0x73,\n  'i32.shl': 0x74,\n  'i32.shr_s': 0x75,\n  'i32.shr_u': 0x76,\n  'i32.rotl': 0x77,\n  'i32.rotr': 0x78,\n  'i64.clz': 0x79,\n  'i64.ctz': 0x7a,\n  'i64.popcnt': 0x7b,\n  'i64.add': 0x7c,\n  'i64.sub': 0x7d,\n  'i64.mul': 0x7e,\n  'i64.div_s': 0x7f,\n  'i64.div_u': 0x80,\n  'i64.rem_s': 0x81,\n  'i64.rem_u': 0x82,\n  'i64.and': 0x83,\n  'i64.or': 0x84,\n  'i64.xor': 0x85,\n  'i64.shl': 0x86,\n  'i64.shr_s': 0x87,\n  'i64.shr_u': 0x88,\n  'i64.rotl': 0x89,\n  'i64.rotr': 0x8a,\n  'f32.abs': 0x8b,\n  'f32.neg': 0x8c,\n  'f32.ceil': 0x8d,\n  'f32.floor': 0x8e,\n  'f32.trunc': 0x8f,\n  'f32.nearest': 0x90,\n  'f32.sqrt': 0x91,\n  'f32.add': 0x92,\n  'f32.sub': 0x93,\n  'f32.mul': 0x94,\n  'f32.div': 0x95,\n  'f32.min': 0x96,\n  'f32.max': 0x97,\n  'f32.copysign': 0x98,\n  'f64.abs': 0x99,\n  'f64.neg': 0x9a,\n  'f64.ceil': 0x9b,\n  'f64.floor': 0x9c,\n  'f64.trunc': 0x9d,\n  'f64.nearest': 0x9e,\n  'f64.sqrt': 0x9f,\n  'f64.add': 0xa0,\n  'f64.sub': 0xa1,\n  'f64.mul': 0xa2,\n  'f64.div': 0xa3,\n  'f64.min': 0xa4,\n  'f64.max': 0xa5,\n  'f64.copysign': 0xa6,\n  'i32.wrap/i64': 0xa7,\n  'i32.trunc_s/f32': 0xa8,\n  'i32.trunc_u/f32': 0xa9,\n  'i32.trunc_s/f64': 0xaa,\n  'i32.trunc_u/f64': 0xab,\n  'i64.extend_s/i32': 0xac,\n  'i64.extend_u/i32': 0xad,\n  'i64.trunc_s/f32': 0xae,\n  'i64.trunc_u/f32': 0xaf,\n  'i64.trunc_s/f64': 0xb0,\n  'i64.trunc_u/f64': 0xb1,\n  'f32.convert_s/i32': 0xb2,\n  'f32.convert_u/i32': 0xb3,\n  'f32.convert_s/i64': 0xb4,\n  'f32.convert_u/i64': 0xb5,\n  'f32.demote/f64': 0xb6,\n  'f64.convert_s/i32': 0xb7,\n  'f64.convert_u/i32': 0xb8,\n  'f64.convert_s/i64': 0xb9,\n  'f64.convert_u/i64': 0xba,\n  'f64.promote/f32': 0xbb,\n  'i32.reinterpret/f32': 0xbc,\n  'i64.reinterpret/f64': 0xbd,\n  'f32.reinterpret/i32': 0xbe,\n  'f64.reinterpret/i64': 0xbf\n}\n\n_exports.typeGenerators = {\n  'function': (json, stream) => {\n    stream.write([json])\n  },\n  table: (json, stream) => {\n    stream.write([LANGUAGE_TYPES[json.elementType]])\n    _exports.typeGenerators.memory(json.limits, stream)\n  },\n  /**\n   * generates a [`global_type`](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#global_type)\n   */\n  global: (json, stream) => {\n    stream.write([LANGUAGE_TYPES[json.contentType]])\n    stream.write([json.mutability])\n  },\n  /**\n   * Generates a [resizable_limits](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * @param {Object} json\n   * @param {Stream} stream\n   */\n  memory: (json, stream) => {\n    leb.unsigned.write(Number(json.maximum !== undefined), stream) // the flags\n    leb.unsigned.write(json.intial, stream)\n\n    if (json.maximum !== undefined) {\n      leb.unsigned.write(json.maximum, stream)\n    }\n  },\n  /**\n   * Generates a [init_expr](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * The encoding of an initializer expression is the normal encoding of the\n   * expression followed by the end opcode as a delimiter.\n   */\n  initExpr: (json, stream) => {\n    _exports.generateOp(json, stream)\n    _exports.generateOp({name: 'end', type: 'void'}, stream)\n  }\n}\n\n_exports.immediataryGenerators = {\n  'varuint1': (json, stream) => {\n    stream.write([json])\n    return stream\n  },\n  'varuint32': (json, stream) => {\n    leb.unsigned.write(json, stream)\n    return stream\n  },\n  'varint32': (json, stream) => {\n    leb.signed.write(json, stream)\n    return stream\n  },\n  'varint64': (json, stream) => {\n    leb.signed.write(json, stream)\n    return stream\n  },\n  'uint32': (json, stream) => {\n    stream.write(json)\n    return stream\n  },\n  'uint64': (json, stream) => {\n    stream.write(json)\n    return stream\n  },\n  'block_type': (json, stream) => {\n    stream.write([LANGUAGE_TYPES[json]])\n    return stream\n  },\n  'br_table': (json, stream) => {\n    leb.unsigned.write(json.targets.length, stream)\n    for (let target of json.targets) {\n      leb.unsigned.write(target, stream)\n    }\n    leb.unsigned.write(json.defaultTarget, stream)\n    return stream\n  },\n  'call_indirect': (json, stream) => {\n    leb.unsigned.write(json.index, stream)\n    stream.write([json.reserved])\n    return stream\n  },\n  'memory_immediate': (json, stream) => {\n    leb.unsigned.write(json.flags, stream)\n    leb.unsigned.write(json.offset, stream)\n\n    return stream\n  }\n}\n\nconst sectionGenerators = {\n  'custom': (json, stream = new Stream()) => {\n    stream.write([0])\n    const payload = new Stream()\n    leb.unsigned.write(json.sectionName.length, payload)\n    payload.write(json.sectionName)\n    payload.write(json.payload)\n    // write the size of the payload\n    leb.unsigned.write(payload.bytesWrote, stream)\n    stream.write(payload.buffer)\n    return stream\n  },\n  'type': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['type']])\n    let binEntries = new Stream()\n\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      // a single type entry binary encoded\n      binEntries.write([LANGUAGE_TYPES[entry.form]]) // the form\n\n      const len = entry.params.length // number of parameters\n      leb.unsigned.write(len, binEntries)\n      if (len !== 0) {\n        binEntries.write(entry.params.map(type => LANGUAGE_TYPES[type])) // the paramter types\n      }\n\n      binEntries.write([entry.return_type ? 1 : 0]) // number of return types\n\n      if (entry.return_type) {\n        binEntries.write([LANGUAGE_TYPES[entry.return_type]])\n      }\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream) // write the size\n    stream.write(binEntries.buffer)\n\n    return stream\n  },\n  'import': (json, stream) => {\n    stream.write([SECTION_IDS['import']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries) // write the number of entries\n    for (let entry of json.entries) {\n      // write the module string\n      leb.unsigned.write(entry.moduleStr.length, binEntries)\n      binEntries.write(entry.moduleStr)\n      // write the field string\n      leb.unsigned.write(entry.fieldStr.length, binEntries)\n      binEntries.write(entry.fieldStr)\n      binEntries.write([EXTERNAL_KIND[entry.kind]])\n      _exports.typeGenerators[entry.kind](entry.type, binEntries)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream) // write the size\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'function': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['function']])\n\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let index of json.entries) {\n      leb.unsigned.write(index, binEntries)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'table': (json, stream) => {\n    stream.write([SECTION_IDS['table']])\n    let binEntries = new Stream()\n    // write table_type\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      _exports.typeGenerators.table(entry, binEntries)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n\n    return stream\n  },\n  'memory': (json, stream) => {\n    stream.write([SECTION_IDS['memory']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      _exports.typeGenerators.memory(entry, binEntries)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'global': (json, stream) => {\n    stream.write([SECTION_IDS['global']])\n    let binEntries = new Stream()\n\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      _exports.typeGenerators.global(entry.type, binEntries)\n      _exports.typeGenerators.initExpr(entry.init, binEntries)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'export': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['export']])\n\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      const fieldStr = Buffer.from(entry.field_str)\n      const strLen = fieldStr.length\n      leb.unsigned.write(strLen, binEntries)\n      binEntries.write(fieldStr)\n      binEntries.write([EXTERNAL_KIND[entry.kind]])\n      leb.unsigned.write(entry.index, binEntries)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'start': (json, stream) => {\n    stream.write([SECTION_IDS['start']])\n    const index = new Stream()\n    leb.unsigned.write(json.index, index)\n    leb.unsigned.write(index.bytesWrote, stream)\n    stream.write(index.buffer)\n    return stream\n  },\n  'element': (json, stream) => {\n    stream.write([SECTION_IDS['element']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n\n    for (let entry of json.entries) {\n      leb.unsigned.write(entry.index, binEntries)\n      _exports.typeGenerators.initExpr(entry.offset, binEntries)\n      leb.unsigned.write(entry.elements.length, binEntries)\n      for (let elem of entry.elements) {\n        leb.unsigned.write(elem, binEntries)\n      }\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'code': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['code']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n\n    for (let entry of json.entries) {\n      let codeStream = new Stream()\n      // write the locals\n      leb.unsigned.write(entry.locals.length, codeStream)\n      for (let local of entry.locals) {\n        leb.unsigned.write(local.count, codeStream)\n        codeStream.write([LANGUAGE_TYPES[local.type]])\n      }\n      // write opcode\n      for (let op of entry.code) {\n        _exports.generateOp(op, codeStream)\n      }\n\n      leb.unsigned.write(codeStream.bytesWrote, binEntries)\n      binEntries.write(codeStream.buffer)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'data': (json, stream) => {\n    stream.write([SECTION_IDS['data']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      leb.unsigned.write(entry.index, binEntries)\n      _exports.typeGenerators.initExpr(entry.offset, binEntries)\n      leb.unsigned.write(entry.data.length, binEntries)\n      binEntries.write(entry.data)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  }\n}\n\n_exports.generate = (json, stream = new Stream()) => {\n  _exports.generatePreramble(json.shift(), stream)\n  for (let item of json) {\n    sectionGenerators[item.name](item, stream)\n  }\n\n  return stream\n}\n\n_exports.generatePreramble = (json, stream = new Stream()) => {\n  stream.write(json.magic)\n  stream.write(json.version)\n  return stream\n}\n\n_exports.generateOp = (json, stream = new Stream()) => {\n  let name = json.name\n  if (json.return_type !== undefined) {\n    name = json.return_type + '.' + name\n  }\n\n  stream.write([OPCODES[name]])\n\n  const immediates = OP_IMMEDIATES[json.name === 'const' ? json.return_type : json.name]\n  if (immediates) {\n    _exports.immediataryGenerators[immediates](json.immediates, stream)\n  }\n  return stream\n}\n","const leb = require('leb128')\nconst Stream = require('buffer-pipe')\nconst OP_IMMEDIATES = require('./immediates.json')\n\nconst _exports = module.exports = (buf, filter) => {\n  const stream = new Stream(buf)\n  return _exports.parse(stream, filter)\n}\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#language-types\n// All types are distinguished by a negative varint7 values that is the first\n// byte of their encoding (representing a type constructor)\nconst LANGUAGE_TYPES = _exports.LANGUAGE_TYPES = {\n  0x7f: 'i32',\n  0x7e: 'i64',\n  0x7d: 'f32',\n  0x7c: 'f64',\n  0x70: 'anyFunc',\n  0x60: 'func',\n  0x40: 'block_type'\n}\n\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#external_kind\n// A single-byte unsigned integer indicating the kind of definition being imported or defined:\nconst EXTERNAL_KIND = _exports.EXTERNAL_KIND = {\n  0: 'function',\n  1: 'table',\n  2: 'memory',\n  3: 'global'\n}\n\n_exports.parsePreramble = (stream) => {\n  const obj = {}\n  obj.name = 'preramble'\n  obj.magic = [...stream.read(4)]\n  obj.version = [...stream.read(4)]\n  return obj\n}\n\n_exports.parseSectionHeader = (stream) => {\n  const id = stream.read(1)[0]\n  const size = leb.unsigned.readBn(stream).toNumber()\n  return {\n    id,\n    name: SECTION_IDS[id],\n    size\n  }\n}\n\nconst OPCODES = _exports.OPCODES = {\n  // flow control\n  0x0: 'unreachable',\n  0x1: 'nop',\n  0x2: 'block',\n  0x3: 'loop',\n  0x4: 'if',\n  0x5: 'else',\n  0xb: 'end',\n  0xc: 'br',\n  0xd: 'br_if',\n  0xe: 'br_table',\n  0xf: 'return',\n\n  // calls\n  0x10: 'call',\n  0x11: 'call_indirect',\n\n  // Parametric operators\n  0x1a: 'drop',\n  0x1b: 'select',\n\n  // Varibale access\n  0x20: 'get_local',\n  0x21: 'set_local',\n  0x22: 'tee_local',\n  0x23: 'get_global',\n  0x24: 'set_global',\n\n  // Memory-related operators\n  0x28: 'i32.load',\n  0x29: 'i64.load',\n  0x2a: 'f32.load',\n  0x2b: 'f64.load',\n  0x2c: 'i32.load8_s',\n  0x2d: 'i32.load8_u',\n  0x2e: 'i32.load16_s',\n  0x2f: 'i32.load16_u',\n  0x30: 'i64.load8_s',\n  0x31: 'i64.load8_u',\n  0x32: 'i64.load16_s',\n  0x33: 'i64.load16_u',\n  0x34: 'i64.load32_s',\n  0x35: 'i64.load32_u',\n  0x36: 'i32.store',\n  0x37: 'i64.store',\n  0x38: 'f32.store',\n  0x39: 'f64.store',\n  0x3a: 'i32.store8',\n  0x3b: 'i32.store16',\n  0x3c: 'i64.store8',\n  0x3d: 'i64.store16',\n  0x3e: 'i64.store32',\n  0x3f: 'current_memory',\n  0x40: 'grow_memory',\n\n  // Constants\n  0x41: 'i32.const',\n  0x42: 'i64.const',\n  0x43: 'f32.const',\n  0x44: 'f64.const',\n\n  // Comparison operators\n  0x45: 'i32.eqz',\n  0x46: 'i32.eq',\n  0x47: 'i32.ne',\n  0x48: 'i32.lt_s',\n  0x49: 'i32.lt_u',\n  0x4a: 'i32.gt_s',\n  0x4b: 'i32.gt_u',\n  0x4c: 'i32.le_s',\n  0x4d: 'i32.le_u',\n  0x4e: 'i32.ge_s',\n  0x4f: 'i32.ge_u',\n  0x50: 'i64.eqz',\n  0x51: 'i64.eq',\n  0x52: 'i64.ne',\n  0x53: 'i64.lt_s',\n  0x54: 'i64.lt_u',\n  0x55: 'i64.gt_s',\n  0x56: 'i64.gt_u',\n  0x57: 'i64.le_s',\n  0x58: 'i64.le_u',\n  0x59: 'i64.ge_s',\n  0x5a: 'i64.ge_u',\n  0x5b: 'f32.eq',\n  0x5c: 'f32.ne',\n  0x5d: 'f32.lt',\n  0x5e: 'f32.gt',\n  0x5f: 'f32.le',\n  0x60: 'f32.ge',\n  0x61: 'f64.eq',\n  0x62: 'f64.ne',\n  0x63: 'f64.lt',\n  0x64: 'f64.gt',\n  0x65: 'f64.le',\n  0x66: 'f64.ge',\n\n  // Numeric operators\n  0x67: 'i32.clz',\n  0x68: 'i32.ctz',\n  0x69: 'i32.popcnt',\n  0x6a: 'i32.add',\n  0x6b: 'i32.sub',\n  0x6c: 'i32.mul',\n  0x6d: 'i32.div_s',\n  0x6e: 'i32.div_u',\n  0x6f: 'i32.rem_s',\n  0x70: 'i32.rem_u',\n  0x71: 'i32.and',\n  0x72: 'i32.or',\n  0x73: 'i32.xor',\n  0x74: 'i32.shl',\n  0x75: 'i32.shr_s',\n  0x76: 'i32.shr_u',\n  0x77: 'i32.rotl',\n  0x78: 'i32.rotr',\n  0x79: 'i64.clz',\n  0x7a: 'i64.ctz',\n  0x7b: 'i64.popcnt',\n  0x7c: 'i64.add',\n  0x7d: 'i64.sub',\n  0x7e: 'i64.mul',\n  0x7f: 'i64.div_s',\n  0x80: 'i64.div_u',\n  0x81: 'i64.rem_s',\n  0x82: 'i64.rem_u',\n  0x83: 'i64.and',\n  0x84: 'i64.or',\n  0x85: 'i64.xor',\n  0x86: 'i64.shl',\n  0x87: 'i64.shr_s',\n  0x88: 'i64.shr_u',\n  0x89: 'i64.rotl',\n  0x8a: 'i64.rotr',\n  0x8b: 'f32.abs',\n  0x8c: 'f32.neg',\n  0x8d: 'f32.ceil',\n  0x8e: 'f32.floor',\n  0x8f: 'f32.trunc',\n  0x90: 'f32.nearest',\n  0x91: 'f32.sqrt',\n  0x92: 'f32.add',\n  0x93: 'f32.sub',\n  0x94: 'f32.mul',\n  0x95: 'f32.div',\n  0x96: 'f32.min',\n  0x97: 'f32.max',\n  0x98: 'f32.copysign',\n  0x99: 'f64.abs',\n  0x9a: 'f64.neg',\n  0x9b: 'f64.ceil',\n  0x9c: 'f64.floor',\n  0x9d: 'f64.trunc',\n  0x9e: 'f64.nearest',\n  0x9f: 'f64.sqrt',\n  0xa0: 'f64.add',\n  0xa1: 'f64.sub',\n  0xa2: 'f64.mul',\n  0xa3: 'f64.div',\n  0xa4: 'f64.min',\n  0xa5: 'f64.max',\n  0xa6: 'f64.copysign',\n\n  // Conversions\n  0xa7: 'i32.wrap/i64',\n  0xa8: 'i32.trunc_s/f32',\n  0xa9: 'i32.trunc_u/f32',\n  0xaa: 'i32.trunc_s/f64',\n  0xab: 'i32.trunc_u/f64',\n  0xac: 'i64.extend_s/i32',\n  0xad: 'i64.extend_u/i32',\n  0xae: 'i64.trunc_s/f32',\n  0xaf: 'i64.trunc_u/f32',\n  0xb0: 'i64.trunc_s/f64',\n  0xb1: 'i64.trunc_u/f64',\n  0xb2: 'f32.convert_s/i32',\n  0xb3: 'f32.convert_u/i32',\n  0xb4: 'f32.convert_s/i64',\n  0xb5: 'f32.convert_u/i64',\n  0xb6: 'f32.demote/f64',\n  0xb7: 'f64.convert_s/i32',\n  0xb8: 'f64.convert_u/i32',\n  0xb9: 'f64.convert_s/i64',\n  0xba: 'f64.convert_u/i64',\n  0xbb: 'f64.promote/f32',\n\n  // Reinterpretations\n  0xbc: 'i32.reinterpret/f32',\n  0xbd: 'i64.reinterpret/f64',\n  0xbe: 'f32.reinterpret/i32',\n  0xbf: 'f64.reinterpret/i64'\n}\n\nconst SECTION_IDS = _exports.SECTION_IDS = {\n  0: 'custom',\n  1: 'type',\n  2: 'import',\n  3: 'function',\n  4: 'table',\n  5: 'memory',\n  6: 'global',\n  7: 'export',\n  8: 'start',\n  9: 'element',\n  10: 'code',\n  11: 'data'\n}\n\n_exports.immediataryParsers = {\n  'varuint1': (stream) => {\n    const int1 = stream.read(1)[0]\n    return int1\n  },\n  'varuint32': (stream) => {\n    const int32 = leb.unsigned.read(stream)\n    return int32\n  },\n  'varint32': (stream) => {\n    const int32 = leb.signed.read(stream)\n    return int32\n  },\n  'varint64': (stream) => {\n    const int64 = leb.signed.read(stream)\n    return int64\n  },\n  'uint32': (stream) => {\n    return [...stream.read(4)]\n  },\n  'uint64': (stream) => {\n    return [...stream.read(8)]\n  },\n  'block_type': (stream) => {\n    const type = stream.read(1)[0]\n    return LANGUAGE_TYPES[type]\n  },\n  'br_table': (stream) => {\n    const json = {\n      targets: []\n    }\n    const num = leb.unsigned.readBn(stream).toNumber()\n    for (let i = 0; i < num; i++) {\n      const target = leb.unsigned.readBn(stream).toNumber()\n      json.targets.push(target)\n    }\n    json.defaultTarget = leb.unsigned.readBn(stream).toNumber()\n    return json\n  },\n  'call_indirect': (stream) => {\n    const json = {}\n    json.index = leb.unsigned.readBn(stream).toNumber()\n    json.reserved = stream.read(1)[0]\n    return json\n  },\n  'memory_immediate': (stream) => {\n    const json = {}\n    json.flags = leb.unsigned.readBn(stream).toNumber()\n    json.offset = leb.unsigned.readBn(stream).toNumber()\n    return json\n  }\n}\n\n_exports.typeParsers = {\n  'function': (stream) => {\n    return leb.unsigned.readBn(stream).toNumber()\n  },\n  table: (stream) => {\n    const entry = {}\n    const type = stream.read(1)[0] // read single byte\n    entry.elementType = LANGUAGE_TYPES[type]\n    entry.limits = _exports.typeParsers.memory(stream)\n    return entry\n  },\n  /**\n   * parses a [`global_type`](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#global_type)\n   * @param {Stream} stream\n   * @return {Object}\n   */\n  global: (stream) => {\n    const global = {}\n    let type = stream.read(1)[0]\n    global.contentType = LANGUAGE_TYPES[type]\n    global.mutability = stream.read(1)[0]\n    return global\n  },\n  /**\n   * Parses a [resizable_limits](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * @param {Stream} stream\n   * return {Object}\n   */\n  memory: (stream) => {\n    const limits = {}\n    limits.flags = leb.unsigned.readBn(stream).toNumber()\n    limits.intial = leb.unsigned.readBn(stream).toNumber()\n    if (limits.flags === 1) {\n      limits.maximum = leb.unsigned.readBn(stream).toNumber()\n    }\n    return limits\n  },\n  /**\n   * Parses a [init_expr](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * The encoding of an initializer expression is the normal encoding of the\n   * expression followed by the end opcode as a delimiter.\n   */\n  initExpr: (stream) => {\n    const op = _exports.parseOp(stream)\n    stream.read(1) // skip the `end`\n    return op\n  }\n}\n\nconst sectionParsers = _exports.sectionParsers = {\n  'custom': (stream, header) => {\n    const json = {\n      name: 'custom'\n    }\n    const section = new Stream(stream.read(header.size))\n    const nameLen = leb.unsigned.readBn(section).toNumber()\n    const name = section.read(nameLen)\n    json.sectionName = Buffer.from(name).toString()\n    json.payload = [...section.buffer]\n    return json\n  },\n  'type': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'type',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      let type = stream.read(1)[0]\n      const entry = {\n        form: LANGUAGE_TYPES[type],\n        params: []\n      }\n\n      const paramCount = leb.unsigned.readBn(stream).toNumber()\n\n      // parse the entries\n      for (let q = 0; q < paramCount; q++) {\n        const type = stream.read(1)[0]\n        entry.params.push(LANGUAGE_TYPES[type])\n      }\n      const numOfReturns = leb.unsigned.readBn(stream).toNumber()\n      if (numOfReturns) {\n        type = stream.read(1)[0]\n        entry.return_type = LANGUAGE_TYPES[type]\n      }\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'import': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'import',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {}\n      const moduleLen = leb.unsigned.readBn(stream).toNumber()\n      entry.moduleStr = Buffer.from(stream.read(moduleLen)).toString()\n\n      const fieldLen = leb.unsigned.readBn(stream).toNumber()\n      entry.fieldStr = Buffer.from(stream.read(fieldLen)).toString()\n      const kind = stream.read(1)[0] // read single byte\n      entry.kind = EXTERNAL_KIND[kind]\n      entry.type = _exports.typeParsers[entry.kind](stream)\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'function': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'function',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = leb.unsigned.readBn(stream).toNumber()\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'table': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'table',\n      entries: []\n    }\n\n    // parse table_type\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = _exports.typeParsers.table(stream)\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'memory': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'memory',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = _exports.typeParsers.memory(stream)\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'global': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'global',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {}\n      entry.type = _exports.typeParsers.global(stream)\n      entry.init = _exports.typeParsers.initExpr(stream)\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'export': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'export',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const strLength = leb.unsigned.readBn(stream).toNumber()\n      const entry = {}\n      entry.field_str = Buffer.from(stream.read(strLength)).toString()\n      const kind = stream.read(1)[0]\n      entry.kind = EXTERNAL_KIND[kind]\n      entry.index = leb.unsigned.readBn(stream).toNumber()\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'start': (stream) => {\n    const json = {\n      name: 'start'\n    }\n\n    json.index = leb.unsigned.readBn(stream).toNumber()\n    return json\n  },\n  'element': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'element',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {\n        elements: []\n      }\n\n      entry.index = leb.unsigned.readBn(stream).toNumber()\n      entry.offset = _exports.typeParsers.initExpr(stream)\n      const numElem = leb.unsigned.readBn(stream).toNumber()\n      for (let i = 0; i < numElem; i++) {\n        const elem = leb.unsigned.readBn(stream).toNumber()\n        entry.elements.push(elem)\n      }\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'code': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'code',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const codeBody = {\n        locals: [],\n        code: []\n      }\n\n      let bodySize = leb.unsigned.readBn(stream).toNumber()\n      const endBytes = stream.bytesRead + bodySize\n      // parse locals\n      const localCount = leb.unsigned.readBn(stream).toNumber()\n\n      for (let q = 0; q < localCount; q++) {\n        const local = {}\n        local.count = leb.unsigned.readBn(stream).toNumber()\n        const type = stream.read(1)[0]\n        local.type = LANGUAGE_TYPES[type]\n        codeBody.locals.push(local)\n      }\n\n      // parse code\n      while (stream.bytesRead < endBytes) {\n        const op = _exports.parseOp(stream)\n        codeBody.code.push(op)\n      }\n\n      json.entries.push(codeBody)\n    }\n    return json\n  },\n  'data': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'data',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {}\n      entry.index = leb.unsigned.readBn(stream).toNumber()\n      entry.offset = _exports.typeParsers.initExpr(stream)\n      const segmentSize = leb.unsigned.readBn(stream).toNumber()\n      entry.data = [...stream.read(segmentSize)]\n\n      json.entries.push(entry)\n    }\n    return json\n  }\n}\n\n_exports.parseOp = (stream) => {\n  const json = {}\n  const op = stream.read(1)[0]\n  const fullName = OPCODES[op]\n  let [type, name] = fullName.split('.')\n\n  if (name === undefined) {\n    name = type\n  } else {\n    json.return_type = type\n  }\n\n  json.name = name\n\n  const immediates = OP_IMMEDIATES[name === 'const' ? type : name]\n  if (immediates) {\n    json.immediates = _exports.immediataryParsers[immediates](stream)\n  }\n  return json\n}\n\n_exports.parse = (stream, filter) => {\n  const json = []\n  const preramble = _exports.parsePreramble(stream)\n  if (!filter || filter.has('preramble')) {\n    json.push(preramble)\n  }\n\n  while (!stream.end) {\n    const header = _exports.parseSectionHeader(stream)\n    if (filter && !filter.has(header.name)) {\n      stream.read(header.size)\n      continue\n    }\n    json.push(sectionParsers[header.name](stream, header))\n  }\n  return json\n}\n","/**\n * Converts a wasm binary into a json representation\n * @param {Buffer}\n * @return {Array}\n */\nexports.wasm2json = require('./wasm2json')\n\n/**\n * Converts a json representation to a wasm binary\n * @param {Array}\n * @return {Buffer}\n */\nexports.json2wasm = require('./json2wasm')\n\n/**\n * Converts text to json. The only accepts text that is a simple list of opcode name and immediates\n * @param {String}\n * @return {Object}\n * @example\n * const codeStr = `\n * i64.const 1\n * i64.const 2\n * i64.add\n * `\n * const json = text2json(codeStr)\n */\nexports.text2json = require('./text2json')\n\n/**\n * iterates thourgh an array of sections returning a subset of sections\n * @param {Array}\n * @param {Sections}\n */\nexports.findSections = function * (array, sections) {\n  let section = array[0]\n  let index = 0\n  const wantedSections = new Set(sections)\n  let nextSection = sections.shift()\n\n  while (section) {\n    if (!wantedSections.has(section.sectionName || section.name)) {\n      section = array[++index]\n    } else {\n      if ((section.sectionName || section.name) === nextSection) {\n        yield section\n        section = array[++index]\n      } else {\n        yield\n      }\n      nextSection = sections.shift()\n    }\n  }\n}\n","const Bn = require('bn.js')\nconst Pipe = require('buffer-pipe')\n\nmodule.exports = {\n  encode,\n  decode,\n  write,\n  read,\n  readBn\n}\n\nfunction read (stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    shift += 7\n    if (byt >> 7 === 0) {\n      break\n    }\n  }\n  // sign extend if negitive\n  if (byt & 0x40) {\n    num.setn(shift)\n  }\n  return num.fromTwos(shift)\n}\n\nfunction write (number, stream) {\n  let num = new Bn(number)\n  const isNeg = num.isNeg()\n  if (isNeg) {\n    // add 8 bits for padding\n    num = num.toTwos(num.bitLength() + 8)\n  }\n  while (true) {\n    const i = num.maskn(7).toNumber()\n    num.ishrn(7)\n    if ((isNegOne(num) && (i & 0x40) !== 0) ||\n      (num.isZero() && (i & 0x40) === 0)) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n\n  function isNegOne (num) {\n    return isNeg && num.toString(2).indexOf('0') < 0\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nfunction encode (num) {\n  const stream = new Pipe()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nfunction decode (buffer) {\n  const stream = new Pipe(buffer)\n  return read(stream)\n}\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","const Bn = require('bn.js')\nconst Pipe = require('buffer-pipe')\n\nmodule.exports = {\n  encode,\n  decode,\n  read,\n  readBn,\n  write\n}\n\nfunction read (stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    if (byt >> 7 === 0) {\n      break\n    } else {\n      shift += 7\n    }\n  }\n  return num\n}\n\nfunction write (number, stream) {\n  const num = new Bn(number)\n  while (true) {\n    const i = num.maskn(7).toNumber()\n    num.ishrn(7)\n    if (num.isZero()) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nfunction encode (num) {\n  const stream = new Pipe()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nfunction decode (buffer) {\n  const stream = new Pipe(buffer)\n  return read(stream)\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","const Stream = require('buffer-pipe')\nconst Buffer = require('safe-buffer').Buffer\nconst leb = require('leb128')\nconst {findSections} = require('wasm-json-toolkit')\n\nconst FUNC_TYPE = 0x60\nconst LANGUAGE_TYPES_STRG = {\n  'i32': 0x7f,\n  'i64': 0x7e,\n  'f32': 0x7d,\n  'f64': 0x7c,\n  'anyref': 0x70,\n  'module': 0x6f,\n  'func': 0x6e,\n  'data': 0x6d,\n  'elem': 0x6c,\n  'link': 0x6b,\n  'id': 0x6a\n}\n\nconst LANGUAGE_TYPES_BIN = {\n  0x7f: 'i32',\n  0x7e: 'i64',\n  0x7d: 'f32',\n  0x7c: 'f64',\n  0x70: 'anyref',\n  0x6f: 'module',\n  0x6e: 'func',\n  0x6d: 'data',\n  0x6c: 'elem',\n  0x6b: 'link',\n  0x6a: 'id'\n}\n\nconst EXTERNAL_KIND_BIN = {\n  0x0: 'func',\n  0x1: 'table',\n  0x2: 'memory',\n  0x3: 'global'\n}\n\nconst EXTERNAL_KIND_STRG = {\n  'func': 0x0,\n  'table': 0x1,\n  'memory': 0x2,\n  'global': 0x3\n}\n\n/**\n * encodes the type annotations\n * @param {Object} annotations\n * @return {Buffer}\n */\nfunction encode (annotations) {\n  const stream = new Stream()\n  encodeCustomSection('types', annotations, stream, encodeType)\n  encodeCustomSection('typeMap', annotations, stream, encodeTypeMap)\n  encodeCustomSection('persist', annotations, stream, encodePersist)\n\n  return stream.buffer\n}\n\nfunction encodeCustomSection (name, json, stream, encodingFunc) {\n  let payload = new Stream()\n  json = json[name]\n\n  if (json) {\n    stream.write([0])\n    // encode type\n    leb.unsigned.write(name.length, payload)\n    payload.write(name)\n    encodingFunc(json, payload)\n    // write the size of the payload\n    leb.unsigned.write(payload.bytesWrote, stream)\n    stream.write(payload.buffer)\n  }\n  return stream\n}\n\n/**\n * encodes the type annoations for persist\n * @param {Object} annoations\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodePersist (annotations, stream = new Stream()) {\n  leb.unsigned.write(annotations.length, stream)\n  for (const entry of annotations) {\n    const form = EXTERNAL_KIND_STRG[entry.form]\n    leb.unsigned.write(form, stream)\n    leb.unsigned.write(entry.index, stream)\n    leb.unsigned.write(LANGUAGE_TYPES_STRG[entry.type], stream)\n  }\n  return stream.buffer\n}\n\n/**\n * decodes the persist annotations\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodePersist (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  let numOfEntries = leb.unsigned.read(stream)\n  const json = []\n  while (numOfEntries--) {\n    const form = EXTERNAL_KIND_BIN[leb.unsigned.readBn(stream).toNumber()]\n    if (!form) {\n      throw new Error('invalid form')\n    }\n    const index = leb.unsigned.readBn(stream).toNumber()\n    const type = LANGUAGE_TYPES_BIN[leb.unsigned.readBn(stream).toNumber()]\n    if (!type) {\n      throw new Error('invalid param')\n    }\n    json.push({\n      form,\n      index,\n      type\n    })\n  }\n\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n\n  return json\n}\n\n/**\n * encodes a typeMap definition\n * @param {Object} definition\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodeTypeMap (definition, stream = new Stream()) {\n  leb.unsigned.write(definition.length, stream)\n  for (let entry of definition) {\n    leb.unsigned.write(entry.func, stream)\n    leb.unsigned.write(entry.type, stream)\n  }\n  return stream.buffer\n}\n\n/**\n * decodes the TypeMap section\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodeTypeMap (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  let numOfEntries = leb.unsigned.read(stream)\n  const json = []\n  while (numOfEntries--) {\n    json.push({\n      func: leb.unsigned.readBn(stream).toNumber(),\n      type: leb.unsigned.readBn(stream).toNumber()\n    })\n  }\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n  return json\n}\n\n/**\n * encodes the type annotations\n * @param {Object} definition\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodeType (annotations, stream = new Stream()) {\n  let binEntries = new Stream()\n\n  leb.unsigned.write(annotations.length, binEntries)\n  for (let entry of annotations) {\n    // a single type entry binary encoded\n    binEntries.write([FUNC_TYPE])\n\n    const len = entry.params.length // number of parameters\n    leb.unsigned.write(len, binEntries)\n    binEntries.write(entry.params.map(type => LANGUAGE_TYPES_STRG[type])) // the paramter types\n    binEntries.write([0])\n    // binEntries.write([entry.return_type ? 1 : 0]) // number of return types\n    // if (entry.return_type) {\n    //   binEntries.write([LANGUAGE_TYPES[entry.return_type]])\n    //   throw new Error('return type are not allowed')\n    // }\n  }\n\n  stream.write(binEntries.buffer)\n  return stream.buffer\n}\n\n/**\n * decodes the Type section\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodeType (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n  const json = []\n  for (let i = 0; i < numberOfEntries; i++) {\n    let type = stream.read(1)[0]\n    if (type !== FUNC_TYPE) {\n      throw new Error('invalid form')\n    }\n    const entry = {\n      form: 'func',\n      params: []\n    }\n\n    let paramCount = leb.unsigned.readBn(stream).toNumber()\n\n    // parse the entries\n    while (paramCount--) {\n      const type = stream.read(1)[0]\n      const param = LANGUAGE_TYPES_BIN[type]\n      if (!param) {\n        throw new Error('invalid param')\n      }\n      entry.params.push(param)\n    }\n    // remove the last byte\n    leb.unsigned.readBn(stream)\n    // const numOfReturns = leb.unsigned.readBn(stream).toNumber()\n    // if (numOfReturns) {\n    //   type = stream.read(1)[0]\n    //   entry.return_type = LANGUAGE_TYPES[type]\n    // }\n\n    json.push(entry)\n  }\n\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n  return json\n}\n\n/**\n * injects custom sections into a wasm binary\n * @param {Buffer} custom - the custom section(s)\n * @param {Buffer} wasm - the wasm binary\n * @return {Buffer}\n */\nfunction injectCustomSection (custom, wasm) {\n  const preramble = wasm.subarray(0, 8)\n  const body = wasm.subarray(8)\n  return Buffer.concat([\n    Buffer.from(preramble),\n    Buffer.from(custom),\n    Buffer.from(body)\n  ])\n}\n\n/**\n * encodes a json definition and injects it into a wasm binary\n * @param {Object} annotation - the type definition\n * @param {Buffer} wasm - the wasm binary to inject\n */\nfunction encodeAndInject (annotation, wasm) {\n  const buf = encode(annotation)\n  return injectCustomSection(buf, wasm)\n}\n\nfunction mergeTypeSections (json) {\n  const result = {\n    types: [],\n    indexes: {},\n    exports: {},\n    persist: []\n  }\n\n  const wantedSections = ['types', 'typeMap', 'persist', 'type', 'import', 'function', 'export']\n  const iterator = findSections(json, wantedSections)\n  const mappedFuncs = new Map()\n  const mappedTypes = new Map()\n  const {value: customType} = iterator.next()\n  if (customType) {\n    const type = decodeType(customType.payload)\n    result.types = type\n  }\n  let {value: typeMap} = iterator.next()\n  if (typeMap) {\n    decodeTypeMap(typeMap.payload).forEach(map => mappedFuncs.set(map.func, map.type))\n  }\n\n  let {value: persist} = iterator.next()\n  if (persist) {\n    result.persist = decodePersist(persist.payload)\n  }\n\n  const {value: type} = iterator.next()\n  const {value: imports = {entries: []}} = iterator.next()\n  const {value: functions = {entries: []}} = iterator.next()\n  functions.entries.forEach((typeIndex, funcIndex) => {\n    const newType = type.entries[typeIndex]\n    // validate that no function signature have no return types\n    if (newType.return_type) {\n      throw new Error('no return types allowed')\n    }\n    let customIndex = mappedFuncs.get(funcIndex)\n    if (customIndex === undefined) {\n      customIndex = mappedTypes.get(typeIndex)\n    } else {\n      const customType = result.types[customIndex]\n      if (customType.params.length !== newType.params.length) {\n        throw new Error('invalid param length')\n      }\n\n      if (!newType.params.every(param => param === 'i32')) {\n        throw new Error('invalid base param type')\n      }\n    }\n\n    if (customIndex === undefined) {\n      customIndex = result.types.push(newType) - 1\n      mappedTypes.set(typeIndex, customIndex)\n    }\n    result.indexes[funcIndex + imports.entries.length] = customIndex\n  })\n\n  const {value: exports = {entries: []}} = iterator.next()\n  exports.entries.forEach(entry => {\n    if (entry.kind === 'function') {\n      result.exports[entry.field_str] = entry.index\n    }\n  })\n  return result\n}\n\nmodule.exports = {\n  injectCustomSection,\n  encodeAndInject,\n  decodeType,\n  decodeTypeMap,\n  decodePersist,\n  encodeType,\n  encodeTypeMap,\n  encodePersist,\n  encode,\n  mergeTypeSections,\n  LANGUAGE_TYPES_BIN,\n  LANGUAGE_TYPES_STRG\n}\n","/** @module util *//***/\n\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\nimport {\n  Compiler,\n  ConversionKind,\n\n  makeSmallIntegerWrap\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId\n} from \"./module\";\n\nimport {\n  ElementKind,\n  Global,\n  Local,\n  FunctionPrototype,\n  Class,\n  ClassPrototype\n} from \"./program\";\n\n/** Compiles a get of a built-in global. */\nexport function compileGetConstant(\n  compiler: Compiler,\n  global: Global,\n  reportNode: Node\n): ExpressionRef {\n  switch (global.internalName) {\n    case \"NaN\": { // context-sensitive\n      if (compiler.currentType == Type.f32) {\n        return compiler.module.createF32(NaN);\n      } else {\n        compiler.currentType = Type.f64;\n        return compiler.module.createF64(NaN);\n      }\n    }\n    case \"Infinity\": { // context-sensitive\n      if (compiler.currentType == Type.f32) {\n        return compiler.module.createF32(Infinity);\n      } else {\n        compiler.currentType = Type.f64;\n        return compiler.module.createF64(Infinity);\n      }\n    }\n    case \"HEAP_BASE\": { // never inlined for linking purposes\n      compiler.currentType = compiler.options.usizeType;\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return compiler.module.createUnreachable();\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  var tempLocal0: Local,\n      tempLocal1: Local;\n\n  var type: Type,\n      offset: i32;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      let classType = type.classReference;\n      if (classType) {\n        let stringPrototype = compiler.program.elementsLookup.get(\"String\");\n        if (stringPrototype) {\n          assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n          let stringInstance = (<ClassPrototype>stringPrototype).resolve(null);\n          if (!stringInstance) return module.createUnreachable();\n          if (classType.isAssignableTo(stringInstance)) {\n            return module.createI32(1);\n          }\n        }\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      let classType = type.classReference;\n      return classType != null && classType.prototype.fnIndexedGet != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments && typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n\n      switch (compiler.currentType.kind) {\n        case TypeKind.F32: {\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n          ret = module.createBinary(BinaryOp.NeF32,\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createGetLocal(tempLocal0.index, NativeType.F32)\n          );\n          break;\n        }\n        case TypeKind.F64: {\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n          ret = module.createBinary(BinaryOp.NeF64,\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createGetLocal(tempLocal0.index, NativeType.F64)\n          );\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // every other type is never NaN\n          ret = module.createI32(0);\n          break;\n        }\n      }\n      compiler.currentType = Type.bool;\n      return ret;\n    }\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments && typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.F32: {\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n          ret = module.createSelect(\n            module.createBinary(BinaryOp.NeF32,\n              module.createUnary(UnaryOp.AbsF32,\n                module.createTeeLocal(tempLocal0.index, arg0)\n              ),\n              module.createF32(Infinity)\n            ),\n            module.createI32(0),\n            module.createBinary(BinaryOp.EqF32,\n              module.createGetLocal(tempLocal0.index, NativeType.F32),\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\n            )\n          );\n          break;\n        }\n        case TypeKind.F64: {\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n          ret = module.createSelect(\n            module.createBinary(BinaryOp.NeF64,\n              module.createUnary(UnaryOp.AbsF64,\n                module.createTeeLocal(tempLocal0.index, arg0)\n              ),\n              module.createF64(Infinity)\n            ),\n            module.createI32(0),\n            module.createBinary(BinaryOp.EqF64,\n              module.createGetLocal(tempLocal0.index, NativeType.F64),\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\n            )\n          );\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // every other type is always finite\n          ret = module.createI32(1);\n          break;\n        }\n      }\n      compiler.currentType = Type.bool;\n      return ret;\n    }\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = makeSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType,\n            module\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = makeSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType,\n            module\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n          // doesn't need sign-extension here because ifFalse below is either positive\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\n        case TypeKind.I32: {\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32\n            );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\n          : ConversionKind.IMPLICIT\n      );\n      if (\n        compiler.currentType.is(TypeFlags.INTEGER) &&\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        typeArguments[0].size > compiler.currentType.size\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        ret = compiler.options.isWasm64\n          ? module.createI64(typeArguments[0].byteSize, 0)\n          : module.createI32(typeArguments[0].byteSize);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", \"0\"\n        );\n        return module.createUnreachable();\n      }\n      return ret;\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], type = compiler.currentType);\n      arg2 = compiler.compileExpression(operands[2], Type.bool);\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        default: { // any value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.kind != TypeKind.USIZE) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\n      }\n\n      type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal0.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal0.index, NativeType.I32)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal0.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal0.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal0.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal0.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal0.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            tempLocal0 = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal0.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal0.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64);\n    if (\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\n      _BinaryenConstGetValueI64High(expr) != 0 ||\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32);\n    if (\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\n      (value = _BinaryenConstGetValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__41__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","var globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nvar HEAP = new Uint8Array(0);\nvar HEAP_OFFSET = 0;\n\nglobalScope[\"allocate_memory\"] = function allocate_memory(size) {\n  if (!(size >>>= 0))\n    return 0;\n  if (HEAP_OFFSET + size > HEAP.length) {\n    var oldHeap = HEAP;\n    HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n    HEAP.set(oldHeap);\n  }\n  var ptr = HEAP_OFFSET;\n  if ((HEAP_OFFSET += size) & 7)\n    HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n  return ptr;\n};\n\nglobalScope[\"free_memory\"] = function free_memory(ptr) {\n  // TODO\n};\n\nglobalScope[\"move_memory\"] = function move_memory(dest, src, n) {\n  HEAP.copyWithin(dest, src, src + n);\n};\n\nglobalScope[\"store\"] = function store(ptr, val, off) {\n  if (typeof off === \"number\")\n    ptr += off;\n  HEAP[ptr] = val;\n};\n\nglobalScope[\"load\"] = function load(ptr) {\n  if (typeof off === \"number\")\n    ptr += off;\n  return HEAP[ptr];\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nrequire(\"./portable/memory\");\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable\";\nimport \"./binaryen\";\nimport \"./i64\";\nimport \"./float\";\n"],"sourceRoot":""}