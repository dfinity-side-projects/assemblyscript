{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./node_modules/safe-buffer/index.js","webpack://assemblyscript/./node_modules/leb128/index.js","webpack://assemblyscript/./node_modules/buffer-pipe/index.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./node_modules/leb128/node_modules/buffer-pipe/index.js","webpack://assemblyscript/./node_modules/bn.js/lib/bn.js","webpack://assemblyscript/./node_modules/buffer/index.js","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/text2json.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/json2wasm.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/wasm2json.js","webpack://assemblyscript/./node_modules/wasm-json-toolkit/index.js","webpack://assemblyscript/./node_modules/leb128/signed.js","webpack://assemblyscript/(webpack)/buildin/module.js","webpack://assemblyscript/./node_modules/leb128/unsigned.js","webpack://assemblyscript/./node_modules/isarray/index.js","webpack://assemblyscript/./node_modules/ieee754/index.js","webpack://assemblyscript/./node_modules/base64-js/index.js","webpack://assemblyscript/./node_modules/primea-annotations/index.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__41__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","ElementKind","CommonFlags","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","k","length","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","derived","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","checkGlobalOptions","parentNode","is","GLOBAL","source","isLibrary","SOURCE","simpleName","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnSubtract","fnMultiply","fnDivide","fnFractional","fnBitwiseAnd","fnBitwiseOr","fnBitwiseXor","fnEquals","fnNotEquals","fnGreaterThan","fnGreaterThanEquals","fnLessThan","fnLessThanEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","indexedGetPrototype","getIndexedGet","indexedGetInstance","base","resolveElementAccess","elementAccess","elementExpression","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","SEALED","Class_0_is_sealed_and_cannot_be_extended","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","getIndexedSet","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","normalizedPath","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","primea_annotations_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","funcsCount","customTypeMap","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","customType","concat","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","customJSON","size","types","typeMap","typeIndex_1","keys","paramString","form","params","split","map","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","encodeAndInject","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","FUNCTION_TYPE","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","g","eval","e","window","Buffer","copyProps","src","dst","key","SafeBuffer","arg","encodingOrOffset","alloc","allocUnsafe","allocUnsafeSlow","TypeError","fill","encoding","buf","undefined","SlowBuffer","unsigned","[object Object]","_bytesRead","_bytesWrote","num","data","subarray","bytesRead","bytesWrote","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","nullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argumentCountRef","files","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","typeRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","entries","compileSourceByPath","normalizedPathWithoutExtension","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","COMPILED","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","customTypeDecorator","customTypes","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","ensureTrampoline","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","operatorName","compileOperatorOverload","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","operatorPrototype","operatorInstance","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","Index_signature_is_missing_in_type_0","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedSetPrototype","Index_signature_in_type_0_only_permits_reading","indexedSetInstance","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCall","compileCallDirect","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","numArgumentsInclThis","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","numOperands","isCallImport","ensureArgumentCount","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","msg","inherits","ctor","superCtor","super_","TempCtor","constructor","BN","number","endian","isBN","negative","words","red","_init","wordSize","parseHex","Math","min","parseBase","mul","isArray","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","toArray","w","off","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","dest","clone","_expand","_normSign","inspect","zeros","groupSizes","groupBases","smallMulTo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","res","q","andln","iushrn","clz32","_countBits","t","_zeroBits","bitLength","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","sub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","x","y","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","outLen","prev","mod3","one","nOne","lpow","z","inv","wnd","currentLen","mont","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","ArrayBuffer","array","byteOffset","fromArrayLike","fromArrayBuffer","string","isEncoding","actual","write","slice","fromString","obj","isBuffer","checked","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","Symbol","species","_isBuffer","compare","list","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","match","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","toHex","checkOffset","ext","checkInt","objectWriteUInt16","objectWriteUInt32","checkIEEE754","writeFloat","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","stringtrim","base64clean","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","eqz","isPositive","other","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","log2","log","LN2","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","immediates","immediataryParser","txt","json","dests","reserved","textArray","textOp","jsonOp","return_type","immediate","leb","Stream","OP_IMMEDIATES","_exports","generate","LANGUAGE_TYPES","anyFunc","block_type","EXTERNAL_KIND","function","table","memory","SECTION_IDS","custom","import","export","OPCODES","unreachable","nop","block","loop","if","else","br","br_if","br_table","return","call_indirect","drop","select","get_local","set_local","tee_local","get_global","set_global","i32.load","i64.load","f32.load","f64.load","i32.load8_s","i32.load8_u","i32.load16_s","i32.load16_u","i64.load8_s","i64.load8_u","i64.load16_s","i64.load16_u","i64.load32_s","i64.load32_u","i32.store","i64.store","f32.store","f64.store","i32.store8","i32.store16","i64.store8","i64.store16","i64.store32","current_memory","grow_memory","i32.const","i64.const","f32.const","f64.const","i32.eqz","i32.eq","i32.ne","i32.lt_s","i32.lt_u","i32.gt_s","i32.gt_u","i32.le_s","i32.le_u","i32.ge_s","i32.ge_u","i64.eqz","i64.eq","i64.ne","i64.lt_s","i64.lt_u","i64.gt_s","i64.gt_u","i64.le_s","i64.le_u","i64.ge_s","i64.ge_u","f32.eq","f32.ne","f32.lt","f32.gt","f32.le","f32.ge","f64.eq","f64.ne","f64.lt","f64.gt","f64.le","f64.ge","i32.clz","i32.ctz","i32.popcnt","i32.add","i32.sub","i32.mul","i32.div_s","i32.div_u","i32.rem_s","i32.rem_u","i32.and","i32.or","i32.xor","i32.shl","i32.shr_s","i32.shr_u","i32.rotl","i32.rotr","i64.clz","i64.ctz","i64.popcnt","i64.add","i64.sub","i64.mul","i64.div_s","i64.div_u","i64.rem_s","i64.rem_u","i64.and","i64.or","i64.xor","i64.shl","i64.shr_s","i64.shr_u","i64.rotl","i64.rotr","f32.abs","f32.neg","f32.ceil","f32.floor","f32.trunc","f32.nearest","f32.sqrt","f32.add","f32.sub","f32.mul","f32.div","f32.min","f32.max","f32.copysign","f64.abs","f64.neg","f64.ceil","f64.floor","f64.trunc","f64.nearest","f64.sqrt","f64.add","f64.sub","f64.mul","f64.div","f64.min","f64.max","f64.copysign","i32.wrap/i64","i32.trunc_s/f32","i32.trunc_u/f32","i32.trunc_s/f64","i32.trunc_u/f64","i64.extend_s/i32","i64.extend_u/i32","i64.trunc_s/f32","i64.trunc_u/f32","i64.trunc_s/f64","i64.trunc_u/f64","f32.convert_s/i32","f32.convert_u/i32","f32.convert_s/i64","f32.convert_u/i64","f32.demote/f64","f64.convert_s/i32","f64.convert_u/i32","f64.convert_s/i64","f64.convert_u/i64","f64.promote/f32","i32.reinterpret/f32","i64.reinterpret/f64","f32.reinterpret/i32","f64.reinterpret/i64","typeGenerators","stream","limits","contentType","mutability","intial","generateOp","immediataryGenerators","varuint1","varuint32","varint32","varint64","uint32","uint64","targets","defaultTarget","memory_immediate","sectionGenerators","payload","sectionName","binEntries","moduleStr","fieldStr","field_str","codeStream","count","generatePreramble","item","magic","version","filter","parse","127","126","125","124","112","96","64","0","1","2","3","parsePreramble","parseSectionHeader","readBn","4","5","11","12","13","14","15","16","17","26","27","32","33","34","35","36","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","113","114","115","116","117","118","119","120","121","122","123","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","6","7","8","9","10","immediataryParsers","typeParsers","parseOp","sectionParsers","header","section","nameLen","numberOfEntries","paramCount","moduleLen","fieldLen","strLength","numElem","codeBody","bodySize","endBytes","localCount","segmentSize","fullName","preramble","wasm2json","json2wasm","text2json","findSections","sections","wantedSections","nextSection","Bn","Pipe","byt","isNegOne","encode","decode","webpackPolyfill","deprecate","paths","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","b64","placeHoldersCount","placeHolders","Arr","L","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","FUNC_TYPE","LANGUAGE_TYPES_STRG","anyref","link","LANGUAGE_TYPES_BIN","EXTERNAL_KIND_BIN","EXTERNAL_KIND_STRG","annotations","encodeCustomSection","encodeType","encodeTypeMap","encodePersist","encodingFunc","decodePersist","numOfEntries","definition","decodeTypeMap","decodeType","injectCustomSection","annotation","mergeTypeSections","persist","iterator","mappedFuncs","mappedTypes","forEach","imports","functions","typeIndex","funcIndex","newType","customIndex","every","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","evaluateConstantOffset","Type_0_is_not_generic","tempLocal0","tempLocal1","alignLog2","fieldName","Type_0_has_no_property_1","abort","compileAbort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","_malloc","_free","move_memory","_memmove","HEAPU8","previousPrint","print","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","trunc","isTrueish","fromCodePoint","isInteger"],"mappings":"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AA,GACAC,WAAA,GACAC,cAAA,GACAC,cAAA,GACAC,eAAA,GACAC,eAAA,GACAC,cAAA,GACAC,cAAA,GACAC,eAAA,GACAC,eAAA,GACAC,eAAA,GACAC,eAAA,GACAC,YAAA,GACAC,YAAA,GACAC,YAAA,GACAC,YAAA,GACAC,aAAA,GACAC,cAAA,GACAC,aAAA,GACAC,cAAA,GACAC,cAAA,GACAC,eAAA,GACAC,YAAA,GACAC,YAAA,GACAC,YAAA,GACAC,YAAA,GACAC,YAAA,GACAC,UAAA,GACAC,SAAA,GACAC,SAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,UAAA,GACAC,SAAA,GACAC,SAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,WAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,GACAC,SAAA,IACAC,SAAA,IACAC,SAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,YAAA,IACAC,YAAA,IACAC,YAAA,IACAC,YAAA,IACAC,UAAA,IACAC,SAAA,IACAC,UAAA,IACAC,UAAA,IACAC,YAAA,IACAC,YAAA,IACAC,WAAA,IACAC,WAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,YAAA,IACAC,YAAA,IACAC,YAAA,IACAC,YAAA,IACAC,UAAA,IACAC,SAAA,IACAC,UAAA,IACAC,UAAA,IACAC,YAAA,IACAC,YAAA,IACAC,WAAA,IACAC,WAAA,IACAC,UAAA,IACAC,UAAA,IACAC,WAAA,IACAC,YAAA,IACAC,YAAA,IACAC,cAAA,IACAC,WAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAAA,IACAC,UAA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M,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__41__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 47);\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  Signature,\n\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  // ParameterNode,\n  // ParameterKind,\n  // SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ParameterKind,\n  SignatureNode,\n  VariableDeclaration\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n} from \"./module\";\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  isReExport: bool;\n  referencedName: string;\n  member: ExportMember;\n}\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  internalName: string;\n  referencedName: string;\n  referencedNameAlt: string;\n  declaration: ImportDeclaration;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n\n  /** Target expression of the previously resolved property or element access. */\n  resolvedThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  resolvedElementExpression : Expression | null = null;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedImports = new Array<QueuedImport>();\n    var queuedDerivedClasses = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\n      if (element) {\n        this.elementsLookup.set(queuedImport.internalName, element);\n        queuedImports.splice(i, 1);\n      } else {\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\n          this.elementsLookup.set(queuedImport.internalName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            queuedImport.declaration.range,\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\n            queuedImport.declaration.externalName.text\n          );\n          ++i;\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.referencedName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let derived = this.resolveIdentifier(derivedType.name, null); // reports\n      if (!derived) continue;\n      if (derived.kind == ElementKind.CLASS_PROTOTYPE) {\n        queuedDerivedClasses[i].basePrototype = <ClassPrototype>derived;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\n        if (element) this.elementsLookup.set(alias, element);\n      }\n    }\n\n    // register array\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register string\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    referencedName: string,\n    queuedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(referencedName)) return element;\n      let queuedExport = queuedExports.get(referencedName);\n      if (!queuedExport) return null;\n      if (queuedExport.isReExport) {\n        referencedName = queuedExport.referencedName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.referencedName);\n    } while (true);\n  }\n\n  /** Processes global options, if present. */\n  private checkGlobalOptions(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      element.is(CommonFlags.GLOBAL) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let simpleName = declaration.name.text;\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        element.set(CommonFlags.GLOBAL);\n        this.elementsLookup.set(simpleName, element);\n        if (element.is(CommonFlags.BUILTIN)) {\n          element.internalName = simpleName;\n        }\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedDerivedClasses: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration\n    );\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.is(CommonFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Structs_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) {\n      queuedDerivedClasses.push(prototype);\n    }\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\n        if (prototype.is(CommonFlags.EXPORT)) {\n          prototype.set(CommonFlags.MODULE_EXPORT);\n        }\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration\n      );\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperators(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    // handle operator annotations. operators are either instance methods taking\n    // a second argument of the instance's type or static methods taking two\n    // arguments of the instance's type. return values vary depending on the\n    // operation.\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              decorator.range\n            );\n            continue;\n          }\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\n          if (numArgs == 1) {\n            let firstArg = (<Expression[]>decorator.arguments)[0];\n            if (\n              firstArg.kind == NodeKind.LITERAL &&\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n            ) {\n              switch ((<StringLiteralExpression>firstArg).value) {\n                case \"[]\": {\n                  classPrototype.fnIndexedGet = prototype.simpleName;\n                  break;\n                }\n                case \"[]=\": {\n                  classPrototype.fnIndexedSet = prototype.simpleName;\n                  break;\n                }\n                case \"+\": {\n                  classPrototype.fnConcat = prototype.simpleName;\n                  break;\n                }\n                case \"-\": {\n                  classPrototype.fnSubtract = prototype.simpleName;\n                  break;\n                }\n                case \"*\": {\n                  classPrototype.fnMultiply = prototype.simpleName;\n                  break;\n                }\n                case \"/\": {\n                  classPrototype.fnDivide = prototype.simpleName;\n                  break;\n                }\n                case \"%\": {\n                  classPrototype.fnFractional = prototype.simpleName;\n                  break;\n                }\n                case \"&\": {\n                  classPrototype.fnBitwiseAnd = prototype.simpleName;\n                  break;\n                }\n                case \"|\": {\n                  classPrototype.fnBitwiseOr = prototype.simpleName;\n                  break;\n                }\n                case \"^\": {\n                  classPrototype.fnBitwiseXor = prototype.simpleName;\n                  break;\n                }\n                case \"==\": {\n                  classPrototype.fnEquals = prototype.simpleName;\n                  break;\n                }\n                case \"!=\": {\n                  classPrototype.fnNotEquals = prototype.simpleName;\n                  break;\n                }\n                case \">\": {\n                  classPrototype.fnGreaterThan = prototype.simpleName;\n                  break;\n                }\n                case \">=\": {\n                  classPrototype.fnGreaterThanEquals = prototype.simpleName;\n                  break;\n                }\n                case \"<\": {\n                  classPrototype.fnLessThan = prototype.simpleName;\n                  break;\n                }\n                case \"<=\": {\n                  classPrototype.fnLessThanEquals = prototype.simpleName;\n                  break;\n                }\n                default: {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                }\n              }\n            } else {\n              this.error(\n                DiagnosticCode.String_literal_expected,\n                firstArg.range\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"1\", numArgs.toString(0)\n            );\n          }\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\n          // methods support built-in @operator only\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            decorator.range\n          );\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.namespace = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobalOptions(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (isModuleExport) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    name: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    this.fileLevelExports.set(name, element);\n    if (identifier.range.source.isLibrary) { // add global alias\n      if (this.elementsLookup.has(identifier.text)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, identifier.text\n        );\n      } else {\n        element.internalName = identifier.text;\n        this.elementsLookup.set(identifier.text, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.referencedName = referencedName; // -> internal name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.referencedName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.referencedName = referencedName; // -> export name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null\n    );\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) {\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        statement.namespaceName.text\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n      this.error( // TODO\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(referencedName)) {\n      this.elementsLookup.set(internalName, element);\n      return;\n    }\n\n    // otherwise queue it\n    var indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.internalName = internalName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration;\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtendingClasses: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.namespace = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobalOptions(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, namespace);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration\n      );\n      global.namespace = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(internalName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(internalName, global);\n        }\n      }\n      this.checkGlobalOptions(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameterTypes;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return Type.u32.asFunction(signature);\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n\n    // check file-global / program-global element\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          return instance ? instance.type : null;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    contextualFunction: Function | null,\n    contextualEnum: Enum | null = null\n  ): Element | null {\n    var name = identifier.text;\n\n    var element: Element | null;\n    var namespace: Element | null;\n\n    // check siblings\n    if (contextualEnum) {\n\n      if (\n        contextualEnum.members &&\n        (element = contextualEnum.members.get(name)) &&\n        element.kind == ElementKind.ENUMVALUE\n      ) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // ENUMVALUE\n      }\n\n    } else if (contextualFunction) {\n\n      // check locals\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // LOCAL\n      }\n\n      // check outer scope locals\n      // let outerScope = contextualFunction.outerScope;\n      // while (outerScope) {\n      //   if (element = outerScope.getScopedLocal(name)) {\n      //     let scopedLocal = <Local>element;\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\n      //     return resolvedElement.set(scopedGlobal);\n      //   }\n      //   outerScope = outerScope.currentFunction.outerScope;\n      // }\n\n      // search contextual parent namespaces if applicable\n      if (namespace = contextualFunction.prototype.namespace) {\n        do {\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element; // LOCAL\n          }\n        } while (namespace = namespace.namespace);\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\n          if (indexedGetPrototype) {\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n            if (!indexedGetInstance) return null;\n            let classReference = indexedGetInstance.signature.returnType.classReference;\n            if (!classReference) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n              return null;\n            }\n            target = classReference;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        let member: Element | null;\n        if (members && (member = members.get(propertyName))) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = null;\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        assert(!this.resolvedThisExpression && !this.resolvedElementExpression);\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGetPrototype = (<Class>target).getIndexedGet();\n        if (indexedGetPrototype) {\n          let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n          if (!indexedGetInstance) return null;\n          let returnType = indexedGetInstance.signature.returnType;\n          if (target = returnType.classReference) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      targetExpression.range\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        let parent = contextualFunction.memberOf;\n        if (parent) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        let parent = contextualFunction.memberOf;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.resolvedThisExpression = expression;\n            this.resolvedElementExpression = null;\n            return this.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            targetExpression.range, target.internalName\n          );\n          return null;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE\n}\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Internal decorators\n\n  /** Is global. */\n  GLOBAL = 1 << 13,\n  /** Is built-in. */\n  BUILTIN = 1 << 14,\n  /** Is unmanaged. */\n  UNMANAGED = 1 << 15,\n  /** Is sealed. */\n  SEALED = 1 << 16,\n\n  // Extended modifiers usually derived from basic modifiers or internal decorators\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 17,\n  /** Is generic. */\n  GENERIC = 1 << 18,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 19,\n  /** Is an instance member. */\n  INSTANCE = 1 << 20,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 21,\n  /** Is an arrow function. */\n  ARROW = 1 << 22,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 23,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 24,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 25,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 26,\n  /** Is scoped. */\n  SCOPED = 1 << 27,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 28\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent namespace, if applicable. */\n  namespace: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** A namespace. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Parent enum. */\n  enum: Enum;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.enum = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(lo: i32, hi: i32): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = i64_new(lo, hi);\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameterTypes;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(this.classPrototype);\n    if (classTypeArguments && classTypeArguments.length) {\n      let partialPrototype = new FunctionPrototype(\n        this.program,\n        this.simpleName,\n        this.internalName,\n        this.declaration,\n        this.classPrototype\n      );\n      partialPrototype.flags = this.flags;\n      partialPrototype.classTypeArguments = classTypeArguments;\n      return partialPrototype;\n    }\n    return this; // no need to clone\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\n  memberOf: Element | null;\n  /** Map of locals by name. */\n  locals: Map<string,Local> = new Map();\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] | null = null;\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    memberOf: Element | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.memberOf = memberOf;\n    this.flags = prototype.flags;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        this.locals.set(\n          \"this\",\n          new Local(\n            prototype.program,\n            \"this\",\n            localIndex++,\n            assert(signature.thisType)\n          )\n        );\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\n        if (contextualTypeArguments) {\n          if (!this.contextualTypeArguments) {\n            this.contextualTypeArguments = new Map();\n          }\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        this.locals.set(\n          parameterName,\n          new Local(\n            prototype.program,\n            parameterName,\n            localIndex++,\n            parameterType\n            // FIXME: declaration?\n          )\n        );\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\n      this.locals.set(name, local);\n    }\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    if (temps && temps.length) {\n      let ret = temps.pop();\n      ret.type = type;\n      return ret;\n    }\n    return this.addLocal(type);\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    if (temps.length > 0) {\n      return temps[temps.length - 1];\n    }\n    var local: Local = this.addLocal(type);\n    temps.push(local);\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) {\n      this.breakStack = [ id ];\n    } else {\n      this.breakStack.push(id);\n    }\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      if (debugLocations) {\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\n          let debugLocation = debugLocations[i];\n          module.setDebugLocation(\n            ref,\n            debugLocation.debugInfoRef,\n            debugLocation.source.debugInfoIndex,\n            debugLocation.line,\n            debugLocation.column\n          );\n        }\n      }\n    }\n    this.debugLocations = null;\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n\n  /** Overloaded indexed get method, if any. */\n  fnIndexedGet: string | null = null;\n  /** Overloaded indexed set method, if any. */\n  fnIndexedSet: string | null = null;\n  /** Overloaded concatenation method, if any. */\n  fnConcat: string | null = null;\n  /** Overloaded subtraction method, if any. */\n  fnSubtract: string | null = null;\n  /** Overloaded multiply method, if any. */\n  fnMultiply: string | null = null;\n  /** Overloaded divide method, if any. */\n  fnDivide: string | null = null;\n  /** Overloaded fractional method, if any. */\n  fnFractional: string | null = null;\n  /** Overloaded bitwise and method, if any. */\n  fnBitwiseAnd: string | null = null;\n  /** Overloaded bitwise or method, if any. */\n  fnBitwiseOr: string | null = null;\n  /** Overloaded bitwise xor method, if any. */\n  fnBitwiseXor: string | null = null;\n  /** Overloaded equality comparison method, if any. */\n  fnEquals: string | null = null;\n  /** Overloaded non-equality comparison method, if any. */\n  fnNotEquals: string | null = null;\n  /** Overloaded greater comparison method, if any. */\n  fnGreaterThan: string | null = null;\n  /** Overloaded greater or equal comparison method, if any. */\n  fnGreaterThanEquals: string | null = null;\n  /** Overloaded less comparison method, if any. */\n  fnLessThan: string | null = null;\n  /** Overloaded less or equal comparison method, if any. */\n  fnLessThanEquals: string | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.is(CommonFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var simpleName = this.simpleName;\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) {\n        instance.constructorInstance = partialConstructor.resolve(); // reports\n      }\n      // TODO: ^ doesn't know the return type, hence returns null\n    }\n\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (fieldType) {\n              let fieldInstance = new Field(\n                <FieldPrototype>member,\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n                fieldType,\n                fieldDeclaration\n              );\n              switch (fieldType.byteSize) { // align\n                case 1: break;\n                case 2: {\n                  if (memoryOffset & 1) ++memoryOffset;\n                  break;\n                }\n                case 4: {\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                  break;\n                }\n                case 8: {\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                  break;\n                }\n                default: assert(false);\n              }\n              fieldInstance.memoryOffset = memoryOffset;\n              memoryOffset += fieldType.byteSize;\n              instance.members.set(member.simpleName, fieldInstance);\n            }\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\n            if (!instance.members) instance.members = new Map();\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (methodPrototype) {\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\n              instance.members.set(member.simpleName, methodPrototype);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      if (base.contextualTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) {\n        return true;\n      }\n    } while (current = current.base);\n    return false;\n  }\n\n  getIndexedGet(): FunctionPrototype | null {\n    var members = this.members;\n    var name = this.prototype.fnIndexedGet;\n    if (!members || name == null) return null;\n    var element = members.get(name);\n    if (!element || element.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return <FunctionPrototype>element;\n  }\n\n  getIndexedSet(): FunctionPrototype | null {\n    var members = this.members;\n    var name = this.prototype.fnIndexedSet;\n    if (!members || name == null) return null;\n    var element = members.get(name);\n    if (!element || element.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return <FunctionPrototype>element;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration\n  ) {\n    super(program, simpleName, internalName, declaration);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always throws. */\n  THROWS = 1 << 1,\n  /** This branch always breaks. */\n  BREAKS = 1 << 2,\n  /** This branch always continues. */\n  CONTINUES = 1 << 3,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 4,\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 5,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 6,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 7,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 8,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 9\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Scoped global variables. */\n  // scopedGlobals: Map<Local,Global> | null = null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Enters a new branch or scope and returns the new flow. */\n  enterBranchOrScope(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    return branch;\n  }\n\n  /** Leaves the current branch or scope and returns the parent flow. */\n  leaveBranchOrScope(): Flow {\n    var parent = assert(this.parent);\n\n    // Free block-scoped locals\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        this.currentFunction.freeTempLocal(scopedLocal);\n      }\n      this.scopedLocals = null;\n    }\n\n    // Propagate flags to parent\n    if (this.is(FlowFlags.RETURNS)) {\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (this.is(FlowFlags.THROWS)) {\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (this.is(FlowFlags.ALLOCATES)) {\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, declaration: VariableDeclaration): void {\n    var scopedLocal = this.currentFunction.getTempLocal(type);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else if (this.scopedLocals.has(name)) {\n      this.currentFunction.program.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range\n      );\n      return;\n    }\n    this.scopedLocals.set(name, scopedLocal);\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.locals.get(name);\n  }\n\n  /** Adds a scoped global for an outer scoped local. */\n  // addScopedGlobal(scopedLocal: Local): Global {\n  //   var scopedGlobals = this.scopedGlobals;\n  //   var scopedGlobal: Global | null;\n  //   if (!scopedGlobals) {\n  //     this.scopedGlobals = scopedGlobals = new Map();\n  //   } else {\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\n  //     if (scopedGlobal) return scopedGlobal;\n  //   }\n  //   scopedGlobal = new Global(\n  //     scopedLocal.program,\n  //     scopedLocal.simpleName,\n  //     this.currentFunction.internalName + \"~\" + scopedLocal.internalName,\n  //     scopedLocal.type,\n  //     assert(scopedLocal.declaration)\n  //   );\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\n  //   return scopedGlobal;\n  // }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null, \"must be the topmost parent flow\");\n    this.continueLabel = null;\n    this.breakLabel = null;\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\n    start--;\n  }\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\n    end++;\n  }\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nimport {\n  encodeAndInject\n} from \"primea-annotations\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64()\n\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n  out: usize;\n  funcsCount: i32 = 0;\n  customTypeMap: Map<string, i32[]> = new Map();\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.out = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocI32Array(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocI32Array(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef,\n    customType: string | null = null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    if (customType) {\n      this.customTypeMap.set(customType, (this.customTypeMap.get(customType) || []).concat([this.funcsCount]));\n    }\n    this.funcsCount++;\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocI32Array(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    // Primea custom section - func types, etc\n    let customJSON: {\n      types?: Array<any>;\n      typeMap?: Array<any>;\n    } = {};\n\n    if (this.customTypeMap.size > 0) {\n      customJSON.types = [];\n      customJSON.typeMap = [];\n      let typeIndex: i32 = 0;\n\n      for (let paramString of this.customTypeMap.keys()) {\n        customJSON.types.push({\n          form: \"func\",\n          params: paramString.split(',')\n        });\n        let funcs = this.customTypeMap.get(paramString) || [];\n        customJSON.typeMap = customJSON.typeMap.concat(\n          funcs.map((func: i32) => ({\n            func,\n            type: typeIndex\n          }))\n        );\n        typeIndex++;\n      }\n    }\n\n    var out = this.out;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = encodeAndInject(customJSON, readBuffer(binaryPtr, binaryBytes));\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    if (!this.ref) return; // sic\n    _BinaryenModuleDispose(this.ref);\n    free_memory(this.out);\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenLoadIsAtomic(expr)\n          ? _BinaryenAtomicLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadGetOffset(expr),\n              _BinaryenExpressionGetType(expr),\n              nested1\n            )\n          : _BinaryenLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\n              _BinaryenLoadGetOffset(expr),\n               _BinaryenLoadGetAlign(expr),\n               _BinaryenExpressionGetType(expr),\n               nested1\n            );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n      return relooper;\n  }\n\n  static createStub(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = 0;\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameterTypes = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    expression: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = expression; expression.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    if (expression.kind == NodeKind.IDENTIFIER) {\n      switch ((<IdentifierExpression>expression).text) {\n        case \"global\": {\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\n          break;\n        }\n        case \"operator\": {\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\n          break;\n        }\n        case \"unmanaged\": {\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\n          break;\n        }\n        case \"offset\": {\n          stmt.decoratorKind = DecoratorKind.OFFSET;\n          break;\n        }\n        case \"type\": {\n          stmt.decoratorKind = DecoratorKind.FUNCTION_TYPE;\n          break;\n        }\n        default: {\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\n          break;\n        }\n      }\n    } else {\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\n    }\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[],\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameterTypes: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  UNMANAGED,\n  OFFSET,\n  FUNCTION_TYPE\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    this.internalPath = mangleInternalPath(this.normalizedPath);\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members. */\n  members: ExportMember[];\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Gets the first decorator by name within at set of decorators, if present. */\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let expression = decorator.name;\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\n        return decorator;\n      }\n    }\n  }\n  return null;\n}\n\n/** Tests if a specific decorator is present within the specified decorators. */\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\n  return getFirstDecorator(name, decorators) != null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","exports.unsigned = require('./unsigned.js')\nexports.signed = require('./signed.js')\n","const Buffer = require('safe-buffer').Buffer\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor (buf = Buffer.from([])) {\n    this.buffer = buf\n    this._bytesRead = 0\n    this._bytesWrote = 0\n  }\n\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n  read (num) {\n    this._bytesRead += num\n    const data = this.buffer.subarray(0, num)\n    this.buffer = this.buffer.subarray(num)\n    return data\n  }\n\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n  write (buf) {\n    buf = Buffer.from(buf)\n    this._bytesWrote += buf.length\n    this.buffer = Buffer.concat([this.buffer, buf])\n  }\n\n  /**\n   * Whether or not there is more data to read from the buffer\n   * returns {Boolean}\n   */\n  get end () {\n    return !this.buffer.length\n  }\n\n  /**\n   * returns the number of bytes read from the stream\n   * @return {Integer}\n   */\n  get bytesRead () {\n    return this._bytesRead\n  }\n\n  /**\n   * returns the number of bytes wrote to the stream\n   * @return {Integer}\n   */\n  get bytesWrote () {\n    return this._bytesWrote\n  }\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport function tokenFomKeyword(text: string): Token {\n  switch (text) {\n    case \"abstract\": return Token.ABSTRACT;\n    case \"as\": return Token.AS;\n    case \"async\": return Token.ASYNC;\n    case \"await\": return Token.AWAIT;\n    case \"break\": return Token.BREAK;\n    case \"case\": return Token.CASE;\n    case \"catch\": return Token.CATCH;\n    case \"class\": return Token.CLASS;\n    case \"continue\": return Token.CONTINUE;\n    case \"const\": return Token.CONST;\n    case \"constructor\": return Token.CONSTRUCTOR;\n    case \"debugger\": return Token.DEBUGGER;\n    case \"declare\": return Token.DECLARE;\n    case \"default\": return Token.DEFAULT;\n    case \"delete\": return Token.DELETE;\n    case \"do\": return Token.DO;\n    case \"else\": return Token.ELSE;\n    case \"enum\": return Token.ENUM;\n    case \"export\": return Token.EXPORT;\n    case \"extends\": return Token.EXTENDS;\n    case \"false\": return Token.FALSE;\n    case \"finally\": return Token.FINALLY;\n    case \"for\": return Token.FOR;\n    case \"from\": return Token.FROM;\n    case \"function\": return Token.FUNCTION;\n    case \"get\": return Token.GET;\n    case \"if\": return Token.IF;\n    case \"implements\": return Token.IMPLEMENTS;\n    case \"import\": return Token.IMPORT;\n    case \"in\": return Token.IN;\n    case \"instanceof\": return Token.INSTANCEOF;\n    case \"interface\": return Token.INTERFACE;\n    case \"is\": return Token.IS;\n    case \"keyof\": return Token.KEYOF;\n    case \"let\": return Token.LET;\n    case \"module\": return Token.MODULE;\n    case \"namespace\": return Token.NAMESPACE;\n    case \"new\": return Token.NEW;\n    case \"null\": return Token.NULL;\n    case \"of\": return Token.OF;\n    case \"package\": return Token.PACKAGE;\n    case \"private\": return Token.PRIVATE;\n    case \"protected\": return Token.PROTECTED;\n    case \"public\": return Token.PUBLIC;\n    case \"readonly\": return Token.READONLY;\n    case \"return\": return Token.RETURN;\n    case \"set\": return Token.SET;\n    case \"static\": return Token.STATIC;\n    case \"super\": return Token.SUPER;\n    case \"switch\": return Token.SWITCH;\n    case \"this\": return Token.THIS;\n    case \"throw\": return Token.THROW;\n    case \"true\": return Token.TRUE;\n    case \"try\": return Token.TRY;\n    case \"type\": return Token.TYPE;\n    case \"typeof\": return Token.TYPEOF;\n    case \"var\": return Token.VAR;\n    case \"void\": return Token.VOID;\n    case \"while\": return Token.WHILE;\n    case \"with\": return Token.WITH;\n    case \"yield\": return Token.YIELD;\n    default: return Token.INVALID;\n  }\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(preferIdentifier: bool = false): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(preferIdentifier);\n  }\n\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFomKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    preferIdentifier: bool = false,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skip(token: Token): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n    reusableState = state;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if (c < CharCode._0 || c > CharCode._9) break;\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a sized integer type with a target specific bit size. */\n  SIZE = 1 << 4,\n  /** Is a small type that is emulated in a larger type. */\n  SMALL = 1 << 5,\n  /** Is a long type larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. Ceiled to 8-bits. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying function reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective nullable type, if non-nullable. */\n  nullableType: Type | null = null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    return ~0 >>> (targetType.size - this.size);\n  }\n\n  /** Tests if this type has the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.nullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.nullableType.classReference = this.classReference;       // either a class reference\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.nullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (currentClass = this.classReference) {\n          if (targetClass = target.classReference) {\n            return currentClass.isAssignableTo(targetClass);\n          }\n        } else if (currentFunction = this.signatureReference) {\n          if (targetFunction = target.signatureReference) {\n            return currentFunction.isAssignableTo(targetFunction);\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) {\n      return left;\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\n      return right;\n    }\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: {\n        let functionType = this.signatureReference;\n        return kindOnly || !functionType\n          ? \"u32\"\n          : functionType.toString(true);\n      }\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: {\n        let classType = this.classReference;\n        return kindOnly || !classType\n          ? \"usize\"\n          : classType.toString();\n      }\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    ret[i] = types[i].toNativeType();\n  }\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    sb[i] = types[i].toString();\n  }\n  return sb.join(\", \");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getGenericParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\n        return false;\n      }\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) {\n      return false; // TODO\n    }\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) {\n      return false;\n    }\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\n        return false;\n      }\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    var sb = [];\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(thisType.toSignatureString());\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(this.returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) {\n          sb.push((<string[]>names)[i]);\n        } else {\n          sb.push(getGenericParameterName(i));\n        }\n        if (i >= optionalStart && i != restIndex) {\n          sb.push(\"?: \");\n        } else {\n          sb.push(\": \");\n        }\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached generic parameter names used where names are unknown.\nvar cachedGenericParameterNames: string[] | null = null;\n\n/** Gets the cached generic parameter name for the specified index. */\nexport function getGenericParameterName(index: i32): string {\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedGenericParameterNames[index - 1];\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileGetConstant as compileBuiltinGetConstant,\n  compileAllocate as compileBuiltinAllocate\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef\n} from \"./module\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  CommonFlags,\n  ConstantValueKind,\n\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  Flow\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  hasDecorator,\n  getFirstDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, does not set up a memory. */\n  noMemory: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Outer function in compilation, if compiling a function expression. */\n  outerFunction: Function | null = null;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunction: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[] = [];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = new Array();\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = new Array();\n  /** Argument count helper global. */\n  argumentCountRef: GlobalRef = 0;\n  /** Already processed file names. */\n  files: Set<string> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function wrapping top-level statements, of all files.\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var startFunctionInstance = new Function(\n      <FunctionPrototype>startFunctionPrototype,\n      startFunctionPrototype.internalName,\n      new Signature([], Type.void)\n    );\n    this.startFunction = startFunctionInstance;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing to reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) {\n        this.compileSource(sources[i]);\n      }\n    }\n\n    // compile the start function if not empty\n    var startFunctionBody = this.startFunctionBody;\n    if (startFunctionBody.length) {\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\n      let funcRef: FunctionRef;\n      module.setStart(\n        funcRef = module.addFunction(\n          startFunctionInstance.internalName,\n          typeRef,\n          typesToNativeTypes(startFunctionInstance.additionalLocals),\n          module.createBlock(null, startFunctionBody)\n        )\n      );\n      startFunctionInstance.finalize(module, funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    if (!options.noMemory) {\n      let memoryOffset = this.memoryOffset;\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n      this.memoryOffset = memoryOffset;\n      if (options.isWasm64) {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I64,\n          false,\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I32,\n          false,\n          module.createI32(i64_low(memoryOffset))\n        );\n      }\n\n      // determine initial page size\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\n      module.setMemory(\n        i64_low(pages),\n        this.options.isWasm64\n          ? Module.MAX_MEMORY_WASM64\n          : Module.MAX_MEMORY_WASM32,\n        this.memorySegments,\n        options.target,\n        \"memory\"\n      );\n    }\n\n    // import memory if requested\n    if (options.importMemory) {\n      module.addMemoryImport(\"0\", \"env\", \"memory\");\n    }\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n    }\n\n    // import table if requested\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableSize) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var sources = this.program.sources;\n\n    // try file.ts\n    var expected = normalizedPathWithoutExtension + \".ts\";\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == expected) {\n        this.compileSource(source);\n        return;\n      }\n    }\n\n    // try file/index.ts\n    expected = normalizedPathWithoutExtension + \"/index.ts\";\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == expected) {\n        this.compileSource(source);\n        return;\n      }\n    }\n\n    // try ~lib/file.ts\n    expected = LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\";\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == expected) {\n        this.compileSource(source);\n        return;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.File_0_not_found,\n      reportNode.range, normalizedPathWithoutExtension\n    );\n  }\n\n  compileSource(source: Source): void {\n    var files = this.files;\n    var normalizedPath = source.normalizedPath;\n    if (files.has(normalizedPath)) return;\n    files.add(normalizedPath);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunction = this.startFunction;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunction;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.program.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            Type.void,\n            ConversionKind.NONE\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        module.addGlobalImport(\n          global.internalName,\n          global.namespace\n            ? global.namespace.simpleName\n            : \"env\",\n          global.simpleName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(declaration.initializer, global.type);\n        }\n\n        // check if the initializer is constant\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = _BinaryenExpressionGetType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              _BinaryenConstGetValueI64Low(initExpr),\n              _BinaryenConstGetValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              assert(global.declaration).range\n            );\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(0);\n            break;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (declaration) {\n          if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\n            module.addGlobal(internalName, nativeType, false, initExpr);\n          }\n          if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\n            module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\n          }\n        } else {\n          assert(false); // must have a declaration if constant\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                valueDeclaration.range\n              );\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\n          if (member.is(CommonFlags.INLINED)) {\n            module.addGlobalExport(member.internalName, member.internalName);\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null;\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    var thisType = signature.thisType;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    for (let i = 0; i < numParameters; ++i, ++index) {\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\n    }\n    var resultType = signature.returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching but still compile as-is\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var typeRef = this.ensureFunctionType(instance.signature);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType: Type = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\n        flow.set(FlowFlags.RETURNS);\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        stmt = this.compileStatement(body);\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createGetLocal(0, nativeSizeType)\n              ], nativeSizeType);\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.memberOf);\n              assert(parent.kind == ElementKind.CLASS);\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createTeeLocal(0,\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\n                )\n              ], nativeSizeType);\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n      }\n      this.currentFunction = previousFunction;\n\n      const customTypeDecorator = getFirstDecorator(\"type\", declaration.decorators);\n      let customTypes\n      if (customTypeDecorator != null && customTypeDecorator.arguments && customTypeDecorator.arguments.length > 0) {\n        customTypes = customTypeDecorator.arguments.map((expr: IdentifierExpression) => expr.text).join(',')\n      }\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt,\n        customTypes\n      );\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n\n      // create the function import\n      let namespace = instance.prototype.namespace;\n      ref = module.addFunctionImport(\n        instance.internalName,\n        namespace\n          ? namespace.simpleName\n          : \"env\",\n        instance.simpleName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\n      module.addFunctionExport(instance.internalName, declaration.name.text);\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: {\n          assert(false);\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            member.range\n          );\n          break;\n        }\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var exports = this.program.fileLevelExports;\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = exports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        expr = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        expr = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        expr = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        expr = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        expr = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        expr = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        expr = this.compileVariableStatement(<VariableStatement>statement);\n        if (!expr) expr = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        expr = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        expr = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunction) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        expr = module.createUnreachable();\n        break;\n      }\n    }\n    if (this.options.sourceMap) {\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\n    }\n    return expr;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    for (let i = 0; i < numStatements; ++i) {\n      stmts[i] = this.compileStatement(statements[i]);\n    }\n    return stmts; // array of 0-es in noEmit-mode\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\n    // statement, but that's not what the source told us to do and left to the\n    // optimizer.\n\n    // Not actually a branch, but can contain its own scoped variables.\n    var flow = this.currentFunction.flow.enterBranchOrScope();\n    this.currentFunction.flow = flow;\n\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\n    var stmtThrows = flow.is(FlowFlags.THROWS);\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\n\n    // Switch back to the parent flow\n    flow = flow.leaveBranchOrScope();\n    this.currentFunction.flow = flow;\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n\n    // A do statement does not initiate a new branch because it is executed at\n    // least once, but has its own break and continue labels.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow;\n    var previousBreakLabel = flow.breakLabel;\n    var previousContinueLabel = flow.continueLabel;\n\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n\n    // Reset to the previous break and continue labels, if any.\n    flow.breakLabel = previousBreakLabel;\n    flow.continueLabel = previousContinueLabel;\n\n    var module = this.module;\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\n\n    this.currentFunction.leaveBreakContext();\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createBlock(null, [\n          body,\n          module.createBreak(continueLabel, condExpr)\n        ], NativeType.None))\n    ], NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var context = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + context;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + context;\n    flow.continueLabel = continueLabel;\n\n    // Compile in correct order\n    var module = this.module;\n    var initializer = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : module.createNop();\n    var condition = statement.condition\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\n      : module.createI32(1);\n    var incrementor = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\n      : module.createNop();\n    var body = this.compileStatement(statement.statement);\n\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\n    // TODO: check other always-true conditions as well, not just omitted\n\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      initializer,\n      module.createLoop(continueLabel, module.createBlock(null, [\n        module.createIf(condition, module.createBlock(null, [\n          body,\n          incrementor,\n          module.createBreak(continueLabel)\n        ], NativeType.None))\n      ], NativeType.None))\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, append a hint\n    if (alwaysReturns || alwaysThrows) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      let ret: ExpressionRef;\n      if (_BinaryenConstGetValueI32(condExpr)) {\n        ret = this.compileStatement(ifTrue);\n      } else if (ifFalse) {\n        ret = this.compileStatement(ifFalse);\n      } else {\n        ret = module.createNop();\n      }\n      return ret;\n    }\n\n    // Each arm initiates a branch\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\n    flow = flow.leaveBranchOrScope();\n    currentFunction.flow = flow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    var ifFalseReturns = false;\n    var ifFalseThrows = false;\n    var ifFalseAllocates = false;\n    if (ifFalse) {\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n    }\n\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var expression: ExpressionRef = 0;\n    if (statement.value) {\n      expression = this.compileExpression(\n        statement.value,\n        currentFunction.signature.returnType\n      );\n    }\n\n    // Remember that this flow returns\n    currentFunction.flow.set(FlowFlags.RETURNS);\n\n    return this.module.createReturn(expression);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n    var cases = statement.cases;\n    var numCases = cases.length;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.i32)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n      let body = new Array<ExpressionRef>(1 + numStatements);\n      body[0] = currentBlock;\n\n      // Each switch case initiates a new branch\n      let flow = currentFunction.flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let fallsThrough = i != numCases - 1;\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      for (let j = 0; j < numStatements; ++j) {\n        body[j + 1] = this.compileStatement(statements[j]);\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\n        alwaysReturns = false; // ignore fall-throughs\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\n        alwaysThrows = false;\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\n        alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      currentFunction.flow = flow.leaveBranchOrScope();\n\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default and always returns, propagate that\n    if (defaultIndex >= 0) {\n      let flow = currentFunction.flow;\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return this.module.createUnreachable();\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunction &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let init: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          currentFunction.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          init = this.compileExpression(declaration.initializer, type); // reports\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        init = this.compileExpression( // reports\n          declaration.initializer,\n          Type.void,\n          ConversionKind.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (init) {\n          init = this.precomputeExpressionRef(init);\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (_BinaryenExpressionGetType(init)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  _BinaryenConstGetValueI64Low(init),\n                  _BinaryenConstGetValueI64High(init)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\n                break;\n              }\n              default: {\n                assert(false);\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  declaration.range\n                );\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        if (declaration.isAny(CommonFlags.LET | CommonFlags.CONST)) { // here: not top-level\n          currentFunction.flow.addScopedLocal(type, name, declaration); // reports\n        } else {\n          currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (init) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      if (!_BinaryenConstGetValueI32(condExpr)) {\n        return module.createNop();\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\n    // TODO: evaluate if condition is always true\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr, module.createBlock(null, [\n          body,\n          module.createBreak(continueLabel)\n        ], NativeType.None))\n      )\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, propagate that and append a hint\n    if (alwaysReturns) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      case TypeKind.F64: {\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(\n          <ParenthesizedExpression>expression,\n          contextualType,\n          wrapSmallIntegers\n        );\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n        break;\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\n      this.currentType = contextualType;\n    }\n\n    if (this.options.sourceMap) {\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\n    }\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapSmallIntegers\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\n    var typeRefAdded = false;\n    if (!typeRef) {\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\n      typeRefAdded = true;\n    }\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = _BinaryenFunctionGetBody(funcRef);\n    module.removeFunction(\"__precompute\");\n    if (typeRefAdded) {\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\n      // a `null` typeRef, using an implicit type.\n    }\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) {\n      return module.createDrop(expr);\n    }\n\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\n      this.error(\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n        reportNode.range, fromType.toString(), toType.toString()\n      ); // recoverable\n    }\n\n    // TODO: make this a proper switch?\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n          if (toType.is(TypeFlags.SMALL)) {\n            expr = makeSmallIntegerWrap(expr, toType, module);\n          }\n        }\n\n      // i32 to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\n\n      // i32 or smaller to even smaller or same size int with change of sign\n      } else if (\n        toType.is(TypeFlags.SMALL) &&\n        (\n          fromType.size > toType.size ||\n          (\n            fromType.size == toType.size &&\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\n          )\n        )\n      ) {\n        expr = makeSmallIntegerWrap(expr, toType, module);\n      }\n\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var condExpr: ExpressionRef;\n    var expr: ExpressionRef;\n    var compound = false;\n    var possiblyOverflows = false;\n    var tempLocal: Local | null = null;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnLessThan;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnGreaterThan;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnLessThanEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnGreaterThanEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload if operator is \"==\"\n            if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                assert(this.currentType == Type.bool);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {// check operator overload if operator is \"!=\"\n            if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnNotEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnConcat;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnSubtract;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnMultiply;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // must be wrapped\n        );\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType == Type.f32) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType\n          );\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            left\n          );\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64\n          );\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // TODO: when can division remain unwrapped? does it overflow?\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: possiblyOverflows = true;\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnDivide;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // TODO: when can remainder remain unwrapped? does it overflow?\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnFractional;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false // ^\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // must wrap small integers\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          true // ^\n        );\n        switch (this.currentType.kind) {\n          default: {\n            // assumes signed shr on signed small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // modifies low bits of small integers if unsigned\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          true // ^\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: possiblyOverflows = true;\n          default: {\n            // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnBitwiseAnd;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnBitwiseOr;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnBitwiseXor;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false\n        );\n\n        // clone left if free of side effects\n        expr = module.cloneExpression(leftExpr, true, 0);\n\n        // if not possible, tee left to a temp. local\n        if (!expr) {\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\n        }\n\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\n\n        // simplify when cloning left without side effects was successful\n        if (expr) {\n          expr = module.createIf(\n            condExpr,  // left\n            rightExpr, //   ? right\n            expr       //   : cloned left\n          );\n        }\n\n        // otherwise make use of the temp. local\n        else {\n          expr = module.createIf(\n            condExpr,\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false\n        );\n\n        // clone left if free of side effects\n        expr = this.module.cloneExpression(leftExpr, true, 0);\n\n        // if not possible, tee left to a temp. local\n        if (!expr) {\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\n        }\n\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\n\n        // simplify when cloning left without side effects was successful\n        if (expr) {\n          expr = this.module.createIf(\n            condExpr, // left\n            expr,      //   ? cloned left\n            rightExpr      //   : right\n          );\n        }\n\n        // otherwise make use of the temp. local\n        else {\n          expr = module.createIf(\n            condExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n        break;\n      }\n    }\n    if (possiblyOverflows && wrapSmallIntegers) {\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileOperatorOverload(\n    classInstance: Class,\n    operatorName: string,\n    leftExpr: ExpressionRef,\n    rightExpr: ExpressionRef\n  ): ExpressionRef {\n    var classPrototype = classInstance.prototype;\n    var operatorPrototype = assert(assert(classPrototype.members).get(operatorName));\n    assert(operatorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var operatorInstance = (<FunctionPrototype>operatorPrototype).resolve();\n    if (!operatorInstance) return this.module.createUnreachable();\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ]);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var target = program.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var elementType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        elementType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>target).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          elementType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (program.resolvedElementExpression) { // indexed access\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\n          if (indexedGetPrototype) {\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n            if (!indexedGetInstance) return this.module.createUnreachable();\n            elementType = indexedGetInstance.signature.returnType;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.range, (<Class>target).toString()\n          );\n          return this.module.createUnreachable();\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    var valueExpr = this.compileExpression(valueExpression, elementType);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        this.currentType = tee ? (<Local>target).type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>target).is(CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.program.resolvedThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (tee) {\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.size >> 3,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.size >> 3,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.program.resolvedThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.program.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\n          if (indexedGetPrototype) {\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n            if (!indexedGetInstance) return module.createUnreachable();\n            let indexedSetPrototype = (<Class>target).getIndexedSet();\n            if (!indexedSetPrototype) {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, target.internalName\n              );\n              this.currentType = tee ? indexedGetInstance.signature.returnType : Type.void;\n              return module.createUnreachable();\n            }\n            let indexedSetInstance = indexedSetPrototype.resolve(); // reports\n            if (!indexedSetInstance) return module.createUnreachable();\n            let targetType = (<Class>target).type;\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            let elementExpr = this.compileExpression(\n              elementExpression,\n              Type.i32\n            );\n            if (tee) {\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\n              let returnType = indexedGetInstance.signature.returnType;\n              this.currentFunction.freeTempLocal(tempLocalTarget);\n              return module.createBlock(null, [\n                this.makeCallDirect(indexedSetInstance, [\n                  module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\n                  valueWithCorrectType\n                ]),\n                this.makeCallDirect(indexedGetInstance, [\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n                ])\n              ], returnType.toNativeType());\n            } else {\n              return this.makeCallDirect(indexedSetInstance, [\n                thisExpr,\n                elementExpr,\n                valueWithCorrectType\n              ]);\n            }\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins are compiled on the fly\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          let expr = compileBuiltinCall( // reports\n            this,\n            prototype,\n            prototype.resolveBuiltinTypeArguments(\n              expression.typeArguments,\n              currentFunction.contextualTypeArguments\n            ),\n            expression.arguments,\n            contextualType,\n            expression\n          );\n          if (!expr) {\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n          return expr;\n\n        // otherwise compile to a call\n        } else {\n          let instance = prototype.resolveUsingTypeArguments( // reports\n            expression.typeArguments,\n            currentFunction.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return module.createUnreachable();\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            return this.compileCallDirect(instance, expression.arguments, expression, thisExpr);\n          } else {\n            // if static, resolvedThisExpression is the ClassPrototype\n            return this.compileCallDirect(instance, expression.arguments, expression);\n          }\n        }\n      }\n\n      // indirect call: index argument with signature\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type);\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i]\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"argumentCount\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"argumentCount\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      body = module.createBlock(names[i + 1], [\n        body,\n        module.createSetLocal(operandIndex,\n          this.compileExpression(\n            assert(originalParameterDeclarations[minArguments + i].initializer),\n            type\n          )\n        )\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var typeRef = this.ensureFunctionType(trampolineSignature);\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n      if (!isCallImport) { // call the trampoline\n        instance = this.ensureTrampoline(instance);\n        if (!this.compileFunction(instance)) return module.createUnreachable();\n        let nativeReturnType = returnType.toNativeType();\n        this.currentType = returnType;\n        return module.createBlock(null, [\n          this.ensureArgumentCount(numArguments),\n          module.createCall(instance.internalName, operands, nativeReturnType)\n        ], nativeReturnType);\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return isCallImport\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i]\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      this.ensureArgumentCount(numArguments), // might still be calling a trampoline\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType());\n  }\n\n  /** Makes sure that the `argumentCount` helper global is present and returns an expression that sets it. */\n  private ensureArgumentCount(argumentCount: i32): ExpressionRef {\n    var module = this.module;\n    if (!this.argumentCountRef) {\n      this.argumentCountRef = module.addGlobal(\n        \"argumentCount\",\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return module.createSetGlobal(\"argumentCount\", module.createI32(argumentCount));\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGetPrototype = (<Class>target).getIndexedGet();\n        if (!indexedGetPrototype) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n        if (!indexedGetInstance) return this.module.createUnreachable();\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type);\n        return this.compileCallDirect(indexedGetInstance, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + \"~\" + simpleName,\n      declaration\n    );\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      currentFunction.contextualTypeArguments,\n      currentFunction.flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let currentFunction = this.currentFunction;\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.memberOf);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            let flow = currentFunction.flow;\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                makeConditionalAllocate(this, <Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let currentFunction = this.currentFunction;\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.memberOf);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.program.resolveIdentifier( // reports\n      expression,\n      this.currentFunction,\n      this.currentEnum\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return compileBuiltinGetConstant(this, <Global>target, expression);\n        }\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>target).resolve(\n          null,\n          this.currentFunction.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileStaticArray(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayType) return module.createUnreachable();\n\n    var elementSize = expressions.length;\n    var nativeType = elementType.toNativeType();\n    var values: usize;\n    var memorySize: usize;\n    switch (nativeType) {\n      case NativeType.I32: {\n        values = changetype<usize>(new Int32Array(elementSize));\n        memorySize = elementSize * 4;\n        break;\n      }\n      case NativeType.I64: {\n        values = changetype<usize>(new Array<I64>(elementSize));\n        memorySize = elementSize * 8;\n        break;\n      }\n      case NativeType.F32: {\n        values = changetype<usize>(new Float32Array(elementSize));\n        memorySize = elementSize * 4;\n        break;\n      }\n      case NativeType.F64: {\n        values = changetype<usize>(new Float64Array(elementSize));\n        memorySize = elementSize * 8;\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // precompute value expressions\n    var exprs = new Array<ExpressionRef>(elementSize);\n    var expr: BinaryenExpressionRef;\n    for (let i = 0; i < elementSize; ++i) {\n      exprs[i] = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType)\n        : elementType.toNativeZero(module);\n      if (isStatic) {\n        expr = this.precomputeExpressionRef(exprs[i]);\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\n          switch (nativeType) {\n            case NativeType.I32: {\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\n              break;\n            }\n            case NativeType.I64: {\n              changetype<I64[]>(values)[i] = i64_new(\n                _BinaryenConstGetValueI64Low(expr),\n                _BinaryenConstGetValueI64High(expr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\n              break;\n            }\n            case NativeType.F64: {\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\n              break;\n            }\n            default: {\n              assert(false); // checked above\n            }\n          }\n        } else {\n          // TODO: emit a warning if declared 'const'\n          isStatic = false;\n        }\n      }\n    }\n\n    var usizeTypeSize = this.options.usizeType.byteSize;\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\n\n    if (isStatic) {\n      let buffer = new Uint8Array(headerSize + memorySize);\n      let segment = this.addMemorySegment(buffer);\n\n      // make header\n      let offset = 0;\n      if (usizeTypeSize == 8) {\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\n      } else {\n        assert(i64_high(segment.offset) == 0);\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\n      }\n      offset += usizeTypeSize;\n      writeI32(elementSize, buffer, offset); // capacity\n      offset += 4;\n      writeI32(elementSize, buffer, offset); // length\n      offset += 4;\n      assert(offset == headerSize);\n\n      // make memory\n      switch (nativeType) {\n        case NativeType.I32: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\n          }\n          break;\n        }\n        case NativeType.I64: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\n          }\n          break;\n        }\n        case NativeType.F32: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\n          }\n          break;\n        }\n        case NativeType.F64: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\n          }\n          break;\n        }\n        default: {\n          assert(false);\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          return module.createUnreachable();\n        }\n      }\n      assert(offset == headerSize + memorySize);\n      this.currentType = arrayType.type;\n      return usizeTypeSize == 8\n        ? module.createI64(\n            i64_low(segment.offset),\n            i64_high(segment.offset)\n          )\n        : module.createI32(\n            i64_low(segment.offset)\n          );\n    } else {\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\n      // on top? any benefits?\n      throw new Error(\"not implemented\");\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\n      expression.typeArguments,\n      null,\n      expression\n    );\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n    var constructorInstance = classInstance.constructorInstance;\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = makeAllocate(this, classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      wrapSmallIntegers\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return compileBuiltinGetConstant(this, <Global>target, propertyAccess);\n        }\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        if (!this.compileEnum((<EnumValue>target).enum)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(program.resolvedThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.size >> 3,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.memberOf);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = makeIsTrueish(\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\n      this.currentType,\n      this.module\n    );\n\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      return _BinaryenConstGetValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var currentFunction = this.currentFunction;\n    var ifThenExpr: ExpressionRef;\n    var ifElseExpr: ExpressionRef;\n\n    // if part of a constructor, keep track of memory allocations\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let flow = currentFunction.flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // otherwise simplify\n    } else {\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\n    }\n\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      false // wrapped below\n    );\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\n      // shortcut if compiling the getter already failed\n      return getValue;\n    }\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n    var possiblyOverflows = false;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    var setValue: ExpressionRef;\n    var tempLocal: Local | null = null;\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      setValue = module.createBinary(op,\n        getValue,\n        nativeOne\n      );\n\n    // otherwise use a temp local for the intermediate value\n    } else {\n      tempLocal = currentFunction.getTempLocal(currentType);\n      setValue = module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      );\n    }\n\n    if (possiblyOverflows) {\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\n    }\n\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\n    // ^ sets currentType = void\n    if (contextualType == Type.void) {\n      assert(!tempLocal);\n      return setValue;\n    }\n\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType);\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    var module = this.module;\n    var currentType = this.currentType;\n\n    var possiblyOverflows = false;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\n        break;\n      }\n      case Token.MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          if (this.options.sourceMap) {\n            // compileExpression normally does this\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\n          }\n          currentType = this.currentType;\n        } else {\n          expr = this.compileExpression(\n            expression.operand,\n            contextualType == Type.void\n              ? Type.i32\n              : contextualType,\n            ConversionKind.NONE,\n            false // wrapped below\n          );\n          currentType = this.currentType;\n          switch (currentType.kind) {\n            case TypeKind.I8:\n            case TypeKind.I16:\n            case TypeKind.U8:\n            case TypeKind.U16:\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n            default: {\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n              break;\n            }\n            case TypeKind.USIZE: {\n              if (currentType.is(TypeFlags.REFERENCE)) {\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  expression.range\n                );\n                return module.createUnreachable();\n              }\n              // fall-through\n            }\n            case TypeKind.ISIZE: {\n              expr = module.createBinary(\n                this.options.isWasm64\n                  ? BinaryOp.SubI64\n                  : BinaryOp.SubI32,\n                currentType.toNativeZero(module),\n                expr\n              );\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: {\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n              break;\n            }\n            case TypeKind.F32: {\n              expr = module.createUnary(UnaryOp.NegF32, expr);\n              break;\n            }\n            case TypeKind.F64: {\n              expr = module.createUnary(UnaryOp.NegF64, expr);\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          true // must wrap small integers\n        );\n        expr = makeIsFalseish(expr, this.currentType, module);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          contextualType == Type.void\n            ? ConversionKind.NONE\n            : ConversionKind.IMPLICIT,\n          false // retains low bits of small integers\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        // it might make sense to implement typeof in a way that a generic function can detect\n        // whether its type argument is a class type or string. that could then be used, for\n        // example, to generate hash codes for sets and maps, depending on the kind of type\n        // parameter we have. ideally the comparison would not involve actual string comparison and\n        // limit available operations to hard-coded string literals.\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    if (possiblyOverflows && wrapSmallIntegers) {\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\n      expr = makeSmallIntegerWrap(expr, currentType, module);\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n}\n\n// helpers\n\n/** Adds the debug location of the specified expression at the specified range to the source map. */\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\n  var source = range.source;\n  if (source.debugInfoIndex < 0) {\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\n  }\n  range.debugInfoRef = expr;\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\n  currentFunction.debugLocations.push(range);\n}\n\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    case TypeKind.I8: {\n      return module.createBinary(BinaryOp.ShrI32,\n        module.createBinary(BinaryOp.ShlI32,\n          expr,\n          module.createI32(24)\n        ),\n        module.createI32(24)\n      );\n    }\n    case TypeKind.I16: {\n      return module.createBinary(BinaryOp.ShrI32,\n        module.createBinary(BinaryOp.ShlI32,\n          expr,\n          module.createI32(16)\n        ),\n        module.createI32(16)\n      );\n    }\n    case TypeKind.U8: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0xff)\n      );\n    }\n    case TypeKind.U16: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0xffff)\n      );\n    }\n    case TypeKind.BOOL: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0x1)\n      );\n    }\n    default: {\n      assert(false);\n      return expr;\n    }\n  }\n}\n\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    default: { // any native i32\n      return module.createUnary(UnaryOp.EqzI32, expr);\n    }\n    case TypeKind.I64:\n    case TypeKind.U64: {\n      return module.createUnary(UnaryOp.EqzI64, expr);\n    }\n    case TypeKind.USIZE: // TODO: strings?\n    case TypeKind.ISIZE: {\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n    }\n    case TypeKind.F32: {\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n    }\n    case TypeKind.F64: {\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n    }\n    case TypeKind.VOID: {\n      assert(false);\n      return module.createI32(1);\n    }\n  }\n}\n\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    default: { // any native i32\n      return expr;\n    }\n    case TypeKind.I64:\n    case TypeKind.U64: {\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n    }\n    case TypeKind.USIZE: // TODO: strings?\n    case TypeKind.ISIZE: {\n      return type.size == 64\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n        : expr;\n    }\n    case TypeKind.F32: {\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n    }\n    case TypeKind.F64: {\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n    }\n    case TypeKind.VOID: {\n      assert(false);\n      return module.createI32(0);\n    }\n  }\n}\n\n/** Makes an allocation expression for an instance of the specified class. */\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\n  var module = compiler.module;\n  var currentFunction = compiler.currentFunction;\n  var nativeSizeType = compiler.options.nativeSizeType;\n\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\n\n  // allocate the necessary memory\n  var initializers = new Array<ExpressionRef>();\n  initializers.push(\n    module.createSetLocal(tempLocal.index,\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\n    )\n  );\n\n  // apply field initializers\n  if (classInstance.members) {\n    for (let member of classInstance.members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        let field = <Field>member;\n        let fieldType = field.type;\n        let nativeFieldType = fieldType.toNativeType();\n        let fieldDeclaration = field.prototype.declaration;\n        assert(!field.isAny(CommonFlags.CONST));\n        if (fieldDeclaration.initializer) { // use initializer\n          initializers.push(module.createStore(fieldType.byteSize,\n            module.createGetLocal(tempLocal.index, nativeSizeType),\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\n            nativeFieldType,\n            field.memoryOffset\n          ));\n        } else { // initialize with zero\n          // TODO: might be unnecessary if the ctor initializes the field\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n          initializers.push(module.createStore(fieldType.byteSize,\n            module.createGetLocal(tempLocal.index, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n              : fieldType.toNativeZero(module),\n              nativeFieldType,\n            field.memoryOffset\n          ));\n        }\n      }\n    }\n  }\n\n  // return `this`\n  initializers.push(\n    module.createGetLocal(tempLocal.index, nativeSizeType)\n  );\n\n  currentFunction.freeTempLocal(tempLocal);\n  compiler.currentType = classInstance.type;\n  return module.createBlock(null, initializers, nativeSizeType);\n}\n\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\n  // requires that `this` is the first local\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  compiler.currentType = classInstance.type;\n  return module.createIf(\n    nativeSizeType == NativeType.I64\n      ? module.createBinary(\n          BinaryOp.NeI64,\n          module.createGetLocal(0, NativeType.I64),\n          module.createI64(0)\n        )\n      : module.createGetLocal(0, NativeType.I32),\n    module.createGetLocal(0, nativeSizeType),\n    module.createTeeLocal(0,\n      makeAllocate(compiler, classInstance, reportNode)\n    )\n  );\n}\n","const Buffer = require('safe-buffer').Buffer\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor (buf = Buffer.from([])) {\n    this.buffer = buf\n  }\n\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n  read (num) {\n    const data = this.buffer.subarray(0, num)\n    this.buffer = this.buffer.subarray(num)\n    return data\n  }\n\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n  write (buf) {\n    buf = Buffer.from(buf)\n    this.buffer = Buffer.concat([this.buffer, buf])\n  }\n}\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  Program,\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Log of source file names to be requested. */\n  backlog: string[] = new Array();\n  /** Log of source file names already processed. */\n  seenlog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var program = this.program;\n\n    // check if already parsed\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].internalPath == internalPath) return;\n    }\n    this.seenlog.add(internalPath);\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      let name = decorator.name;\n      if (name.kind == NodeKind.IDENTIFIER) {\n        let text = (<IdentifierExpression>name).text;\n        if (text == \"global\") {\n          flags |= CommonFlags.GLOBAL;\n          continue;\n        }\n        if (text == \"unmananged\") {\n          flags |= CommonFlags.UNMANAGED;\n          continue;\n        }\n        if (text == \"sealed\") {\n          flags |= CommonFlags.SEALED;\n          continue;\n        }\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        tn.next();\n        flags |= CommonFlags.ABSTRACT;\n        if (!tn.skip(Token.CLASS)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(tn.pos), \"class\"\n          );\n          break;\n        }\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        tn.next();\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: {\n        tn.next();\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    // 'void'\n    if (token == Token.VOID) {\n      return Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n    }\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skip(Token.IDENTIFIER)) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.IDENTIFIER)) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\n        if (!member) return null;\n        members.push(<EnumValueDeclaration>member);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"}\"\n        );\n        return null;\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    if (!tn.skip(Token.GREATERTHAN)) {\n      do {\n        let typeParameter = this.parseTypeParameter(tn);\n        if (!typeParameter) return null;\n        typeParameters.push(<TypeParameterNode>typeParameter);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \">\"\n        );\n        return null;\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n\n    if (tn.peek() != Token.CLOSEPAREN) {\n      do {\n        let param = this.parseParameter(tn, isConstructor);\n        if (!param) return null;\n        if (seenRest && !reportedRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n            seenRest.name.range\n          );\n          reportedRest = true;\n        }\n        switch (param.parameterKind) {\n          default: {\n            if (seenOptional) {\n              this.error(\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n                param.name.range\n              );\n            }\n            break;\n          }\n          case ParameterKind.OPTIONAL: {\n            seenOptional = true;\n            break;\n          }\n          case ParameterKind.REST: {\n            seenRest = param;\n            break;\n          }\n        }\n        parameters.push(param);\n      } while (tn.skip(Token.COMMA));\n    }\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (tn.skip(Token.PUBLIC)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"public\"\n        );\n      }\n      accessFlags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PROTECTED)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"protected\"\n        );\n      }\n      accessFlags |= CommonFlags.PROTECTED;\n    } else if (tn.skip(Token.PRIVATE)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"private\"\n        );\n      }\n      accessFlags |= CommonFlags.PRIVATE;\n    }\n    if (tn.skip(Token.READONLY)) {\n      if (!startRange) startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"readonly\"\n        );\n      }\n      accessFlags |= CommonFlags.READONLY;\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skip(Token.IDENTIFIER)) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        null,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n      let path: StringLiteralExpression | null = null;\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseImportDeclaration(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.TYPE: {\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(true);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(true);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.IDENTIFIER)) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(true);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var p = determinePrecedenceStart(token);\n    if (p != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, p);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(true)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        if (!tn.skip(Token.CLOSEBRACKET)) {\n          do {\n            if (tn.peek() == Token.COMMA) {\n              expr = null; // omitted\n            } else {\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\n              if (!expr) return null;\n            }\n            elementExpressions.push(expr);\n            if (tn.peek() == Token.CLOSEBRACKET) break;\n          } while (tn.skip(Token.COMMA));\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      do {\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!expr) return null;\n        args.push(expr);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        return null;\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression with type arguments\n    var typeArguments: CommonTypeNode[] | null;\n    while (\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\n      tn.skip(Token.OPENPAREN)\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) return null;\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn);\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn);\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.CLOSEBRACE     // current step should handle this\n      ) {\n        break;\n      }\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): i32 {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): i32 {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  Program,\n  Element,\n  CommonFlags,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Function,\n  Class,\n  Namespace,\n  FunctionPrototype,\n  ClassPrototype,\n  ConstantValueKind,\n  Interface\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program) {\n    this.program = program;\n  }\n\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) {\n      this.visitElement(element);\n    }\n  }\n\n  visitElement(element: Element): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) {\n          this.visitGlobal(<Global>element);\n        }\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) {\n          this.visitEnum(<Enum>element);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          if (instance.is(CommonFlags.COMPILED)) {\n            this.visitFunction(<Function>instance);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          if (instance.is(CommonFlags.COMPILED)) {\n            this.visitClass(<Class>instance);\n          }\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\n          this.visitNamespace(<Namespace>element);\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private seen: Set<Element> = new Set();\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program) {\n    super(program);\n  }\n\n  visitGlobal(element: Global): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) {\n      sb.push(\"const \");\n    }\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) {\n            sb.push(\"const \");\n          } else {\n            sb.push(\"readonly \");\n          }\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) {\n          this.visitElement(member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitNamespace(element: Namespace): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private seen: Set<Element> = new Set();\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program) {\n    super(program);\n  }\n\n  visitGlobal(element: Global): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) {\n      sb.push(\"const \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          this.seen.add(member);\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) {\n        this.visitNamespace(element);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(\"function \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    sb.push(\"): \");\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) {\n        sb.push(\"abstract \");\n      }\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      // TODO\n    }\n    members = element.members; // instance\n    if (members) {\n      // TODO\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  readString\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\n    var body = _BinaryenFunctionGetBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\n    this.push(\" \");\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = _BinaryenExpressionGetId(expr);\n    var type = _BinaryenExpressionGetType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = _BinaryenBlockGetNumChildren(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = _BinaryenBreakGetCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  _BinaryenConstGetValueI64Low(expr),\n                  _BinaryenConstGetValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (_BinaryenUnaryGetOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (_BinaryenBinaryGetOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(_BinaryenDropGetValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = _BinaryenReturnGetValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (_BinaryenHostGetOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program,\n  LIBRARY_PREFIX\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) {\n    parser = new Parser();\n    isEntry = true;\n  }\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `noMemory` option. */\nexport function setNoMemory(options: Options, noMemory: bool): void {\n  options.noMemory = noMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX };\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const immediates = require('./immediates.json')\n\nmodule.exports = (text) => {\n  const json = []\n  const textArray = text.split(/\\s|\\n/)\n  while (textArray.length) {\n    const textOp = textArray.shift()\n    const jsonOp = {}\n\n    let [type, name] = textOp.split('.')\n\n    if (name === undefined) {\n      name = type\n    } else {\n      jsonOp.return_type = type\n    }\n\n    jsonOp.name = name\n\n    const immediate = immediates[jsonOp.name === 'const' ? jsonOp.return_type : jsonOp.name]\n\n    if (immediate) {\n      jsonOp.immediates = immediataryParser(immediate, textArray)\n    }\n\n    json.push(jsonOp)\n  }\n  return json\n}\n\nfunction immediataryParser (type, txt) {\n  const json = {}\n  switch (type) {\n    case 'br_table':\n      const dests = []\n\n      while (1) {\n        let dest = txt[0]\n        if (isNaN(dest)) break\n        txt.shift()\n        dests.push(dest)\n      }\n\n      return dests\n    case 'call_indirect':\n      json.index = txt.shift()\n      json.reserved = 0\n      return json\n    case 'memory_immediate':\n      json.flags = txt.shift()\n      json.offset = txt.shift()\n      return json\n    default:\n      return txt.shift()\n  }\n}\n","const Buffer = require('safe-buffer').Buffer\nconst leb = require('leb128')\nconst Stream = require('buffer-pipe')\nconst OP_IMMEDIATES = require('./immediates.json')\n\nconst _exports = module.exports = (json) => {\n  return _exports.generate(json).buffer\n}\n\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#language-types\n// All types are distinguished by a negative varint7 values that is the first\n// byte of their encoding (representing a type constructor)\nconst LANGUAGE_TYPES = _exports.LANGUAGE_TYPES = {\n  'i32': 0x7f,\n  'i64': 0x7e,\n  'f32': 0x7d,\n  'f64': 0x7c,\n  'anyFunc': 0x70,\n  'func': 0x60,\n  'block_type': 0x40\n}\n\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#external_kind\n// A single-byte unsigned integer indicating the kind of definition being imported or defined:\nconst EXTERNAL_KIND = _exports.EXTERNAL_KIND = {\n  'function': 0,\n  'table': 1,\n  'memory': 2,\n  'global': 3\n}\n\nconst SECTION_IDS = _exports.SECTION_IDS = {\n  'custom': 0,\n  'type': 1,\n  'import': 2,\n  'function': 3,\n  'table': 4,\n  'memory': 5,\n  'global': 6,\n  'export': 7,\n  'start': 8,\n  'element': 9,\n  'code': 10,\n  'data': 11\n}\n\nconst OPCODES = _exports.OPCODES = {\n  'unreachable': 0x0,\n  'nop': 0x1,\n  'block': 0x2,\n  'loop': 0x3,\n  'if': 0x4,\n  'else': 0x5,\n  'end': 0xb,\n  'br': 0xc,\n  'br_if': 0xd,\n  'br_table': 0xe,\n  'return': 0xf,\n  'call': 0x10,\n  'call_indirect': 0x11,\n  'drop': 0x1a,\n  'select': 0x1b,\n  'get_local': 0x20,\n  'set_local': 0x21,\n  'tee_local': 0x22,\n  'get_global': 0x23,\n  'set_global': 0x24,\n  'i32.load': 0x28,\n  'i64.load': 0x29,\n  'f32.load': 0x2a,\n  'f64.load': 0x2b,\n  'i32.load8_s': 0x2c,\n  'i32.load8_u': 0x2d,\n  'i32.load16_s': 0x2e,\n  'i32.load16_u': 0x2f,\n  'i64.load8_s': 0x30,\n  'i64.load8_u': 0x31,\n  'i64.load16_s': 0x32,\n  'i64.load16_u': 0x33,\n  'i64.load32_s': 0x34,\n  'i64.load32_u': 0x35,\n  'i32.store': 0x36,\n  'i64.store': 0x37,\n  'f32.store': 0x38,\n  'f64.store': 0x39,\n  'i32.store8': 0x3a,\n  'i32.store16': 0x3b,\n  'i64.store8': 0x3c,\n  'i64.store16': 0x3d,\n  'i64.store32': 0x3e,\n  'current_memory': 0x3f,\n  'grow_memory': 0x40,\n  'i32.const': 0x41,\n  'i64.const': 0x42,\n  'f32.const': 0x43,\n  'f64.const': 0x44,\n  'i32.eqz': 0x45,\n  'i32.eq': 0x46,\n  'i32.ne': 0x47,\n  'i32.lt_s': 0x48,\n  'i32.lt_u': 0x49,\n  'i32.gt_s': 0x4a,\n  'i32.gt_u': 0x4b,\n  'i32.le_s': 0x4c,\n  'i32.le_u': 0x4d,\n  'i32.ge_s': 0x4e,\n  'i32.ge_u': 0x4f,\n  'i64.eqz': 0x50,\n  'i64.eq': 0x51,\n  'i64.ne': 0x52,\n  'i64.lt_s': 0x53,\n  'i64.lt_u': 0x54,\n  'i64.gt_s': 0x55,\n  'i64.gt_u': 0x56,\n  'i64.le_s': 0x57,\n  'i64.le_u': 0x58,\n  'i64.ge_s': 0x59,\n  'i64.ge_u': 0x5a,\n  'f32.eq': 0x5b,\n  'f32.ne': 0x5c,\n  'f32.lt': 0x5d,\n  'f32.gt': 0x5e,\n  'f32.le': 0x5f,\n  'f32.ge': 0x60,\n  'f64.eq': 0x61,\n  'f64.ne': 0x62,\n  'f64.lt': 0x63,\n  'f64.gt': 0x64,\n  'f64.le': 0x65,\n  'f64.ge': 0x66,\n  'i32.clz': 0x67,\n  'i32.ctz': 0x68,\n  'i32.popcnt': 0x69,\n  'i32.add': 0x6a,\n  'i32.sub': 0x6b,\n  'i32.mul': 0x6c,\n  'i32.div_s': 0x6d,\n  'i32.div_u': 0x6e,\n  'i32.rem_s': 0x6f,\n  'i32.rem_u': 0x70,\n  'i32.and': 0x71,\n  'i32.or': 0x72,\n  'i32.xor': 0x73,\n  'i32.shl': 0x74,\n  'i32.shr_s': 0x75,\n  'i32.shr_u': 0x76,\n  'i32.rotl': 0x77,\n  'i32.rotr': 0x78,\n  'i64.clz': 0x79,\n  'i64.ctz': 0x7a,\n  'i64.popcnt': 0x7b,\n  'i64.add': 0x7c,\n  'i64.sub': 0x7d,\n  'i64.mul': 0x7e,\n  'i64.div_s': 0x7f,\n  'i64.div_u': 0x80,\n  'i64.rem_s': 0x81,\n  'i64.rem_u': 0x82,\n  'i64.and': 0x83,\n  'i64.or': 0x84,\n  'i64.xor': 0x85,\n  'i64.shl': 0x86,\n  'i64.shr_s': 0x87,\n  'i64.shr_u': 0x88,\n  'i64.rotl': 0x89,\n  'i64.rotr': 0x8a,\n  'f32.abs': 0x8b,\n  'f32.neg': 0x8c,\n  'f32.ceil': 0x8d,\n  'f32.floor': 0x8e,\n  'f32.trunc': 0x8f,\n  'f32.nearest': 0x90,\n  'f32.sqrt': 0x91,\n  'f32.add': 0x92,\n  'f32.sub': 0x93,\n  'f32.mul': 0x94,\n  'f32.div': 0x95,\n  'f32.min': 0x96,\n  'f32.max': 0x97,\n  'f32.copysign': 0x98,\n  'f64.abs': 0x99,\n  'f64.neg': 0x9a,\n  'f64.ceil': 0x9b,\n  'f64.floor': 0x9c,\n  'f64.trunc': 0x9d,\n  'f64.nearest': 0x9e,\n  'f64.sqrt': 0x9f,\n  'f64.add': 0xa0,\n  'f64.sub': 0xa1,\n  'f64.mul': 0xa2,\n  'f64.div': 0xa3,\n  'f64.min': 0xa4,\n  'f64.max': 0xa5,\n  'f64.copysign': 0xa6,\n  'i32.wrap/i64': 0xa7,\n  'i32.trunc_s/f32': 0xa8,\n  'i32.trunc_u/f32': 0xa9,\n  'i32.trunc_s/f64': 0xaa,\n  'i32.trunc_u/f64': 0xab,\n  'i64.extend_s/i32': 0xac,\n  'i64.extend_u/i32': 0xad,\n  'i64.trunc_s/f32': 0xae,\n  'i64.trunc_u/f32': 0xaf,\n  'i64.trunc_s/f64': 0xb0,\n  'i64.trunc_u/f64': 0xb1,\n  'f32.convert_s/i32': 0xb2,\n  'f32.convert_u/i32': 0xb3,\n  'f32.convert_s/i64': 0xb4,\n  'f32.convert_u/i64': 0xb5,\n  'f32.demote/f64': 0xb6,\n  'f64.convert_s/i32': 0xb7,\n  'f64.convert_u/i32': 0xb8,\n  'f64.convert_s/i64': 0xb9,\n  'f64.convert_u/i64': 0xba,\n  'f64.promote/f32': 0xbb,\n  'i32.reinterpret/f32': 0xbc,\n  'i64.reinterpret/f64': 0xbd,\n  'f32.reinterpret/i32': 0xbe,\n  'f64.reinterpret/i64': 0xbf\n}\n\n_exports.typeGenerators = {\n  'function': (json, stream) => {\n    stream.write([json])\n  },\n  table: (json, stream) => {\n    stream.write([LANGUAGE_TYPES[json.elementType]])\n    _exports.typeGenerators.memory(json.limits, stream)\n  },\n  /**\n   * generates a [`global_type`](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#global_type)\n   */\n  global: (json, stream) => {\n    stream.write([LANGUAGE_TYPES[json.contentType]])\n    stream.write([json.mutability])\n  },\n  /**\n   * Generates a [resizable_limits](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * @param {Object} json\n   * @param {Stream} stream\n   */\n  memory: (json, stream) => {\n    leb.unsigned.write(Number(json.maximum !== undefined), stream) // the flags\n    leb.unsigned.write(json.intial, stream)\n\n    if (json.maximum !== undefined) {\n      leb.unsigned.write(json.maximum, stream)\n    }\n  },\n  /**\n   * Generates a [init_expr](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * The encoding of an initializer expression is the normal encoding of the\n   * expression followed by the end opcode as a delimiter.\n   */\n  initExpr: (json, stream) => {\n    _exports.generateOp(json, stream)\n    _exports.generateOp({name: 'end', type: 'void'}, stream)\n  }\n}\n\n_exports.immediataryGenerators = {\n  'varuint1': (json, stream) => {\n    stream.write([json])\n    return stream\n  },\n  'varuint32': (json, stream) => {\n    leb.unsigned.write(json, stream)\n    return stream\n  },\n  'varint32': (json, stream) => {\n    leb.signed.write(json, stream)\n    return stream\n  },\n  'varint64': (json, stream) => {\n    leb.signed.write(json, stream)\n    return stream\n  },\n  'uint32': (json, stream) => {\n    stream.write(json)\n    return stream\n  },\n  'uint64': (json, stream) => {\n    stream.write(json)\n    return stream\n  },\n  'block_type': (json, stream) => {\n    stream.write([LANGUAGE_TYPES[json]])\n    return stream\n  },\n  'br_table': (json, stream) => {\n    leb.unsigned.write(json.targets.length, stream)\n    for (let target of json.targets) {\n      leb.unsigned.write(target, stream)\n    }\n    leb.unsigned.write(json.defaultTarget, stream)\n    return stream\n  },\n  'call_indirect': (json, stream) => {\n    leb.unsigned.write(json.index, stream)\n    stream.write([json.reserved])\n    return stream\n  },\n  'memory_immediate': (json, stream) => {\n    leb.unsigned.write(json.flags, stream)\n    leb.unsigned.write(json.offset, stream)\n\n    return stream\n  }\n}\n\nconst sectionGenerators = {\n  'custom': (json, stream = new Stream()) => {\n    stream.write([0])\n    const payload = new Stream()\n    leb.unsigned.write(json.sectionName.length, payload)\n    payload.write(json.sectionName)\n    payload.write(json.payload)\n    // write the size of the payload\n    leb.unsigned.write(payload.bytesWrote, stream)\n    stream.write(payload.buffer)\n    return stream\n  },\n  'type': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['type']])\n    let binEntries = new Stream()\n\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      // a single type entry binary encoded\n      binEntries.write([LANGUAGE_TYPES[entry.form]]) // the form\n\n      const len = entry.params.length // number of parameters\n      leb.unsigned.write(len, binEntries)\n      if (len !== 0) {\n        binEntries.write(entry.params.map(type => LANGUAGE_TYPES[type])) // the paramter types\n      }\n\n      binEntries.write([entry.return_type ? 1 : 0]) // number of return types\n\n      if (entry.return_type) {\n        binEntries.write([LANGUAGE_TYPES[entry.return_type]])\n      }\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream) // write the size\n    stream.write(binEntries.buffer)\n\n    return stream\n  },\n  'import': (json, stream) => {\n    stream.write([SECTION_IDS['import']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries) // write the number of entries\n    for (let entry of json.entries) {\n      // write the module string\n      leb.unsigned.write(entry.moduleStr.length, binEntries)\n      binEntries.write(entry.moduleStr)\n      // write the field string\n      leb.unsigned.write(entry.fieldStr.length, binEntries)\n      binEntries.write(entry.fieldStr)\n      binEntries.write([EXTERNAL_KIND[entry.kind]])\n      _exports.typeGenerators[entry.kind](entry.type, binEntries)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream) // write the size\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'function': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['function']])\n\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let index of json.entries) {\n      leb.unsigned.write(index, binEntries)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'table': (json, stream) => {\n    stream.write([SECTION_IDS['table']])\n    let binEntries = new Stream()\n    // write table_type\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      _exports.typeGenerators.table(entry, binEntries)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n\n    return stream\n  },\n  'memory': (json, stream) => {\n    stream.write([SECTION_IDS['memory']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      _exports.typeGenerators.memory(entry, binEntries)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'global': (json, stream) => {\n    stream.write([SECTION_IDS['global']])\n    let binEntries = new Stream()\n\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      _exports.typeGenerators.global(entry.type, binEntries)\n      _exports.typeGenerators.initExpr(entry.init, binEntries)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'export': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['export']])\n\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      const fieldStr = Buffer.from(entry.field_str)\n      const strLen = fieldStr.length\n      leb.unsigned.write(strLen, binEntries)\n      binEntries.write(fieldStr)\n      binEntries.write([EXTERNAL_KIND[entry.kind]])\n      leb.unsigned.write(entry.index, binEntries)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'start': (json, stream) => {\n    stream.write([SECTION_IDS['start']])\n    const index = new Stream()\n    leb.unsigned.write(json.index, index)\n    leb.unsigned.write(index.bytesWrote, stream)\n    stream.write(index.buffer)\n    return stream\n  },\n  'element': (json, stream) => {\n    stream.write([SECTION_IDS['element']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n\n    for (let entry of json.entries) {\n      leb.unsigned.write(entry.index, binEntries)\n      _exports.typeGenerators.initExpr(entry.offset, binEntries)\n      leb.unsigned.write(entry.elements.length, binEntries)\n      for (let elem of entry.elements) {\n        leb.unsigned.write(elem, binEntries)\n      }\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'code': (json, stream = new Stream()) => {\n    stream.write([SECTION_IDS['code']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n\n    for (let entry of json.entries) {\n      let codeStream = new Stream()\n      // write the locals\n      leb.unsigned.write(entry.locals.length, codeStream)\n      for (let local of entry.locals) {\n        leb.unsigned.write(local.count, codeStream)\n        codeStream.write([LANGUAGE_TYPES[local.type]])\n      }\n      // write opcode\n      for (let op of entry.code) {\n        _exports.generateOp(op, codeStream)\n      }\n\n      leb.unsigned.write(codeStream.bytesWrote, binEntries)\n      binEntries.write(codeStream.buffer)\n    }\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  },\n  'data': (json, stream) => {\n    stream.write([SECTION_IDS['data']])\n    let binEntries = new Stream()\n    leb.unsigned.write(json.entries.length, binEntries)\n    for (let entry of json.entries) {\n      leb.unsigned.write(entry.index, binEntries)\n      _exports.typeGenerators.initExpr(entry.offset, binEntries)\n      leb.unsigned.write(entry.data.length, binEntries)\n      binEntries.write(entry.data)\n    }\n\n    leb.unsigned.write(binEntries.bytesWrote, stream)\n    stream.write(binEntries.buffer)\n    return stream\n  }\n}\n\n_exports.generate = (json, stream = new Stream()) => {\n  _exports.generatePreramble(json.shift(), stream)\n  for (let item of json) {\n    sectionGenerators[item.name](item, stream)\n  }\n\n  return stream\n}\n\n_exports.generatePreramble = (json, stream = new Stream()) => {\n  stream.write(json.magic)\n  stream.write(json.version)\n  return stream\n}\n\n_exports.generateOp = (json, stream = new Stream()) => {\n  let name = json.name\n  if (json.return_type !== undefined) {\n    name = json.return_type + '.' + name\n  }\n\n  stream.write([OPCODES[name]])\n\n  const immediates = OP_IMMEDIATES[json.name === 'const' ? json.return_type : json.name]\n  if (immediates) {\n    _exports.immediataryGenerators[immediates](json.immediates, stream)\n  }\n  return stream\n}\n","const leb = require('leb128')\nconst Stream = require('buffer-pipe')\nconst OP_IMMEDIATES = require('./immediates.json')\n\nconst _exports = module.exports = (buf, filter) => {\n  const stream = new Stream(buf)\n  return _exports.parse(stream, filter)\n}\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#language-types\n// All types are distinguished by a negative varint7 values that is the first\n// byte of their encoding (representing a type constructor)\nconst LANGUAGE_TYPES = _exports.LANGUAGE_TYPES = {\n  0x7f: 'i32',\n  0x7e: 'i64',\n  0x7d: 'f32',\n  0x7c: 'f64',\n  0x70: 'anyFunc',\n  0x60: 'func',\n  0x40: 'block_type'\n}\n\n// https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#external_kind\n// A single-byte unsigned integer indicating the kind of definition being imported or defined:\nconst EXTERNAL_KIND = _exports.EXTERNAL_KIND = {\n  0: 'function',\n  1: 'table',\n  2: 'memory',\n  3: 'global'\n}\n\n_exports.parsePreramble = (stream) => {\n  const obj = {}\n  obj.name = 'preramble'\n  obj.magic = [...stream.read(4)]\n  obj.version = [...stream.read(4)]\n  return obj\n}\n\n_exports.parseSectionHeader = (stream) => {\n  const id = stream.read(1)[0]\n  const size = leb.unsigned.readBn(stream).toNumber()\n  return {\n    id,\n    name: SECTION_IDS[id],\n    size\n  }\n}\n\nconst OPCODES = _exports.OPCODES = {\n  // flow control\n  0x0: 'unreachable',\n  0x1: 'nop',\n  0x2: 'block',\n  0x3: 'loop',\n  0x4: 'if',\n  0x5: 'else',\n  0xb: 'end',\n  0xc: 'br',\n  0xd: 'br_if',\n  0xe: 'br_table',\n  0xf: 'return',\n\n  // calls\n  0x10: 'call',\n  0x11: 'call_indirect',\n\n  // Parametric operators\n  0x1a: 'drop',\n  0x1b: 'select',\n\n  // Varibale access\n  0x20: 'get_local',\n  0x21: 'set_local',\n  0x22: 'tee_local',\n  0x23: 'get_global',\n  0x24: 'set_global',\n\n  // Memory-related operators\n  0x28: 'i32.load',\n  0x29: 'i64.load',\n  0x2a: 'f32.load',\n  0x2b: 'f64.load',\n  0x2c: 'i32.load8_s',\n  0x2d: 'i32.load8_u',\n  0x2e: 'i32.load16_s',\n  0x2f: 'i32.load16_u',\n  0x30: 'i64.load8_s',\n  0x31: 'i64.load8_u',\n  0x32: 'i64.load16_s',\n  0x33: 'i64.load16_u',\n  0x34: 'i64.load32_s',\n  0x35: 'i64.load32_u',\n  0x36: 'i32.store',\n  0x37: 'i64.store',\n  0x38: 'f32.store',\n  0x39: 'f64.store',\n  0x3a: 'i32.store8',\n  0x3b: 'i32.store16',\n  0x3c: 'i64.store8',\n  0x3d: 'i64.store16',\n  0x3e: 'i64.store32',\n  0x3f: 'current_memory',\n  0x40: 'grow_memory',\n\n  // Constants\n  0x41: 'i32.const',\n  0x42: 'i64.const',\n  0x43: 'f32.const',\n  0x44: 'f64.const',\n\n  // Comparison operators\n  0x45: 'i32.eqz',\n  0x46: 'i32.eq',\n  0x47: 'i32.ne',\n  0x48: 'i32.lt_s',\n  0x49: 'i32.lt_u',\n  0x4a: 'i32.gt_s',\n  0x4b: 'i32.gt_u',\n  0x4c: 'i32.le_s',\n  0x4d: 'i32.le_u',\n  0x4e: 'i32.ge_s',\n  0x4f: 'i32.ge_u',\n  0x50: 'i64.eqz',\n  0x51: 'i64.eq',\n  0x52: 'i64.ne',\n  0x53: 'i64.lt_s',\n  0x54: 'i64.lt_u',\n  0x55: 'i64.gt_s',\n  0x56: 'i64.gt_u',\n  0x57: 'i64.le_s',\n  0x58: 'i64.le_u',\n  0x59: 'i64.ge_s',\n  0x5a: 'i64.ge_u',\n  0x5b: 'f32.eq',\n  0x5c: 'f32.ne',\n  0x5d: 'f32.lt',\n  0x5e: 'f32.gt',\n  0x5f: 'f32.le',\n  0x60: 'f32.ge',\n  0x61: 'f64.eq',\n  0x62: 'f64.ne',\n  0x63: 'f64.lt',\n  0x64: 'f64.gt',\n  0x65: 'f64.le',\n  0x66: 'f64.ge',\n\n  // Numeric operators\n  0x67: 'i32.clz',\n  0x68: 'i32.ctz',\n  0x69: 'i32.popcnt',\n  0x6a: 'i32.add',\n  0x6b: 'i32.sub',\n  0x6c: 'i32.mul',\n  0x6d: 'i32.div_s',\n  0x6e: 'i32.div_u',\n  0x6f: 'i32.rem_s',\n  0x70: 'i32.rem_u',\n  0x71: 'i32.and',\n  0x72: 'i32.or',\n  0x73: 'i32.xor',\n  0x74: 'i32.shl',\n  0x75: 'i32.shr_s',\n  0x76: 'i32.shr_u',\n  0x77: 'i32.rotl',\n  0x78: 'i32.rotr',\n  0x79: 'i64.clz',\n  0x7a: 'i64.ctz',\n  0x7b: 'i64.popcnt',\n  0x7c: 'i64.add',\n  0x7d: 'i64.sub',\n  0x7e: 'i64.mul',\n  0x7f: 'i64.div_s',\n  0x80: 'i64.div_u',\n  0x81: 'i64.rem_s',\n  0x82: 'i64.rem_u',\n  0x83: 'i64.and',\n  0x84: 'i64.or',\n  0x85: 'i64.xor',\n  0x86: 'i64.shl',\n  0x87: 'i64.shr_s',\n  0x88: 'i64.shr_u',\n  0x89: 'i64.rotl',\n  0x8a: 'i64.rotr',\n  0x8b: 'f32.abs',\n  0x8c: 'f32.neg',\n  0x8d: 'f32.ceil',\n  0x8e: 'f32.floor',\n  0x8f: 'f32.trunc',\n  0x90: 'f32.nearest',\n  0x91: 'f32.sqrt',\n  0x92: 'f32.add',\n  0x93: 'f32.sub',\n  0x94: 'f32.mul',\n  0x95: 'f32.div',\n  0x96: 'f32.min',\n  0x97: 'f32.max',\n  0x98: 'f32.copysign',\n  0x99: 'f64.abs',\n  0x9a: 'f64.neg',\n  0x9b: 'f64.ceil',\n  0x9c: 'f64.floor',\n  0x9d: 'f64.trunc',\n  0x9e: 'f64.nearest',\n  0x9f: 'f64.sqrt',\n  0xa0: 'f64.add',\n  0xa1: 'f64.sub',\n  0xa2: 'f64.mul',\n  0xa3: 'f64.div',\n  0xa4: 'f64.min',\n  0xa5: 'f64.max',\n  0xa6: 'f64.copysign',\n\n  // Conversions\n  0xa7: 'i32.wrap/i64',\n  0xa8: 'i32.trunc_s/f32',\n  0xa9: 'i32.trunc_u/f32',\n  0xaa: 'i32.trunc_s/f64',\n  0xab: 'i32.trunc_u/f64',\n  0xac: 'i64.extend_s/i32',\n  0xad: 'i64.extend_u/i32',\n  0xae: 'i64.trunc_s/f32',\n  0xaf: 'i64.trunc_u/f32',\n  0xb0: 'i64.trunc_s/f64',\n  0xb1: 'i64.trunc_u/f64',\n  0xb2: 'f32.convert_s/i32',\n  0xb3: 'f32.convert_u/i32',\n  0xb4: 'f32.convert_s/i64',\n  0xb5: 'f32.convert_u/i64',\n  0xb6: 'f32.demote/f64',\n  0xb7: 'f64.convert_s/i32',\n  0xb8: 'f64.convert_u/i32',\n  0xb9: 'f64.convert_s/i64',\n  0xba: 'f64.convert_u/i64',\n  0xbb: 'f64.promote/f32',\n\n  // Reinterpretations\n  0xbc: 'i32.reinterpret/f32',\n  0xbd: 'i64.reinterpret/f64',\n  0xbe: 'f32.reinterpret/i32',\n  0xbf: 'f64.reinterpret/i64'\n}\n\nconst SECTION_IDS = _exports.SECTION_IDS = {\n  0: 'custom',\n  1: 'type',\n  2: 'import',\n  3: 'function',\n  4: 'table',\n  5: 'memory',\n  6: 'global',\n  7: 'export',\n  8: 'start',\n  9: 'element',\n  10: 'code',\n  11: 'data'\n}\n\n_exports.immediataryParsers = {\n  'varuint1': (stream) => {\n    const int1 = stream.read(1)[0]\n    return int1\n  },\n  'varuint32': (stream) => {\n    const int32 = leb.unsigned.read(stream)\n    return int32\n  },\n  'varint32': (stream) => {\n    const int32 = leb.signed.read(stream)\n    return int32\n  },\n  'varint64': (stream) => {\n    const int64 = leb.signed.read(stream)\n    return int64\n  },\n  'uint32': (stream) => {\n    return [...stream.read(4)]\n  },\n  'uint64': (stream) => {\n    return [...stream.read(8)]\n  },\n  'block_type': (stream) => {\n    const type = stream.read(1)[0]\n    return LANGUAGE_TYPES[type]\n  },\n  'br_table': (stream) => {\n    const json = {\n      targets: []\n    }\n    const num = leb.unsigned.readBn(stream).toNumber()\n    for (let i = 0; i < num; i++) {\n      const target = leb.unsigned.readBn(stream).toNumber()\n      json.targets.push(target)\n    }\n    json.defaultTarget = leb.unsigned.readBn(stream).toNumber()\n    return json\n  },\n  'call_indirect': (stream) => {\n    const json = {}\n    json.index = leb.unsigned.readBn(stream).toNumber()\n    json.reserved = stream.read(1)[0]\n    return json\n  },\n  'memory_immediate': (stream) => {\n    const json = {}\n    json.flags = leb.unsigned.readBn(stream).toNumber()\n    json.offset = leb.unsigned.readBn(stream).toNumber()\n    return json\n  }\n}\n\n_exports.typeParsers = {\n  'function': (stream) => {\n    return leb.unsigned.readBn(stream).toNumber()\n  },\n  table: (stream) => {\n    const entry = {}\n    const type = stream.read(1)[0] // read single byte\n    entry.elementType = LANGUAGE_TYPES[type]\n    entry.limits = _exports.typeParsers.memory(stream)\n    return entry\n  },\n  /**\n   * parses a [`global_type`](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#global_type)\n   * @param {Stream} stream\n   * @return {Object}\n   */\n  global: (stream) => {\n    const global = {}\n    let type = stream.read(1)[0]\n    global.contentType = LANGUAGE_TYPES[type]\n    global.mutability = stream.read(1)[0]\n    return global\n  },\n  /**\n   * Parses a [resizable_limits](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * @param {Stream} stream\n   * return {Object}\n   */\n  memory: (stream) => {\n    const limits = {}\n    limits.flags = leb.unsigned.readBn(stream).toNumber()\n    limits.intial = leb.unsigned.readBn(stream).toNumber()\n    if (limits.flags === 1) {\n      limits.maximum = leb.unsigned.readBn(stream).toNumber()\n    }\n    return limits\n  },\n  /**\n   * Parses a [init_expr](https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#resizable_limits)\n   * The encoding of an initializer expression is the normal encoding of the\n   * expression followed by the end opcode as a delimiter.\n   */\n  initExpr: (stream) => {\n    const op = _exports.parseOp(stream)\n    stream.read(1) // skip the `end`\n    return op\n  }\n}\n\nconst sectionParsers = _exports.sectionParsers = {\n  'custom': (stream, header) => {\n    const json = {\n      name: 'custom'\n    }\n    const section = new Stream(stream.read(header.size))\n    const nameLen = leb.unsigned.readBn(section).toNumber()\n    const name = section.read(nameLen)\n    json.sectionName = Buffer.from(name).toString()\n    json.payload = [...section.buffer]\n    return json\n  },\n  'type': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'type',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      let type = stream.read(1)[0]\n      const entry = {\n        form: LANGUAGE_TYPES[type],\n        params: []\n      }\n\n      const paramCount = leb.unsigned.readBn(stream).toNumber()\n\n      // parse the entries\n      for (let q = 0; q < paramCount; q++) {\n        const type = stream.read(1)[0]\n        entry.params.push(LANGUAGE_TYPES[type])\n      }\n      const numOfReturns = leb.unsigned.readBn(stream).toNumber()\n      if (numOfReturns) {\n        type = stream.read(1)[0]\n        entry.return_type = LANGUAGE_TYPES[type]\n      }\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'import': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'import',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {}\n      const moduleLen = leb.unsigned.readBn(stream).toNumber()\n      entry.moduleStr = Buffer.from(stream.read(moduleLen)).toString()\n\n      const fieldLen = leb.unsigned.readBn(stream).toNumber()\n      entry.fieldStr = Buffer.from(stream.read(fieldLen)).toString()\n      const kind = stream.read(1)[0] // read single byte\n      entry.kind = EXTERNAL_KIND[kind]\n      entry.type = _exports.typeParsers[entry.kind](stream)\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'function': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'function',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = leb.unsigned.readBn(stream).toNumber()\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'table': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'table',\n      entries: []\n    }\n\n    // parse table_type\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = _exports.typeParsers.table(stream)\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'memory': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'memory',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = _exports.typeParsers.memory(stream)\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'global': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'global',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {}\n      entry.type = _exports.typeParsers.global(stream)\n      entry.init = _exports.typeParsers.initExpr(stream)\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'export': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'export',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const strLength = leb.unsigned.readBn(stream).toNumber()\n      const entry = {}\n      entry.field_str = Buffer.from(stream.read(strLength)).toString()\n      const kind = stream.read(1)[0]\n      entry.kind = EXTERNAL_KIND[kind]\n      entry.index = leb.unsigned.readBn(stream).toNumber()\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'start': (stream) => {\n    const json = {\n      name: 'start'\n    }\n\n    json.index = leb.unsigned.readBn(stream).toNumber()\n    return json\n  },\n  'element': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'element',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {\n        elements: []\n      }\n\n      entry.index = leb.unsigned.readBn(stream).toNumber()\n      entry.offset = _exports.typeParsers.initExpr(stream)\n      const numElem = leb.unsigned.readBn(stream).toNumber()\n      for (let i = 0; i < numElem; i++) {\n        const elem = leb.unsigned.readBn(stream).toNumber()\n        entry.elements.push(elem)\n      }\n\n      json.entries.push(entry)\n    }\n    return json\n  },\n  'code': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'code',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const codeBody = {\n        locals: [],\n        code: []\n      }\n\n      let bodySize = leb.unsigned.readBn(stream).toNumber()\n      const endBytes = stream.bytesRead + bodySize\n      // parse locals\n      const localCount = leb.unsigned.readBn(stream).toNumber()\n\n      for (let q = 0; q < localCount; q++) {\n        const local = {}\n        local.count = leb.unsigned.readBn(stream).toNumber()\n        const type = stream.read(1)[0]\n        local.type = LANGUAGE_TYPES[type]\n        codeBody.locals.push(local)\n      }\n\n      // parse code\n      while (stream.bytesRead < endBytes) {\n        const op = _exports.parseOp(stream)\n        codeBody.code.push(op)\n      }\n\n      json.entries.push(codeBody)\n    }\n    return json\n  },\n  'data': (stream) => {\n    const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n    const json = {\n      name: 'data',\n      entries: []\n    }\n\n    for (let i = 0; i < numberOfEntries; i++) {\n      const entry = {}\n      entry.index = leb.unsigned.readBn(stream).toNumber()\n      entry.offset = _exports.typeParsers.initExpr(stream)\n      const segmentSize = leb.unsigned.readBn(stream).toNumber()\n      entry.data = [...stream.read(segmentSize)]\n\n      json.entries.push(entry)\n    }\n    return json\n  }\n}\n\n_exports.parseOp = (stream) => {\n  const json = {}\n  const op = stream.read(1)[0]\n  const fullName = OPCODES[op]\n  let [type, name] = fullName.split('.')\n\n  if (name === undefined) {\n    name = type\n  } else {\n    json.return_type = type\n  }\n\n  json.name = name\n\n  const immediates = OP_IMMEDIATES[name === 'const' ? type : name]\n  if (immediates) {\n    json.immediates = _exports.immediataryParsers[immediates](stream)\n  }\n  return json\n}\n\n_exports.parse = (stream, filter) => {\n  const json = []\n  const preramble = _exports.parsePreramble(stream)\n  if (!filter || filter.has('preramble')) {\n    json.push(preramble)\n  }\n\n  while (!stream.end) {\n    const header = _exports.parseSectionHeader(stream)\n    if (filter && !filter.has(header.name)) {\n      stream.read(header.size)\n      continue\n    }\n    json.push(sectionParsers[header.name](stream, header))\n  }\n  return json\n}\n","/**\n * Converts a wasm binary into a json representation\n * @param {Buffer}\n * @return {Array}\n */\nexports.wasm2json = require('./wasm2json')\n\n/**\n * Converts a json representation to a wasm binary\n * @param {Array}\n * @return {Buffer}\n */\nexports.json2wasm = require('./json2wasm')\n\n/**\n * Converts text to json. The only accepts text that is a simple list of opcode name and immediates\n * @param {String}\n * @return {Object}\n * @example\n * const codeStr = `\n * i64.const 1\n * i64.const 2\n * i64.add\n * `\n * const json = text2json(codeStr)\n */\nexports.text2json = require('./text2json')\n\n/**\n * iterates thourgh an array of sections returning a subset of sections\n * @param {Array}\n * @param {Sections}\n */\nexports.findSections = function * (array, sections) {\n  let section = array[0]\n  let index = 0\n  const wantedSections = new Set(sections)\n  let nextSection = sections.shift()\n\n  while (section) {\n    if (!wantedSections.has(section.sectionName || section.name)) {\n      section = array[++index]\n    } else {\n      if ((section.sectionName || section.name) === nextSection) {\n        yield section\n        section = array[++index]\n      } else {\n        yield\n      }\n      nextSection = sections.shift()\n    }\n  }\n}\n","const Bn = require('bn.js')\nconst Pipe = require('buffer-pipe')\n\nmodule.exports = {\n  encode,\n  decode,\n  write,\n  read,\n  readBn\n}\n\nfunction read (stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    shift += 7\n    if (byt >> 7 === 0) {\n      break\n    }\n  }\n  // sign extend if negitive\n  if (byt & 0x40) {\n    num.setn(shift)\n  }\n  return num.fromTwos(shift)\n}\n\nfunction write (number, stream) {\n  let num = new Bn(number)\n  const isNeg = num.isNeg()\n  if (isNeg) {\n    // add 8 bits for padding\n    num = num.toTwos(num.bitLength() + 8)\n  }\n  while (true) {\n    const i = num.maskn(7).toNumber()\n    num.ishrn(7)\n    if ((isNegOne(num) && (i & 0x40) !== 0) ||\n      (num.isZero() && (i & 0x40) === 0)) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n\n  function isNegOne (num) {\n    return isNeg && num.toString(2).indexOf('0') < 0\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nfunction encode (num) {\n  const stream = new Pipe()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nfunction decode (buffer) {\n  const stream = new Pipe(buffer)\n  return read(stream)\n}\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","const Bn = require('bn.js')\nconst Pipe = require('buffer-pipe')\n\nmodule.exports = {\n  encode,\n  decode,\n  read,\n  readBn,\n  write\n}\n\nfunction read (stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    if (byt >> 7 === 0) {\n      break\n    } else {\n      shift += 7\n    }\n  }\n  return num\n}\n\nfunction write (number, stream) {\n  const num = new Bn(number)\n  while (true) {\n    const i = num.maskn(7).toNumber()\n    num.ishrn(7)\n    if (num.isZero()) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nfunction encode (num) {\n  const stream = new Pipe()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nfunction decode (buffer) {\n  const stream = new Pipe(buffer)\n  return read(stream)\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","const Stream = require('buffer-pipe')\nconst Buffer = require('safe-buffer').Buffer\nconst leb = require('leb128')\nconst {findSections} = require('wasm-json-toolkit')\n\nconst FUNC_TYPE = 0x60\nconst LANGUAGE_TYPES_STRG = {\n  'i32': 0x7f,\n  'i64': 0x7e,\n  'f32': 0x7d,\n  'f64': 0x7c,\n  'anyref': 0x70,\n  'module': 0x6f,\n  'func': 0x6e,\n  'data': 0x6d,\n  'elem': 0x6c,\n  'link': 0x6b,\n  'id': 0x6a\n}\n\nconst LANGUAGE_TYPES_BIN = {\n  0x7f: 'i32',\n  0x7e: 'i64',\n  0x7d: 'f32',\n  0x7c: 'f64',\n  0x70: 'anyref',\n  0x6f: 'module',\n  0x6e: 'func',\n  0x6d: 'data',\n  0x6c: 'elem',\n  0x6b: 'link',\n  0x6a: 'id'\n}\n\nconst EXTERNAL_KIND_BIN = {\n  0x0: 'func',\n  0x1: 'table',\n  0x2: 'memory',\n  0x3: 'global'\n}\n\nconst EXTERNAL_KIND_STRG = {\n  'func': 0x0,\n  'table': 0x1,\n  'memory': 0x2,\n  'global': 0x3\n}\n\n/**\n * encodes the type annotations\n * @param {Object} annotations\n * @return {Buffer}\n */\nfunction encode (annotations) {\n  const stream = new Stream()\n  encodeCustomSection('types', annotations, stream, encodeType)\n  encodeCustomSection('typeMap', annotations, stream, encodeTypeMap)\n  encodeCustomSection('persist', annotations, stream, encodePersist)\n\n  return stream.buffer\n}\n\nfunction encodeCustomSection (name, json, stream, encodingFunc) {\n  let payload = new Stream()\n  json = json[name]\n\n  if (json) {\n    stream.write([0])\n    // encode type\n    leb.unsigned.write(name.length, payload)\n    payload.write(name)\n    encodingFunc(json, payload)\n    // write the size of the payload\n    leb.unsigned.write(payload.bytesWrote, stream)\n    stream.write(payload.buffer)\n  }\n  return stream\n}\n\n/**\n * encodes the type annoations for persist\n * @param {Object} annoations\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodePersist (annotations, stream = new Stream()) {\n  leb.unsigned.write(annotations.length, stream)\n  for (const entry of annotations) {\n    const form = EXTERNAL_KIND_STRG[entry.form]\n    leb.unsigned.write(form, stream)\n    leb.unsigned.write(entry.index, stream)\n    leb.unsigned.write(LANGUAGE_TYPES_STRG[entry.type], stream)\n  }\n  return stream.buffer\n}\n\n/**\n * decodes the persist annotations\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodePersist (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  let numOfEntries = leb.unsigned.read(stream)\n  const json = []\n  while (numOfEntries--) {\n    const form = EXTERNAL_KIND_BIN[leb.unsigned.readBn(stream).toNumber()]\n    if (!form) {\n      throw new Error('invalid form')\n    }\n    const index = leb.unsigned.readBn(stream).toNumber()\n    const type = LANGUAGE_TYPES_BIN[leb.unsigned.readBn(stream).toNumber()]\n    if (!type) {\n      throw new Error('invalid param')\n    }\n    json.push({\n      form,\n      index,\n      type\n    })\n  }\n\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n\n  return json\n}\n\n/**\n * encodes a typeMap definition\n * @param {Object} definition\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodeTypeMap (definition, stream = new Stream()) {\n  leb.unsigned.write(definition.length, stream)\n  for (let entry of definition) {\n    leb.unsigned.write(entry.func, stream)\n    leb.unsigned.write(entry.type, stream)\n  }\n  return stream.buffer\n}\n\n/**\n * decodes the TypeMap section\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodeTypeMap (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  let numOfEntries = leb.unsigned.read(stream)\n  const json = []\n  while (numOfEntries--) {\n    json.push({\n      func: leb.unsigned.readBn(stream).toNumber(),\n      type: leb.unsigned.readBn(stream).toNumber()\n    })\n  }\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n  return json\n}\n\n/**\n * encodes the type annotations\n * @param {Object} definition\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodeType (annotations, stream = new Stream()) {\n  let binEntries = new Stream()\n\n  leb.unsigned.write(annotations.length, binEntries)\n  for (let entry of annotations) {\n    // a single type entry binary encoded\n    binEntries.write([FUNC_TYPE])\n\n    const len = entry.params.length // number of parameters\n    leb.unsigned.write(len, binEntries)\n    binEntries.write(entry.params.map(type => LANGUAGE_TYPES_STRG[type])) // the paramter types\n    binEntries.write([0])\n    // binEntries.write([entry.return_type ? 1 : 0]) // number of return types\n    // if (entry.return_type) {\n    //   binEntries.write([LANGUAGE_TYPES[entry.return_type]])\n    //   throw new Error('return type are not allowed')\n    // }\n  }\n\n  stream.write(binEntries.buffer)\n  return stream.buffer\n}\n\n/**\n * decodes the Type section\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodeType (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n  const json = []\n  for (let i = 0; i < numberOfEntries; i++) {\n    let type = stream.read(1)[0]\n    if (type !== FUNC_TYPE) {\n      throw new Error('invalid form')\n    }\n    const entry = {\n      form: 'func',\n      params: []\n    }\n\n    let paramCount = leb.unsigned.readBn(stream).toNumber()\n\n    // parse the entries\n    while (paramCount--) {\n      const type = stream.read(1)[0]\n      const param = LANGUAGE_TYPES_BIN[type]\n      if (!param) {\n        throw new Error('invalid param')\n      }\n      entry.params.push(param)\n    }\n    // remove the last byte\n    leb.unsigned.readBn(stream)\n    // const numOfReturns = leb.unsigned.readBn(stream).toNumber()\n    // if (numOfReturns) {\n    //   type = stream.read(1)[0]\n    //   entry.return_type = LANGUAGE_TYPES[type]\n    // }\n\n    json.push(entry)\n  }\n\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n  return json\n}\n\n/**\n * injects custom sections into a wasm binary\n * @param {Buffer} custom - the custom section(s)\n * @param {Buffer} wasm - the wasm binary\n * @return {Buffer}\n */\nfunction injectCustomSection (custom, wasm) {\n  const preramble = wasm.subarray(0, 8)\n  const body = wasm.subarray(8)\n  return Buffer.concat([\n    Buffer.from(preramble),\n    Buffer.from(custom),\n    Buffer.from(body)\n  ])\n}\n\n/**\n * encodes a json definition and injects it into a wasm binary\n * @param {Object} annotation - the type definition\n * @param {Buffer} wasm - the wasm binary to inject\n */\nfunction encodeAndInject (annotation, wasm) {\n  const buf = encode(annotation)\n  return injectCustomSection(buf, wasm)\n}\n\nfunction mergeTypeSections (json) {\n  const result = {\n    types: [],\n    indexes: {},\n    exports: {},\n    persist: []\n  }\n\n  const wantedSections = ['types', 'typeMap', 'persist', 'type', 'import', 'function', 'export']\n  const iterator = findSections(json, wantedSections)\n  const mappedFuncs = new Map()\n  const mappedTypes = new Map()\n  const {value: customType} = iterator.next()\n  if (customType) {\n    const type = decodeType(customType.payload)\n    result.types = type\n  }\n  let {value: typeMap} = iterator.next()\n  if (typeMap) {\n    decodeTypeMap(typeMap.payload).forEach(map => mappedFuncs.set(map.func, map.type))\n  }\n\n  let {value: persist} = iterator.next()\n  if (persist) {\n    result.persist = decodePersist(persist.payload)\n  }\n\n  const {value: type} = iterator.next()\n  const {value: imports = {entries: []}} = iterator.next()\n  const {value: functions = {entries: []}} = iterator.next()\n  functions.entries.forEach((typeIndex, funcIndex) => {\n    const newType = type.entries[typeIndex]\n    // validate that no function signature have no return types\n    if (newType.return_type) {\n      throw new Error('no return types allowed')\n    }\n    let customIndex = mappedFuncs.get(funcIndex)\n    if (customIndex === undefined) {\n      customIndex = mappedTypes.get(typeIndex)\n    } else {\n      const customType = result.types[customIndex]\n      if (customType.params.length !== newType.params.length) {\n        throw new Error('invalid param length')\n      }\n\n      if (!newType.params.every(param => param === 'i32')) {\n        throw new Error('invalid base param type')\n      }\n    }\n\n    if (customIndex === undefined) {\n      customIndex = result.types.push(newType) - 1\n      mappedTypes.set(typeIndex, customIndex)\n    }\n    result.indexes[funcIndex + imports.entries.length] = customIndex\n  })\n\n  const {value: exports = {entries: []}} = iterator.next()\n  exports.entries.forEach(entry => {\n    if (entry.kind === 'function') {\n      result.exports[entry.field_str] = entry.index\n    }\n  })\n  return result\n}\n\nmodule.exports = {\n  injectCustomSection,\n  encodeAndInject,\n  decodeType,\n  decodeTypeMap,\n  decodePersist,\n  encodeType,\n  encodeTypeMap,\n  encodePersist,\n  encode,\n  mergeTypeSections,\n  LANGUAGE_TYPES_BIN,\n  LANGUAGE_TYPES_STRG\n}\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\nimport {\n  Compiler,\n  ConversionKind,\n\n  makeSmallIntegerWrap\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId\n} from \"./module\";\n\nimport {\n  ElementKind,\n  Global,\n  FunctionPrototype,\n  Class,\n  Field\n} from \"./program\";\n\n/** Compiles a get of a built-in global. */\nexport function compileGetConstant(\n  compiler: Compiler,\n  global: Global,\n  reportNode: Node\n): ExpressionRef {\n  switch (global.internalName) {\n    case \"NaN\": { // context-sensitive\n      if (compiler.currentType == Type.f32) {\n        return compiler.module.createF32(NaN);\n      } else {\n        compiler.currentType = Type.f64;\n        return compiler.module.createF64(NaN);\n      }\n    }\n    case \"Infinity\": { // context-sensitive\n      if (compiler.currentType == Type.f32) {\n        return compiler.module.createF32(Infinity);\n      } else {\n        compiler.currentType = Type.f64;\n        return compiler.module.createF64(Infinity);\n      }\n    }\n    case \"HEAP_BASE\": { // never inlined for linking purposes\n      compiler.currentType = compiler.options.usizeType;\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return compiler.module.createUnreachable();\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (!stringInstance) return module.createUnreachable();\n        if (classType.isAssignableTo(stringInstance)) {\n          return module.createI32(1);\n        }\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": {\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        ); // recoverable\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      let classType = type.classReference;\n      return classType != null && classType.prototype.fnIndexedGet != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments && typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n\n      switch (compiler.currentType.kind) {\n        case TypeKind.F32: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n          ret = module.createBinary(BinaryOp.NeF32,\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createGetLocal(tempLocal.index, NativeType.F32)\n          );\n          break;\n        }\n        case TypeKind.F64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n          ret = module.createBinary(BinaryOp.NeF64,\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createGetLocal(tempLocal.index, NativeType.F64)\n          );\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // every other type is never NaN\n          ret = module.createI32(0);\n          break;\n        }\n      }\n      compiler.currentType = Type.bool;\n      return ret;\n    }\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments && typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.F32: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n          ret = module.createSelect(\n            module.createBinary(BinaryOp.NeF32,\n              module.createUnary(UnaryOp.AbsF32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              module.createF32(Infinity)\n            ),\n            module.createI32(0),\n            module.createBinary(BinaryOp.EqF32,\n              module.createGetLocal(tempLocal.index, NativeType.F32),\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            )\n          );\n          break;\n        }\n        case TypeKind.F64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n          ret = module.createSelect(\n            module.createBinary(BinaryOp.NeF64,\n              module.createUnary(UnaryOp.AbsF64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              module.createF64(Infinity)\n            ),\n            module.createI32(0),\n            module.createBinary(BinaryOp.EqF64,\n              module.createGetLocal(tempLocal.index, NativeType.F64),\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            )\n          );\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // every other type is always finite\n          ret = module.createI32(1);\n          break;\n        }\n      }\n      compiler.currentType = Type.bool;\n      return ret;\n    }\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = makeSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType,\n            module\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = makeSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType,\n            module\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n          // doesn't need sign-extension here because ifFalse below is either positive\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\n        case TypeKind.I32: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32\n            );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\n          : ConversionKind.IMPLICIT\n      );\n      let type: Type;\n      if (\n        compiler.currentType.is(TypeFlags.INTEGER) &&\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        typeArguments[0].size > compiler.currentType.size\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type);\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        default: { // any value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.kind != TypeKind.USIZE) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64);\n    if (\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\n      _BinaryenConstGetValueI64High(expr) != 0 ||\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32);\n    if (\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\n      (value = _BinaryenConstGetValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__41__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0))\n      return 0;\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, n) {\n    HEAP.copyWithin(dest, src, src + n);\n  };\n\n  globalScope[\"store\"] = function store(ptr, val, off) {\n    if (typeof off === \"number\")\n      ptr += off;\n    HEAP[ptr] = val;\n  };\n\n  globalScope[\"load\"] = function load(ptr) {\n    if (typeof off === \"number\")\n      ptr += off;\n    return HEAP[ptr];\n  };\n};\n","module.exports = globalScope => {\n  globalScope[\"JSMath\"] = Math;\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nrequire(\"./portable/math\")(globalScope);\nrequire(\"./portable/memory\")(globalScope);\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable\";\nimport \"./binaryen\";\nimport \"./i64\";\nimport \"./float\";\n"],"sourceRoot":""}