{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./node_modules/leb128/node_modules/buffer-pipe/index.js","webpack://assemblyscript/./node_modules/bn.js/lib/bn.js","webpack://assemblyscript/./node_modules/buffer/index.js","webpack://assemblyscript/./node_modules/safe-buffer/index.js","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/leb128/signed.js","webpack://assemblyscript/(webpack)/buildin/module.js","webpack://assemblyscript/./node_modules/leb128/unsigned.js","webpack://assemblyscript/./node_modules/leb128/index.js","webpack://assemblyscript/./node_modules/primea-annotations/node_modules/safe-buffer/index.js","webpack://assemblyscript/./node_modules/isarray/index.js","webpack://assemblyscript/./node_modules/ieee754/index.js","webpack://assemblyscript/./node_modules/base64-js/index.js","webpack://assemblyscript/./node_modules/buffer-pipe/index.js","webpack://assemblyscript/./node_modules/primea-annotations/index.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__37__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","ElementKind","CommonFlags","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","length","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","derived","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","checkGlobalOptions","parentNode","is","GLOBAL","isLibrary","SOURCE","simpleName","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnSubtract","fnMultiply","fnDivide","fnFractional","fnBitwiseAnd","fnBitwiseOr","fnBitwiseXor","fnEquals","fnNotEquals","fnGreaterThan","fnGreaterThanEquals","fnLessThan","fnLessThanEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","indexedGetPrototype","getIndexedGet","indexedGetInstance","base","resolveElementAccess","elementAccess","elementExpression","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","SEALED","Class_0_is_sealed_and_cannot_be_extended","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","getIndexedSet","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","primea_annotations_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","globalsCount","persistentGlobals","funcsCount","customTypeMap","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","persistentType","_BinaryenAddGlobal","addFunction","varTypes","customType","concat","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","customJSON","size","persist","keys","form","types","typeMap","typeIndex_1","_e","paramString","params","split","map","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","encodeAndInject","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","PERSISTENT","FUNCTION_TYPE","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","g","eval","e","window","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","nullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argumentCountRef","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","typeRef","ensureFunctionType","funcRef","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","persistentDecorator","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","customTypeDecorator","customTypes","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","ensureTrampoline","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","operatorName","compileOperatorOverload","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","operatorPrototype","operatorInstance","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","Index_signature_is_missing_in_type_0","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedSetPrototype","Index_signature_in_type_0_only_permits_reading","indexedSetInstance","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCall","compileCallDirect","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","numArgumentsInclThis","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","numOperands","isCallImport","ensureArgumentCount","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","Buffer","[object Object]","buf","num","data","subarray","msg","inherits","ctor","superCtor","super_","TempCtor","constructor","BN","number","endian","isBN","negative","words","red","_init","wordSize","parseHex","Math","min","parseBase","mul","isArray","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","toArray","w","off","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","dest","clone","_expand","_normSign","inspect","zeros","groupSizes","groupBases","smallMulTo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","res","q","andln","iushrn","clz32","_countBits","t","_zeroBits","bitLength","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","sub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","x","y","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","outLen","prev","mod3","one","nOne","lpow","z","inv","wnd","currentLen","mont","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","TypeError","ArrayBuffer","array","byteOffset","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","checked","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","Symbol","species","fill","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","match","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","toHex","checkOffset","ext","checkInt","objectWriteUInt16","objectWriteUInt32","checkIEEE754","writeFloat","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","stringtrim","base64clean","src","dst","copyProps","key","SafeBuffer","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","eqz","isPositive","other","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","log2","log","LN2","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","Bn","Pipe","stream","readBn","byt","isNegOne","encode","decode","webpackPolyfill","deprecate","paths","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","b64","placeHoldersCount","placeHolders","Arr","L","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","_bytesRead","_bytesWrote","bytesRead","bytesWrote","Stream","leb","nativeTypes","FUNC_TYPE","LANGUAGE_TYPES_STRG","anyref","actor","link","LANGUAGE_TYPES_BIN","127","126","125","124","112","111","110","109","108","107","106","95","EXTERNAL_KIND_BIN","0","1","2","3","EXTERNAL_KIND_STRG","table","memory","annotations","encodeCustomSection","encodeType","encodeTypeMap","encodePersist","json","encodingFunc","payload","decodePersist","numOfEntries","definition","decodeTypeMap","binEntries","decodeType","numberOfEntries","paramCount","injectCustomSection","custom","preramble","annotation","mergeTypeSections","mappedFuncs","mappedTypes","functions","imports","section","sectionName","forEach","typeIndex","funcIndex","newType","return_type","customIndex","field_str","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","evaluateConstantType","evaluateConstantOffset","tempLocal0","tempLocal1","alignLog2","fieldName","Type_0_has_no_property_1","Type_0_is_not_generic","abort","compileAbort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","_malloc","_free","move_memory","_memmove","HEAPU8","previousPrint","print","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","trunc","isTrueish","fromCodePoint","isInteger"],"mappings":"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IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__37__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 43);\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  Signature,\n\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  // ParameterNode,\n  // ParameterKind,\n  // SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ParameterKind,\n  SignatureNode,\n  VariableDeclaration\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n} from \"./module\";\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  isReExport: bool;\n  referencedName: string;\n  member: ExportMember;\n}\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  internalName: string;\n  referencedName: string;\n  referencedNameAlt: string;\n  declaration: ImportDeclaration;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n\n  /** Target expression of the previously resolved property or element access. */\n  resolvedThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  resolvedElementExpression : Expression | null = null;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedImports = new Array<QueuedImport>();\n    var queuedDerivedClasses = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\n      if (element) {\n        this.elementsLookup.set(queuedImport.internalName, element);\n        queuedImports.splice(i, 1);\n      } else {\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\n          this.elementsLookup.set(queuedImport.internalName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            queuedImport.declaration.range,\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\n            queuedImport.declaration.externalName.text\n          );\n          ++i;\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.referencedName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let derived = this.resolveIdentifier(derivedType.name, null); // reports\n      if (!derived) continue;\n      if (derived.kind == ElementKind.CLASS_PROTOTYPE) {\n        queuedDerivedClasses[i].basePrototype = <ClassPrototype>derived;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\n        if (element) this.elementsLookup.set(alias, element);\n      }\n    }\n\n    // register array\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register string\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    referencedName: string,\n    queuedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(referencedName)) return element;\n      let queuedExport = queuedExports.get(referencedName);\n      if (!queuedExport) return null;\n      if (queuedExport.isReExport) {\n        referencedName = queuedExport.referencedName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.referencedName);\n    } while (true);\n  }\n\n  /** Processes global options, if present. */\n  private checkGlobalOptions(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      element.is(CommonFlags.GLOBAL) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let simpleName = declaration.name.text;\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        element.set(CommonFlags.GLOBAL);\n        this.elementsLookup.set(simpleName, element);\n        if (element.is(CommonFlags.BUILTIN)) {\n          element.internalName = simpleName;\n        }\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedDerivedClasses: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration\n    );\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.is(CommonFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Structs_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) {\n      queuedDerivedClasses.push(prototype);\n    }\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\n        if (prototype.is(CommonFlags.EXPORT)) {\n          prototype.set(CommonFlags.MODULE_EXPORT);\n        }\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration\n      );\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperators(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    // handle operator annotations. operators are either instance methods taking\n    // a second argument of the instance's type or static methods taking two\n    // arguments of the instance's type. return values vary depending on the\n    // operation.\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              decorator.range\n            );\n            continue;\n          }\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\n          if (numArgs == 1) {\n            let firstArg = (<Expression[]>decorator.arguments)[0];\n            if (\n              firstArg.kind == NodeKind.LITERAL &&\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n            ) {\n              switch ((<StringLiteralExpression>firstArg).value) {\n                case \"[]\": {\n                  classPrototype.fnIndexedGet = prototype.simpleName;\n                  break;\n                }\n                case \"[]=\": {\n                  classPrototype.fnIndexedSet = prototype.simpleName;\n                  break;\n                }\n                case \"+\": {\n                  classPrototype.fnConcat = prototype.simpleName;\n                  break;\n                }\n                case \"-\": {\n                  classPrototype.fnSubtract = prototype.simpleName;\n                  break;\n                }\n                case \"*\": {\n                  classPrototype.fnMultiply = prototype.simpleName;\n                  break;\n                }\n                case \"/\": {\n                  classPrototype.fnDivide = prototype.simpleName;\n                  break;\n                }\n                case \"%\": {\n                  classPrototype.fnFractional = prototype.simpleName;\n                  break;\n                }\n                case \"&\": {\n                  classPrototype.fnBitwiseAnd = prototype.simpleName;\n                  break;\n                }\n                case \"|\": {\n                  classPrototype.fnBitwiseOr = prototype.simpleName;\n                  break;\n                }\n                case \"^\": {\n                  classPrototype.fnBitwiseXor = prototype.simpleName;\n                  break;\n                }\n                case \"==\": {\n                  classPrototype.fnEquals = prototype.simpleName;\n                  break;\n                }\n                case \"!=\": {\n                  classPrototype.fnNotEquals = prototype.simpleName;\n                  break;\n                }\n                case \">\": {\n                  classPrototype.fnGreaterThan = prototype.simpleName;\n                  break;\n                }\n                case \">=\": {\n                  classPrototype.fnGreaterThanEquals = prototype.simpleName;\n                  break;\n                }\n                case \"<\": {\n                  classPrototype.fnLessThan = prototype.simpleName;\n                  break;\n                }\n                case \"<=\": {\n                  classPrototype.fnLessThanEquals = prototype.simpleName;\n                  break;\n                }\n                default: {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                }\n              }\n            } else {\n              this.error(\n                DiagnosticCode.String_literal_expected,\n                firstArg.range\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"1\", numArgs.toString(0)\n            );\n          }\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\n          // methods support built-in @operator only\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            decorator.range\n          );\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.namespace = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobalOptions(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (isModuleExport) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    name: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    this.fileLevelExports.set(name, element);\n    if (identifier.range.source.isLibrary) { // add global alias\n      if (this.elementsLookup.has(identifier.text)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, identifier.text\n        );\n      } else {\n        element.internalName = identifier.text;\n        this.elementsLookup.set(identifier.text, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.referencedName = referencedName; // -> internal name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.referencedName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.referencedName = referencedName; // -> export name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null\n    );\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) {\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        statement.namespaceName.text\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n      this.error( // TODO\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(referencedName)) {\n      this.elementsLookup.set(internalName, element);\n      return;\n    }\n\n    // otherwise queue it\n    var indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.internalName = internalName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration;\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\n    prototype.namespace = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtendingClasses: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.namespace = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobalOptions(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, namespace);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration\n      );\n      global.namespace = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(internalName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(internalName, global);\n        }\n      }\n      this.checkGlobalOptions(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameterTypes;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return Type.u32.asFunction(signature);\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n\n    // check file-global / program-global element\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          return instance ? instance.type : null;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    contextualFunction: Function | null,\n    contextualEnum: Enum | null = null\n  ): Element | null {\n    var name = identifier.text;\n\n    var element: Element | null;\n    var namespace: Element | null;\n\n    // check siblings\n    if (contextualEnum) {\n\n      if (\n        contextualEnum.members &&\n        (element = contextualEnum.members.get(name)) &&\n        element.kind == ElementKind.ENUMVALUE\n      ) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // ENUMVALUE\n      }\n\n    } else if (contextualFunction) {\n\n      // check locals\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // LOCAL\n      }\n\n      // check outer scope locals\n      // let outerScope = contextualFunction.outerScope;\n      // while (outerScope) {\n      //   if (element = outerScope.getScopedLocal(name)) {\n      //     let scopedLocal = <Local>element;\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\n      //     return resolvedElement.set(scopedGlobal);\n      //   }\n      //   outerScope = outerScope.currentFunction.outerScope;\n      // }\n\n      // search contextual parent namespaces if applicable\n      if (namespace = contextualFunction.prototype.namespace) {\n        do {\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element; // LOCAL\n          }\n        } while (namespace = namespace.namespace);\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\n          if (indexedGetPrototype) {\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n            if (!indexedGetInstance) return null;\n            let classReference = indexedGetInstance.signature.returnType.classReference;\n            if (!classReference) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n              return null;\n            }\n            target = classReference;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        let member: Element | null;\n        if (members && (member = members.get(propertyName))) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = null;\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGetPrototype = (<Class>target).getIndexedGet();\n        if (indexedGetPrototype) {\n          let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n          if (!indexedGetInstance) return null;\n          let returnType = indexedGetInstance.signature.returnType;\n          if (target = returnType.classReference) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      targetExpression.range\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        let parent = contextualFunction.memberOf;\n        if (parent) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        let parent = contextualFunction.memberOf;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.resolvedThisExpression = expression;\n            this.resolvedElementExpression = null;\n            return this.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            targetExpression.range, target.internalName\n          );\n          return null;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE\n}\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Internal decorators\n\n  /** Is global. */\n  GLOBAL = 1 << 13,\n  /** Is built-in. */\n  BUILTIN = 1 << 14,\n  /** Is unmanaged. */\n  UNMANAGED = 1 << 15,\n  /** Is sealed. */\n  SEALED = 1 << 16,\n\n  // Extended modifiers usually derived from basic modifiers or internal decorators\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 17,\n  /** Is generic. */\n  GENERIC = 1 << 18,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 19,\n  /** Is an instance member. */\n  INSTANCE = 1 << 20,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 21,\n  /** Is an arrow function. */\n  ARROW = 1 << 22,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 23,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 24,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 25,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 26,\n  /** Is scoped. */\n  SCOPED = 1 << 27,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 28\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent namespace, if applicable. */\n  namespace: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** A namespace. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Parent enum. */\n  enum: Enum;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.enum = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(lo: i32, hi: i32): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = i64_new(lo, hi);\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameterTypes;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(this.classPrototype);\n\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\n\n    var simpleName = this.simpleName;\n    var partialKey = typesToString(classTypeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      this.declaration,\n      classPrototype\n    );\n    partialPrototype.flags = this.flags;\n    partialPrototype.classTypeArguments = classTypeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\n  memberOf: Element | null;\n  /** Map of locals by name. */\n  locals: Map<string,Local> = new Map();\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] | null = null;\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    memberOf: Element | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.memberOf = memberOf;\n    this.flags = prototype.flags;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        this.locals.set(\n          \"this\",\n          new Local(\n            prototype.program,\n            \"this\",\n            localIndex++,\n            assert(signature.thisType)\n          )\n        );\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\n        if (contextualTypeArguments) {\n          if (!this.contextualTypeArguments) {\n            this.contextualTypeArguments = new Map();\n          }\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        this.locals.set(\n          parameterName,\n          new Local(\n            prototype.program,\n            parameterName,\n            localIndex++,\n            parameterType\n            // FIXME: declaration?\n          )\n        );\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\n      this.locals.set(name, local);\n    }\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    if (temps && temps.length) {\n      let ret = temps.pop();\n      ret.type = type;\n      return ret;\n    }\n    return this.addLocal(type);\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    if (temps.length > 0) {\n      return temps[temps.length - 1];\n    }\n    var local: Local = this.addLocal(type);\n    temps.push(local);\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) {\n      this.breakStack = [ id ];\n    } else {\n      this.breakStack.push(id);\n    }\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      if (debugLocations) {\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\n          let debugLocation = debugLocations[i];\n          module.setDebugLocation(\n            ref,\n            debugLocation.debugInfoRef,\n            debugLocation.source.debugInfoIndex,\n            debugLocation.line,\n            debugLocation.column\n          );\n        }\n      }\n    }\n    this.debugLocations = null;\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n\n  /** Overloaded indexed get method, if any. */\n  fnIndexedGet: string | null = null;\n  /** Overloaded indexed set method, if any. */\n  fnIndexedSet: string | null = null;\n  /** Overloaded concatenation method, if any. */\n  fnConcat: string | null = null;\n  /** Overloaded subtraction method, if any. */\n  fnSubtract: string | null = null;\n  /** Overloaded multiply method, if any. */\n  fnMultiply: string | null = null;\n  /** Overloaded divide method, if any. */\n  fnDivide: string | null = null;\n  /** Overloaded fractional method, if any. */\n  fnFractional: string | null = null;\n  /** Overloaded bitwise and method, if any. */\n  fnBitwiseAnd: string | null = null;\n  /** Overloaded bitwise or method, if any. */\n  fnBitwiseOr: string | null = null;\n  /** Overloaded bitwise xor method, if any. */\n  fnBitwiseXor: string | null = null;\n  /** Overloaded equality comparison method, if any. */\n  fnEquals: string | null = null;\n  /** Overloaded non-equality comparison method, if any. */\n  fnNotEquals: string | null = null;\n  /** Overloaded greater comparison method, if any. */\n  fnGreaterThan: string | null = null;\n  /** Overloaded greater or equal comparison method, if any. */\n  fnGreaterThanEquals: string | null = null;\n  /** Overloaded less comparison method, if any. */\n  fnLessThan: string | null = null;\n  /** Overloaded less or equal comparison method, if any. */\n  fnLessThanEquals: string | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.is(CommonFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var simpleName = this.simpleName;\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\n    }\n\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (fieldType) {\n              let fieldInstance = new Field(\n                <FieldPrototype>member,\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n                fieldType,\n                fieldDeclaration\n              );\n              switch (fieldType.byteSize) { // align\n                case 1: break;\n                case 2: {\n                  if (memoryOffset & 1) ++memoryOffset;\n                  break;\n                }\n                case 4: {\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                  break;\n                }\n                case 8: {\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                  break;\n                }\n                default: assert(false);\n              }\n              fieldInstance.memoryOffset = memoryOffset;\n              memoryOffset += fieldType.byteSize;\n              instance.members.set(member.simpleName, fieldInstance);\n            }\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\n            if (!instance.members) instance.members = new Map();\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (methodPrototype) {\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\n              instance.members.set(member.simpleName, methodPrototype);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      if (base.contextualTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) {\n        return true;\n      }\n    } while (current = current.base);\n    return false;\n  }\n\n  getIndexedGet(): FunctionPrototype | null {\n    var members = this.members;\n    var name = this.prototype.fnIndexedGet;\n    if (!members || name == null) return null;\n    var element = members.get(name);\n    if (!element || element.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return <FunctionPrototype>element;\n  }\n\n  getIndexedSet(): FunctionPrototype | null {\n    var members = this.members;\n    var name = this.prototype.fnIndexedSet;\n    if (!members || name == null) return null;\n    var element = members.get(name);\n    if (!element || element.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return <FunctionPrototype>element;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration\n  ) {\n    super(program, simpleName, internalName, declaration);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always throws. */\n  THROWS = 1 << 1,\n  /** This branch always breaks. */\n  BREAKS = 1 << 2,\n  /** This branch always continues. */\n  CONTINUES = 1 << 3,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 4,\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 5,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 6,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 7,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 8,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 9\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Scoped global variables. */\n  // scopedGlobals: Map<Local,Global> | null = null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Enters a new branch or scope and returns the new flow. */\n  enterBranchOrScope(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    return branch;\n  }\n\n  /** Leaves the current branch or scope and returns the parent flow. */\n  leaveBranchOrScope(): Flow {\n    var parent = assert(this.parent);\n\n    // Free block-scoped locals\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        this.currentFunction.freeTempLocal(scopedLocal);\n      }\n      this.scopedLocals = null;\n    }\n\n    // Propagate flags to parent\n    if (this.is(FlowFlags.RETURNS)) {\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (this.is(FlowFlags.THROWS)) {\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (this.is(FlowFlags.ALLOCATES)) {\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, declaration: VariableDeclaration): void {\n    var scopedLocal = this.currentFunction.getTempLocal(type);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else if (this.scopedLocals.has(name)) {\n      this.currentFunction.program.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range\n      );\n      return;\n    }\n    this.scopedLocals.set(name, scopedLocal);\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.locals.get(name);\n  }\n\n  /** Adds a scoped global for an outer scoped local. */\n  // addScopedGlobal(scopedLocal: Local): Global {\n  //   var scopedGlobals = this.scopedGlobals;\n  //   var scopedGlobal: Global | null;\n  //   if (!scopedGlobals) {\n  //     this.scopedGlobals = scopedGlobals = new Map();\n  //   } else {\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\n  //     if (scopedGlobal) return scopedGlobal;\n  //   }\n  //   scopedGlobal = new Global(\n  //     scopedLocal.program,\n  //     scopedLocal.simpleName,\n  //     this.currentFunction.internalName + INNER_DELIMITER + scopedLocal.internalName,\n  //     scopedLocal.type,\n  //     assert(scopedLocal.declaration)\n  //   );\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\n  //   return scopedGlobal;\n  // }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null, \"must be the topmost parent flow\");\n    this.continueLabel = null;\n    this.breakLabel = null;\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\n    start--;\n  }\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\n    end++;\n  }\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nimport {\n  encodeAndInject\n} from \"primea-annotations\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64()\n\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n  out: usize;\n  globalsCount: i32 = 0;\n  persistentGlobals: Map<i32, string> = new Map();\n  funcsCount: i32 = 0;\n  customTypeMap: Map<string, i32[]> = new Map();\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.out = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.out;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocI32Array(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocI32Array(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocI32Array(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef,\n    persistentType: string | null = null\n  ): GlobalRef {\n    var cStr = allocString(name);\n    if (persistentType) {\n      this.persistentGlobals.set(this.globalsCount, persistentType);\n    }\n    this.globalsCount++;\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef,\n    customType: string | null = null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    if (customType) {\n      this.customTypeMap.set(customType, (this.customTypeMap.get(customType) || []).concat([this.funcsCount]));\n    }\n    if (name !== \"__precompute\") {\n      this.funcsCount++;\n    }\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocI32Array(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    // Primea custom section - persistent globals, func types, etc\n    let customJSON: {\n      persist?: Array<any>;\n      types?: Array<any>;\n      typeMap?: Array<any>;\n    } = {};\n\n    if (this.persistentGlobals.size > 0) {\n      customJSON.persist = [];\n      for (let index of this.persistentGlobals.keys()) {\n        customJSON.persist.push({\n          form: \"global\",\n          index,\n          type: this.persistentGlobals.get(index)\n        });\n      }\n    }\n\n    if (this.customTypeMap.size > 0) {\n      customJSON.types = [];\n      customJSON.typeMap = [];\n      let typeIndex: i32 = 0;\n\n      for (let paramString of this.customTypeMap.keys()) {\n        customJSON.types.push({\n          form: \"func\",\n          params: paramString.split(',')\n        });\n        let funcs = this.customTypeMap.get(paramString) || [];\n        customJSON.typeMap = customJSON.typeMap.concat(\n          funcs.map((func: i32) => ({\n            func,\n            type: typeIndex\n          }))\n        );\n        typeIndex++;\n      }\n    }\n\n    var out = this.out;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = encodeAndInject(customJSON, readBuffer(binaryPtr, binaryBytes));\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    if (!this.ref) return; // sic\n    _BinaryenModuleDispose(this.ref);\n    free_memory(this.out);\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenLoadIsAtomic(expr)\n          ? _BinaryenAtomicLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadGetOffset(expr),\n              _BinaryenExpressionGetType(expr),\n              nested1\n            )\n          : _BinaryenLoad(this.ref,\n              _BinaryenLoadGetBytes(expr),\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\n              _BinaryenLoadGetOffset(expr),\n               _BinaryenLoadGetAlign(expr),\n               _BinaryenExpressionGetType(expr),\n               nested1\n            );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n      return relooper;\n  }\n\n  static createStub(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = 0;\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameterTypes = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    expression: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = expression; expression.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    if (expression.kind == NodeKind.IDENTIFIER) {\n      switch ((<IdentifierExpression>expression).text) {\n        case \"global\": {\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\n          break;\n        }\n        case \"operator\": {\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\n          break;\n        }\n        case \"unmanaged\": {\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\n          break;\n        }\n        case \"offset\": {\n          stmt.decoratorKind = DecoratorKind.OFFSET;\n          break;\n        }\n        case \"persistent\": {\n          stmt.decoratorKind = DecoratorKind.PERSISTENT;\n          break;\n        }\n        case \"type\": {\n          stmt.decoratorKind = DecoratorKind.FUNCTION_TYPE;\n          break;\n        }\n        default: {\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\n          break;\n        }\n      }\n    } else {\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\n    }\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[],\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameterTypes: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  UNMANAGED,\n  OFFSET,\n  PERSISTENT,\n  FUNCTION_TYPE\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    this.internalPath = mangleInternalPath(this.normalizedPath);\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members. */\n  members: ExportMember[];\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Gets the first decorator by name within at set of decorators, if present. */\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let expression = decorator.name;\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\n        return decorator;\n      }\n    }\n  }\n  return null;\n}\n\n/** Tests if a specific decorator is present within the specified decorators. */\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\n  return getFirstDecorator(name, decorators) != null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport function tokenFomKeyword(text: string): Token {\n  switch (text) {\n    case \"abstract\": return Token.ABSTRACT;\n    case \"as\": return Token.AS;\n    case \"async\": return Token.ASYNC;\n    case \"await\": return Token.AWAIT;\n    case \"break\": return Token.BREAK;\n    case \"case\": return Token.CASE;\n    case \"catch\": return Token.CATCH;\n    case \"class\": return Token.CLASS;\n    case \"continue\": return Token.CONTINUE;\n    case \"const\": return Token.CONST;\n    case \"constructor\": return Token.CONSTRUCTOR;\n    case \"debugger\": return Token.DEBUGGER;\n    case \"declare\": return Token.DECLARE;\n    case \"default\": return Token.DEFAULT;\n    case \"delete\": return Token.DELETE;\n    case \"do\": return Token.DO;\n    case \"else\": return Token.ELSE;\n    case \"enum\": return Token.ENUM;\n    case \"export\": return Token.EXPORT;\n    case \"extends\": return Token.EXTENDS;\n    case \"false\": return Token.FALSE;\n    case \"finally\": return Token.FINALLY;\n    case \"for\": return Token.FOR;\n    case \"from\": return Token.FROM;\n    case \"function\": return Token.FUNCTION;\n    case \"get\": return Token.GET;\n    case \"if\": return Token.IF;\n    case \"implements\": return Token.IMPLEMENTS;\n    case \"import\": return Token.IMPORT;\n    case \"in\": return Token.IN;\n    case \"instanceof\": return Token.INSTANCEOF;\n    case \"interface\": return Token.INTERFACE;\n    case \"is\": return Token.IS;\n    case \"keyof\": return Token.KEYOF;\n    case \"let\": return Token.LET;\n    case \"module\": return Token.MODULE;\n    case \"namespace\": return Token.NAMESPACE;\n    case \"new\": return Token.NEW;\n    case \"null\": return Token.NULL;\n    case \"of\": return Token.OF;\n    case \"package\": return Token.PACKAGE;\n    case \"private\": return Token.PRIVATE;\n    case \"protected\": return Token.PROTECTED;\n    case \"public\": return Token.PUBLIC;\n    case \"readonly\": return Token.READONLY;\n    case \"return\": return Token.RETURN;\n    case \"set\": return Token.SET;\n    case \"static\": return Token.STATIC;\n    case \"super\": return Token.SUPER;\n    case \"switch\": return Token.SWITCH;\n    case \"this\": return Token.THIS;\n    case \"throw\": return Token.THROW;\n    case \"true\": return Token.TRUE;\n    case \"try\": return Token.TRY;\n    case \"type\": return Token.TYPE;\n    case \"typeof\": return Token.TYPEOF;\n    case \"var\": return Token.VAR;\n    case \"void\": return Token.VOID;\n    case \"while\": return Token.WHILE;\n    case \"with\": return Token.WITH;\n    case \"yield\": return Token.YIELD;\n    default: return Token.INVALID;\n  }\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(preferIdentifier: bool = false): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(preferIdentifier);\n  }\n\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFomKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    preferIdentifier: bool = false,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skip(token: Token): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n    reusableState = state;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if (c < CharCode._0 || c > CharCode._9) break;\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a sized integer type with a target specific bit size. */\n  SIZE = 1 << 4,\n  /** Is a small type that is emulated in a larger type. */\n  SMALL = 1 << 5,\n  /** Is a long type larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. Ceiled to 8-bits. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying function reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective nullable type, if non-nullable. */\n  nullableType: Type | null = null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    return ~0 >>> (targetType.size - this.size);\n  }\n\n  /** Tests if this type has the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.nullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.nullableType.classReference = this.classReference;       // either a class reference\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.nullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (currentClass = this.classReference) {\n          if (targetClass = target.classReference) {\n            return currentClass.isAssignableTo(targetClass);\n          }\n        } else if (currentFunction = this.signatureReference) {\n          if (targetFunction = target.signatureReference) {\n            return currentFunction.isAssignableTo(targetFunction);\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) {\n      return left;\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\n      return right;\n    }\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: {\n        let functionType = this.signatureReference;\n        return kindOnly || !functionType\n          ? \"u32\"\n          : functionType.toString(true);\n      }\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: {\n        let classType = this.classReference;\n        return kindOnly || !classType\n          ? \"usize\"\n          : classType.toString();\n      }\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.SIZE     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SMALL    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    ret[i] = types[i].toNativeType();\n  }\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    sb[i] = types[i].toString();\n  }\n  return sb.join(\", \");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getGenericParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\n        return false;\n      }\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) {\n      return false; // TODO\n    }\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) {\n      return false;\n    }\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\n        return false;\n      }\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    var sb = [];\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(thisType.toSignatureString());\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(this.returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) {\n          sb.push((<string[]>names)[i]);\n        } else {\n          sb.push(getGenericParameterName(i));\n        }\n        if (i >= optionalStart && i != restIndex) {\n          sb.push(\"?: \");\n        } else {\n          sb.push(\": \");\n        }\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached generic parameter names used where names are unknown.\nvar cachedGenericParameterNames: string[] | null = null;\n\n/** Gets the cached generic parameter name for the specified index. */\nexport function getGenericParameterName(index: i32): string {\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedGenericParameterNames[index - 1];\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileGetConstant as compileBuiltinGetConstant,\n  compileAllocate as compileBuiltinAllocate\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef\n} from \"./module\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  CommonFlags,\n  ConstantValueKind,\n  Flow,\n\n  PATH_DELIMITER,\n  INNER_DELIMITER\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  hasDecorator,\n  getFirstDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, does not set up a memory. */\n  noMemory: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Outer function in compilation, if compiling a function expression. */\n  outerFunction: Function | null = null;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunction: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[] = [];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = new Array();\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = new Array();\n  /** Argument count helper global. */\n  argumentCountRef: GlobalRef = 0;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function wrapping top-level statements, of all files.\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var startFunctionInstance = new Function(\n      <FunctionPrototype>startFunctionPrototype,\n      startFunctionPrototype.internalName,\n      new Signature([], Type.void)\n    );\n    this.startFunction = startFunctionInstance;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing to reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) {\n        this.compileSource(sources[i]);\n      }\n    }\n\n    // compile the start function if not empty\n    var startFunctionBody = this.startFunctionBody;\n    if (startFunctionBody.length) {\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        typeRef,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    if (!options.noMemory) {\n      let memoryOffset = this.memoryOffset;\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n      this.memoryOffset = memoryOffset;\n      if (options.isWasm64) {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I64,\n          false,\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I32,\n          false,\n          module.createI32(i64_low(memoryOffset))\n        );\n      }\n\n      // determine initial page size\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\n      module.setMemory(\n        i64_low(pages),\n        this.options.isWasm64\n          ? Module.MAX_MEMORY_WASM64\n          : Module.MAX_MEMORY_WASM32,\n        this.memorySegments,\n        options.target,\n        \"memory\"\n      );\n    }\n\n    // import memory if requested\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (!source) {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileSource(source);\n  }\n\n  compileSource(source: Source): void {\n     if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunction = this.startFunction;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunction;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.program.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            Type.void,\n            ConversionKind.NONE\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        module.addGlobalImport(\n          global.internalName,\n          global.namespace\n            ? global.namespace.simpleName\n            : \"env\",\n          global.simpleName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(declaration.initializer, global.type);\n        }\n\n        // check if the initializer is constant\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n    let persistentType\n    if (declaration) {\n      const persistentDecorator = getFirstDecorator(\"persistent\", declaration.decorators);\n      if (persistentDecorator != null && persistentDecorator.arguments && persistentDecorator.arguments.length > 0) {\n        persistentType = (persistentDecorator.arguments[0] as IdentifierExpression).text;\n      }\n    }\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module), persistentType);\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = _BinaryenExpressionGetType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              _BinaryenConstGetValueI64Low(initExpr),\n              _BinaryenConstGetValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              assert(global.declaration).range\n            );\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(0);\n            break;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (declaration) {\n          if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\n            module.addGlobal(internalName, nativeType, false, initExpr, persistentType);\n          }\n          if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\n            module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\n          }\n        } else {\n          assert(false); // must have a declaration if constant\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr, persistentType);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                valueDeclaration.range\n              );\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\n          if (member.is(CommonFlags.INLINED)) {\n            module.addGlobalExport(member.internalName, member.internalName);\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null;\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    var thisType = signature.thisType;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    for (let i = 0; i < numParameters; ++i, ++index) {\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\n    }\n    var resultType = signature.returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching but still compile as-is\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var typeRef = this.ensureFunctionType(instance.signature);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType: Type = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\n        flow.set(FlowFlags.RETURNS);\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        stmt = this.compileStatement(body);\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createGetLocal(0, nativeSizeType)\n              ], nativeSizeType);\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.memberOf);\n              assert(parent.kind == ElementKind.CLASS);\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createTeeLocal(0,\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\n                )\n              ], nativeSizeType);\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n      }\n      this.currentFunction = previousFunction;\n\n      const customTypeDecorator = getFirstDecorator(\"type\", declaration.decorators);\n      let customTypes\n      if (customTypeDecorator != null && customTypeDecorator.arguments && customTypeDecorator.arguments.length > 0) {\n        customTypes = customTypeDecorator.arguments.map((expr: IdentifierExpression) => expr.text).join(',')\n      }\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt,\n        customTypes\n      );\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n\n      // create the function import\n      let namespace = instance.prototype.namespace;\n      ref = module.addFunctionImport(\n        instance.internalName,\n        namespace\n          ? namespace.simpleName\n          : \"env\",\n        instance.simpleName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\n      module.addFunctionExport(instance.internalName, declaration.name.text);\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: {\n          assert(false);\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            member.range\n          );\n          break;\n        }\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var exports = this.program.fileLevelExports;\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = exports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        expr = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        expr = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        expr = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        expr = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        expr = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        expr = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        expr = this.compileVariableStatement(<VariableStatement>statement);\n        if (!expr) expr = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        expr = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        expr = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunction) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        assert(false);\n        expr = module.createUnreachable();\n        break;\n      }\n    }\n    if (this.options.sourceMap) {\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\n    }\n    return expr;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    for (let i = 0; i < numStatements; ++i) {\n      stmts[i] = this.compileStatement(statements[i]);\n    }\n    return stmts; // array of 0-es in noEmit-mode\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\n    // statement, but that's not what the source told us to do and left to the\n    // optimizer.\n\n    // Not actually a branch, but can contain its own scoped variables.\n    var flow = this.currentFunction.flow.enterBranchOrScope();\n    this.currentFunction.flow = flow;\n\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\n    var stmtThrows = flow.is(FlowFlags.THROWS);\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\n\n    // Switch back to the parent flow\n    flow = flow.leaveBranchOrScope();\n    this.currentFunction.flow = flow;\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n\n    // A do statement does not initiate a new branch because it is executed at\n    // least once, but has its own break and continue labels.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow;\n    var previousBreakLabel = flow.breakLabel;\n    var previousContinueLabel = flow.continueLabel;\n\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n\n    // Reset to the previous break and continue labels, if any.\n    flow.breakLabel = previousBreakLabel;\n    flow.continueLabel = previousContinueLabel;\n\n    var module = this.module;\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\n\n    this.currentFunction.leaveBreakContext();\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createBlock(null, [\n          body,\n          module.createBreak(continueLabel, condExpr)\n        ], NativeType.None))\n    ], NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var context = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + context;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + context;\n    flow.continueLabel = continueLabel;\n\n    // Compile in correct order\n    var module = this.module;\n    var initializer = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : module.createNop();\n    var condition = statement.condition\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\n      : module.createI32(1);\n    var incrementor = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\n      : module.createNop();\n    var body = this.compileStatement(statement.statement);\n\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\n    // TODO: check other always-true conditions as well, not just omitted\n\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      initializer,\n      module.createLoop(continueLabel, module.createBlock(null, [\n        module.createIf(condition, module.createBlock(null, [\n          body,\n          incrementor,\n          module.createBreak(continueLabel)\n        ], NativeType.None))\n      ], NativeType.None))\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, append a hint\n    if (alwaysReturns || alwaysThrows) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      let ret: ExpressionRef;\n      if (_BinaryenConstGetValueI32(condExpr)) {\n        ret = this.compileStatement(ifTrue);\n      } else if (ifFalse) {\n        ret = this.compileStatement(ifFalse);\n      } else {\n        ret = module.createNop();\n      }\n      return ret;\n    }\n\n    // Each arm initiates a branch\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\n    flow = flow.leaveBranchOrScope();\n    currentFunction.flow = flow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    var ifFalseReturns = false;\n    var ifFalseThrows = false;\n    var ifFalseAllocates = false;\n    if (ifFalse) {\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n    }\n\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var expression: ExpressionRef = 0;\n    if (statement.value) {\n      expression = this.compileExpression(\n        statement.value,\n        currentFunction.signature.returnType\n      );\n    }\n\n    // Remember that this flow returns\n    currentFunction.flow.set(FlowFlags.RETURNS);\n\n    return this.module.createReturn(expression);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n    var cases = statement.cases;\n    var numCases = cases.length;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.i32)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n      let body = new Array<ExpressionRef>(1 + numStatements);\n      body[0] = currentBlock;\n\n      // Each switch case initiates a new branch\n      let flow = currentFunction.flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let fallsThrough = i != numCases - 1;\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      for (let j = 0; j < numStatements; ++j) {\n        body[j + 1] = this.compileStatement(statements[j]);\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\n        alwaysReturns = false; // ignore fall-throughs\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\n        alwaysThrows = false;\n      }\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\n        alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      currentFunction.flow = flow.leaveBranchOrScope();\n\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default and always returns, propagate that\n    if (defaultIndex >= 0) {\n      let flow = currentFunction.flow;\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return this.module.createUnreachable();\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunction &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let init: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          currentFunction.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          init = this.compileExpression(declaration.initializer, type); // reports\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        init = this.compileExpression( // reports\n          declaration.initializer,\n          Type.void,\n          ConversionKind.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (init) {\n          init = this.precomputeExpressionRef(init);\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (_BinaryenExpressionGetType(init)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  _BinaryenConstGetValueI64Low(init),\n                  _BinaryenConstGetValueI64High(init)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\n                break;\n              }\n              default: {\n                assert(false);\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  declaration.range\n                );\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        if (declaration.isAny(CommonFlags.LET | CommonFlags.CONST)) { // here: not top-level\n          currentFunction.flow.addScopedLocal(type, name, declaration); // reports\n        } else {\n          currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (init) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\n      this.currentType,\n      module\n    );\n\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      if (!_BinaryenConstGetValueI32(condExpr)) {\n        return module.createNop();\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\n    // TODO: evaluate if condition is always true\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr, module.createBlock(null, [\n          body,\n          module.createBreak(continueLabel)\n        ], NativeType.None))\n      )\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, propagate that and append a hint\n    if (alwaysReturns) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      case TypeKind.F64: {\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(\n          <ParenthesizedExpression>expression,\n          contextualType,\n          wrapSmallIntegers\n        );\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n        break;\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\n      this.currentType = contextualType;\n    }\n\n    if (this.options.sourceMap) {\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\n    }\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapSmallIntegers\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\n    var typeRefAdded = false;\n    if (!typeRef) {\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\n      typeRefAdded = true;\n    }\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = _BinaryenFunctionGetBody(funcRef);\n    module.removeFunction(\"__precompute\");\n    if (typeRefAdded) {\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\n      // a `null` typeRef, using an implicit type.\n    }\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) {\n      return module.createDrop(expr);\n    }\n\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\n      this.error(\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n        reportNode.range, fromType.toString(), toType.toString()\n      ); // recoverable\n    }\n\n    // TODO: make this a proper switch?\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n              if (toType.is(TypeFlags.SMALL)) {\n                expr = makeSmallIntegerWrap(expr, toType, module);\n              }\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n          if (toType.is(TypeFlags.SMALL)) {\n            expr = makeSmallIntegerWrap(expr, toType, module);\n          }\n        }\n\n      // i32 to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\n\n      // i32 or smaller to even smaller or same size int with change of sign\n      } else if (\n        toType.is(TypeFlags.SMALL) &&\n        (\n          fromType.size > toType.size ||\n          (\n            fromType.size == toType.size &&\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\n          )\n        )\n      ) {\n        expr = makeSmallIntegerWrap(expr, toType, module);\n      }\n\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var condExpr: ExpressionRef;\n    var expr: ExpressionRef;\n    var compound = false;\n    var possiblyOverflows = false;\n    var tempLocal: Local | null = null;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnLessThan;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnGreaterThan;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnLessThanEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnGreaterThanEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload if operator is \"==\"\n            if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                assert(this.currentType == Type.bool);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {// check operator overload if operator is \"!=\"\n            if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnNotEquals;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnConcat;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnSubtract;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnMultiply;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // must be wrapped\n        );\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType == Type.f32) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType\n          );\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            left\n          );\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64\n          );\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // TODO: when can division remain unwrapped? does it overflow?\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: possiblyOverflows = true;\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnDivide;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // TODO: when can remainder remain unwrapped? does it overflow?\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnFractional;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false // ^\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // must wrap small integers\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          true // ^\n        );\n        switch (this.currentType.kind) {\n          default: {\n            // assumes signed shr on signed small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          true // modifies low bits of small integers if unsigned\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          true // ^\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: possiblyOverflows = true;\n          default: {\n            // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnBitwiseAnd;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnBitwiseOr;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType,\n          false // retains low bits of small integers\n        );\n        if (compound) {\n          rightExpr = this.compileExpression(\n            right,\n            this.currentType,\n            ConversionKind.IMPLICIT,\n            false // ^\n          );\n        } else {\n          leftType = this.currentType;\n          rightExpr = this.compileExpressionRetainType(\n            right,\n            leftType,\n            false // ^\n          );\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\n          default: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classInstance = assert(this.currentType.classReference);\n              let operatorName = classInstance.prototype.fnBitwiseXor;\n              if (operatorName != null) {\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\n                break;\n              }\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            expr = module.createUnreachable();\n            break;\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false\n        );\n\n        // clone left if free of side effects\n        expr = module.cloneExpression(leftExpr, true, 0);\n\n        // if not possible, tee left to a temp. local\n        if (!expr) {\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\n        }\n\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\n\n        // simplify when cloning left without side effects was successful\n        if (expr) {\n          expr = module.createIf(\n            condExpr,  // left\n            rightExpr, //   ? right\n            expr       //   : cloned left\n          );\n        }\n\n        // otherwise make use of the temp. local\n        else {\n          expr = module.createIf(\n            condExpr,\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(\n          left,\n          contextualType\n        );\n        rightExpr = this.compileExpression(\n          right,\n          this.currentType,\n          ConversionKind.IMPLICIT,\n          false\n        );\n\n        // clone left if free of side effects\n        expr = this.module.cloneExpression(leftExpr, true, 0);\n\n        // if not possible, tee left to a temp. local\n        if (!expr) {\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\n        }\n\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\n\n        // simplify when cloning left without side effects was successful\n        if (expr) {\n          expr = this.module.createIf(\n            condExpr, // left\n            expr,      //   ? cloned left\n            rightExpr      //   : right\n          );\n        }\n\n        // otherwise make use of the temp. local\n        else {\n          expr = module.createIf(\n            condExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n        break;\n      }\n    }\n    if (possiblyOverflows && wrapSmallIntegers) {\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileOperatorOverload(\n    classInstance: Class,\n    operatorName: string,\n    leftExpr: ExpressionRef,\n    rightExpr: ExpressionRef\n  ): ExpressionRef {\n    var classPrototype = classInstance.prototype;\n    var operatorPrototype = assert(assert(classPrototype.members).get(operatorName));\n    assert(operatorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var operatorInstance = (<FunctionPrototype>operatorPrototype).resolve();\n    if (!operatorInstance) return this.module.createUnreachable();\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ]);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var target = program.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var elementType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        elementType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>target).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          elementType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (program.resolvedElementExpression) { // indexed access\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\n          if (indexedGetPrototype) {\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n            if (!indexedGetInstance) return this.module.createUnreachable();\n            elementType = indexedGetInstance.signature.returnType;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.range, (<Class>target).toString()\n          );\n          return this.module.createUnreachable();\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    var valueExpr = this.compileExpression(valueExpression, elementType);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        this.currentType = tee ? (<Local>target).type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.program.resolvedThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (tee) {\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.size >> 3,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.size >> 3,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.program.resolvedThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.program.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\n          if (indexedGetPrototype) {\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n            if (!indexedGetInstance) return module.createUnreachable();\n            let indexedSetPrototype = (<Class>target).getIndexedSet();\n            if (!indexedSetPrototype) {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, target.internalName\n              );\n              this.currentType = tee ? indexedGetInstance.signature.returnType : Type.void;\n              return module.createUnreachable();\n            }\n            let indexedSetInstance = indexedSetPrototype.resolve(); // reports\n            if (!indexedSetInstance) return module.createUnreachable();\n            let targetType = (<Class>target).type;\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            let elementExpr = this.compileExpression(\n              elementExpression,\n              Type.i32\n            );\n            if (tee) {\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\n              let returnType = indexedGetInstance.signature.returnType;\n              this.currentFunction.freeTempLocal(tempLocalTarget);\n              return module.createBlock(null, [\n                this.makeCallDirect(indexedSetInstance, [\n                  module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\n                  valueWithCorrectType\n                ]),\n                this.makeCallDirect(indexedGetInstance, [\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n                ])\n              ], returnType.toNativeType());\n            } else {\n              return this.makeCallDirect(indexedSetInstance, [\n                thisExpr,\n                elementExpr,\n                valueWithCorrectType\n              ]);\n            }\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins are compiled on the fly\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          let expr = compileBuiltinCall( // reports\n            this,\n            prototype,\n            prototype.resolveBuiltinTypeArguments(\n              expression.typeArguments,\n              currentFunction.contextualTypeArguments\n            ),\n            expression.arguments,\n            contextualType,\n            expression\n          );\n          if (!expr) {\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n          return expr;\n\n        // otherwise compile to a call\n        } else {\n          let instance = prototype.resolveUsingTypeArguments( // reports\n            expression.typeArguments,\n            currentFunction.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return module.createUnreachable();\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            return this.compileCallDirect(instance, expression.arguments, expression, thisExpr);\n          } else {\n            // if static, resolvedThisExpression is the ClassPrototype\n            return this.compileCallDirect(instance, expression.arguments, expression);\n          }\n        }\n      }\n\n      // indirect call: index argument with signature\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type);\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i]\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"argumentCount\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"argumentCount\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      body = module.createBlock(names[i + 1], [\n        body,\n        module.createSetLocal(operandIndex,\n          this.compileExpression(\n            assert(originalParameterDeclarations[minArguments + i].initializer),\n            type\n          )\n        )\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var typeRef = this.ensureFunctionType(trampolineSignature);\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n      if (!isCallImport) { // call the trampoline\n        instance = this.ensureTrampoline(instance);\n        if (!this.compileFunction(instance)) return module.createUnreachable();\n        let nativeReturnType = returnType.toNativeType();\n        this.currentType = returnType;\n        return module.createBlock(null, [\n          this.ensureArgumentCount(numArguments),\n          module.createCall(instance.internalName, operands, nativeReturnType)\n        ], nativeReturnType);\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return isCallImport\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i]\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      this.ensureArgumentCount(numArguments), // might still be calling a trampoline\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType());\n  }\n\n  /** Makes sure that the `argumentCount` helper global is present and returns an expression that sets it. */\n  private ensureArgumentCount(argumentCount: i32): ExpressionRef {\n    var module = this.module;\n    if (!this.argumentCountRef) {\n      this.argumentCountRef = module.addGlobal(\n        \"argumentCount\",\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return module.createSetGlobal(\"argumentCount\", module.createI32(argumentCount));\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGetPrototype = (<Class>target).getIndexedGet();\n        if (!indexedGetPrototype) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let indexedGetInstance = indexedGetPrototype.resolve(); // reports\n        if (!indexedGetInstance) return this.module.createUnreachable();\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type);\n        return this.compileCallDirect(indexedGetInstance, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration\n    );\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      currentFunction.contextualTypeArguments,\n      currentFunction.flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let currentFunction = this.currentFunction;\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.memberOf);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            let flow = currentFunction.flow;\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                makeConditionalAllocate(this, <Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let currentFunction = this.currentFunction;\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.memberOf);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.program.resolveIdentifier( // reports\n      expression,\n      this.currentFunction,\n      this.currentEnum\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return compileBuiltinGetConstant(this, <Global>target, expression);\n        }\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>target).resolve(\n          null,\n          this.currentFunction.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileStaticArray(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayType) return module.createUnreachable();\n\n    var elementSize = expressions.length;\n    var nativeType = elementType.toNativeType();\n    var values: usize;\n    var memorySize: usize;\n    switch (nativeType) {\n      case NativeType.I32: {\n        values = changetype<usize>(new Int32Array(elementSize));\n        memorySize = elementSize * 4;\n        break;\n      }\n      case NativeType.I64: {\n        values = changetype<usize>(new Array<I64>(elementSize));\n        memorySize = elementSize * 8;\n        break;\n      }\n      case NativeType.F32: {\n        values = changetype<usize>(new Float32Array(elementSize));\n        memorySize = elementSize * 4;\n        break;\n      }\n      case NativeType.F64: {\n        values = changetype<usize>(new Float64Array(elementSize));\n        memorySize = elementSize * 8;\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // precompute value expressions\n    var exprs = new Array<ExpressionRef>(elementSize);\n    var expr: BinaryenExpressionRef;\n    for (let i = 0; i < elementSize; ++i) {\n      exprs[i] = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType)\n        : elementType.toNativeZero(module);\n      if (isStatic) {\n        expr = this.precomputeExpressionRef(exprs[i]);\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\n          switch (nativeType) {\n            case NativeType.I32: {\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\n              break;\n            }\n            case NativeType.I64: {\n              changetype<I64[]>(values)[i] = i64_new(\n                _BinaryenConstGetValueI64Low(expr),\n                _BinaryenConstGetValueI64High(expr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\n              break;\n            }\n            case NativeType.F64: {\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\n              break;\n            }\n            default: {\n              assert(false); // checked above\n            }\n          }\n        } else {\n          // TODO: emit a warning if declared 'const'\n          isStatic = false;\n        }\n      }\n    }\n\n    var usizeTypeSize = this.options.usizeType.byteSize;\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\n\n    if (isStatic) {\n      let buffer = new Uint8Array(headerSize + memorySize);\n      let segment = this.addMemorySegment(buffer);\n\n      // make header\n      let offset = 0;\n      if (usizeTypeSize == 8) {\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\n      } else {\n        assert(i64_high(segment.offset) == 0);\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\n      }\n      offset += usizeTypeSize;\n      writeI32(elementSize, buffer, offset); // capacity\n      offset += 4;\n      writeI32(elementSize, buffer, offset); // length\n      offset += 4;\n      assert(offset == headerSize);\n\n      // make memory\n      switch (nativeType) {\n        case NativeType.I32: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\n          }\n          break;\n        }\n        case NativeType.I64: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\n          }\n          break;\n        }\n        case NativeType.F32: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\n          }\n          break;\n        }\n        case NativeType.F64: {\n          for (let i = 0; i < elementSize; ++i) {\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\n          }\n          break;\n        }\n        default: {\n          assert(false);\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          return module.createUnreachable();\n        }\n      }\n      assert(offset == headerSize + memorySize);\n      this.currentType = arrayType.type;\n      return usizeTypeSize == 8\n        ? module.createI64(\n            i64_low(segment.offset),\n            i64_high(segment.offset)\n          )\n        : module.createI32(\n            i64_low(segment.offset)\n          );\n    } else {\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\n      // on top? any benefits?\n      throw new Error(\"not implemented\");\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\n      expression.typeArguments,\n      null,\n      expression\n    );\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the first matching constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance = classInstance.constructorInstance;\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\n      constructorInstance = currentClassInstance.constructorInstance;\n    }\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = makeAllocate(this, classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      wrapSmallIntegers\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return compileBuiltinGetConstant(this, <Global>target, propertyAccess);\n        }\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        if (!this.compileEnum((<EnumValue>target).enum)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(program.resolvedThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.size >> 3,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.memberOf);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = makeIsTrueish(\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\n      this.currentType,\n      this.module\n    );\n\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\n    if (\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\n    ) {\n      return _BinaryenConstGetValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var currentFunction = this.currentFunction;\n    var ifThenExpr: ExpressionRef;\n    var ifElseExpr: ExpressionRef;\n\n    // if part of a constructor, keep track of memory allocations\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let flow = currentFunction.flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // otherwise simplify\n    } else {\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\n    }\n\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      false // wrapped below\n    );\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\n      // shortcut if compiling the getter already failed\n      return getValue;\n    }\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n    var possiblyOverflows = false;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true;\n          default: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          case TypeKind.VOID: {\n            assert(false);\n            this.error(\n              DiagnosticCode.Operation_not_supported,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    var setValue: ExpressionRef;\n    var tempLocal: Local | null = null;\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      setValue = module.createBinary(op,\n        getValue,\n        nativeOne\n      );\n\n    // otherwise use a temp local for the intermediate value\n    } else {\n      tempLocal = currentFunction.getTempLocal(currentType);\n      setValue = module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      );\n    }\n\n    if (possiblyOverflows) {\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\n    }\n\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\n    // ^ sets currentType = void\n    if (contextualType == Type.void) {\n      assert(!tempLocal);\n      return setValue;\n    }\n\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType);\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    wrapSmallIntegers: bool = true\n  ): ExpressionRef {\n    var module = this.module;\n    var currentType = this.currentType;\n\n    var possiblyOverflows = false;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\n        break;\n      }\n      case Token.MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          if (this.options.sourceMap) {\n            // compileExpression normally does this\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\n          }\n          currentType = this.currentType;\n        } else {\n          expr = this.compileExpression(\n            expression.operand,\n            contextualType == Type.void\n              ? Type.i32\n              : contextualType,\n            ConversionKind.NONE,\n            false // wrapped below\n          );\n          currentType = this.currentType;\n          switch (currentType.kind) {\n            case TypeKind.I8:\n            case TypeKind.I16:\n            case TypeKind.U8:\n            case TypeKind.U16:\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n            default: {\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n              break;\n            }\n            case TypeKind.USIZE: {\n              if (currentType.is(TypeFlags.REFERENCE)) {\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  expression.range\n                );\n                return module.createUnreachable();\n              }\n              // fall-through\n            }\n            case TypeKind.ISIZE: {\n              expr = module.createBinary(\n                this.options.isWasm64\n                  ? BinaryOp.SubI64\n                  : BinaryOp.SubI32,\n                currentType.toNativeZero(module),\n                expr\n              );\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: {\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n              break;\n            }\n            case TypeKind.F32: {\n              expr = module.createUnary(UnaryOp.NegF32, expr);\n              break;\n            }\n            case TypeKind.F64: {\n              expr = module.createUnary(UnaryOp.NegF64, expr);\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          false // wrapped below\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          true // must wrap small integers\n        );\n        expr = makeIsFalseish(expr, this.currentType, module);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          contextualType == Type.void\n            ? ConversionKind.NONE\n            : ConversionKind.IMPLICIT,\n          false // retains low bits of small integers\n        );\n        currentType = this.currentType;\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\n          default: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        // it might make sense to implement typeof in a way that a generic function can detect\n        // whether its type argument is a class type or string. that could then be used, for\n        // example, to generate hash codes for sets and maps, depending on the kind of type\n        // parameter we have. ideally the comparison would not involve actual string comparison and\n        // limit available operations to hard-coded string literals.\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    if (possiblyOverflows && wrapSmallIntegers) {\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\n      expr = makeSmallIntegerWrap(expr, currentType, module);\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n}\n\n// helpers\n\n/** Adds the debug location of the specified expression at the specified range to the source map. */\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\n  var source = range.source;\n  if (source.debugInfoIndex < 0) {\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\n  }\n  range.debugInfoRef = expr;\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\n  currentFunction.debugLocations.push(range);\n}\n\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    case TypeKind.I8: {\n      return module.createBinary(BinaryOp.ShrI32,\n        module.createBinary(BinaryOp.ShlI32,\n          expr,\n          module.createI32(24)\n        ),\n        module.createI32(24)\n      );\n    }\n    case TypeKind.I16: {\n      return module.createBinary(BinaryOp.ShrI32,\n        module.createBinary(BinaryOp.ShlI32,\n          expr,\n          module.createI32(16)\n        ),\n        module.createI32(16)\n      );\n    }\n    case TypeKind.U8: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0xff)\n      );\n    }\n    case TypeKind.U16: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0xffff)\n      );\n    }\n    case TypeKind.BOOL: {\n      return module.createBinary(BinaryOp.AndI32,\n        expr,\n        module.createI32(0x1)\n      );\n    }\n    default: {\n      assert(false);\n      return expr;\n    }\n  }\n}\n\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    default: { // any native i32\n      return module.createUnary(UnaryOp.EqzI32, expr);\n    }\n    case TypeKind.I64:\n    case TypeKind.U64: {\n      return module.createUnary(UnaryOp.EqzI64, expr);\n    }\n    case TypeKind.USIZE: // TODO: strings?\n    case TypeKind.ISIZE: {\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n    }\n    case TypeKind.F32: {\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n    }\n    case TypeKind.F64: {\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n    }\n    case TypeKind.VOID: {\n      assert(false);\n      return module.createI32(1);\n    }\n  }\n}\n\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\n  switch (type.kind) {\n    default: { // any native i32\n      return expr;\n    }\n    case TypeKind.I64:\n    case TypeKind.U64: {\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n    }\n    case TypeKind.USIZE: // TODO: strings?\n    case TypeKind.ISIZE: {\n      return type.size == 64\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n        : expr;\n    }\n    case TypeKind.F32: {\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n    }\n    case TypeKind.F64: {\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n    }\n    case TypeKind.VOID: {\n      assert(false);\n      return module.createI32(0);\n    }\n  }\n}\n\n/** Makes an allocation expression for an instance of the specified class. */\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\n  var module = compiler.module;\n  var currentFunction = compiler.currentFunction;\n  var nativeSizeType = compiler.options.nativeSizeType;\n\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\n\n  // allocate the necessary memory\n  var initializers = new Array<ExpressionRef>();\n  initializers.push(\n    module.createSetLocal(tempLocal.index,\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\n    )\n  );\n\n  // apply field initializers\n  if (classInstance.members) {\n    for (let member of classInstance.members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        let field = <Field>member;\n        let fieldType = field.type;\n        let nativeFieldType = fieldType.toNativeType();\n        let fieldDeclaration = field.prototype.declaration;\n        assert(!field.isAny(CommonFlags.CONST));\n        if (fieldDeclaration.initializer) { // use initializer\n          initializers.push(module.createStore(fieldType.byteSize,\n            module.createGetLocal(tempLocal.index, nativeSizeType),\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\n            nativeFieldType,\n            field.memoryOffset\n          ));\n        } else { // initialize with zero\n          // TODO: might be unnecessary if the ctor initializes the field\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n          initializers.push(module.createStore(fieldType.byteSize,\n            module.createGetLocal(tempLocal.index, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n              : fieldType.toNativeZero(module),\n              nativeFieldType,\n            field.memoryOffset\n          ));\n        }\n      }\n    }\n  }\n\n  // return `this`\n  initializers.push(\n    module.createGetLocal(tempLocal.index, nativeSizeType)\n  );\n\n  currentFunction.freeTempLocal(tempLocal);\n  compiler.currentType = classInstance.type;\n  return module.createBlock(null, initializers, nativeSizeType);\n}\n\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\n  // requires that `this` is the first local\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  compiler.currentType = classInstance.type;\n  return module.createIf(\n    nativeSizeType == NativeType.I64\n      ? module.createBinary(\n          BinaryOp.NeI64,\n          module.createGetLocal(0, NativeType.I64),\n          module.createI64(0)\n        )\n      : module.createGetLocal(0, NativeType.I32),\n    module.createGetLocal(0, nativeSizeType),\n    module.createTeeLocal(0,\n      makeAllocate(compiler, classInstance, reportNode)\n    )\n  );\n}\n","const Buffer = require('safe-buffer').Buffer\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor (buf = Buffer.from([])) {\n    this.buffer = buf\n  }\n\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n  read (num) {\n    const data = this.buffer.subarray(0, num)\n    this.buffer = this.buffer.subarray(num)\n    return data\n  }\n\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n  write (buf) {\n    buf = Buffer.from(buf)\n    this.buffer = Buffer.concat([this.buffer, buf])\n  }\n}\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  Program,\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Log of source file names to be requested. */\n  backlog: string[] = new Array();\n  /** Log of source file names already processed. */\n  seenlog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var program = this.program;\n\n    // check if already parsed\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].internalPath == internalPath) return;\n    }\n    this.seenlog.add(internalPath);\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      let name = decorator.name;\n      if (name.kind == NodeKind.IDENTIFIER) {\n        let text = (<IdentifierExpression>name).text;\n        if (text == \"global\") {\n          flags |= CommonFlags.GLOBAL;\n          continue;\n        }\n        if (text == \"unmananged\") {\n          flags |= CommonFlags.UNMANAGED;\n          continue;\n        }\n        if (text == \"sealed\") {\n          flags |= CommonFlags.SEALED;\n          continue;\n        }\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        tn.next();\n        flags |= CommonFlags.ABSTRACT;\n        if (!tn.skip(Token.CLASS)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(tn.pos), \"class\"\n          );\n          break;\n        }\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        tn.next();\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: {\n        tn.next();\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    // 'void'\n    if (token == Token.VOID) {\n      return Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n    }\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skip(Token.IDENTIFIER)) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.IDENTIFIER)) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\n        if (!member) return null;\n        members.push(<EnumValueDeclaration>member);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"}\"\n        );\n        return null;\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    if (!tn.skip(Token.GREATERTHAN)) {\n      do {\n        let typeParameter = this.parseTypeParameter(tn);\n        if (!typeParameter) return null;\n        typeParameters.push(<TypeParameterNode>typeParameter);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \">\"\n        );\n        return null;\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n\n    if (tn.peek() != Token.CLOSEPAREN) {\n      do {\n        let param = this.parseParameter(tn, isConstructor);\n        if (!param) return null;\n        if (seenRest && !reportedRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n            seenRest.name.range\n          );\n          reportedRest = true;\n        }\n        switch (param.parameterKind) {\n          default: {\n            if (seenOptional) {\n              this.error(\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n                param.name.range\n              );\n            }\n            break;\n          }\n          case ParameterKind.OPTIONAL: {\n            seenOptional = true;\n            break;\n          }\n          case ParameterKind.REST: {\n            seenRest = param;\n            break;\n          }\n        }\n        parameters.push(param);\n      } while (tn.skip(Token.COMMA));\n    }\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (tn.skip(Token.PUBLIC)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"public\"\n        );\n      }\n      accessFlags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PROTECTED)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"protected\"\n        );\n      }\n      accessFlags |= CommonFlags.PROTECTED;\n    } else if (tn.skip(Token.PRIVATE)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"private\"\n        );\n      }\n      accessFlags |= CommonFlags.PRIVATE;\n    }\n    if (tn.skip(Token.READONLY)) {\n      if (!startRange) startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"readonly\"\n        );\n      }\n      accessFlags |= CommonFlags.READONLY;\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skip(Token.IDENTIFIER)) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        null,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n      let path: StringLiteralExpression | null = null;\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseImportDeclaration(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.TYPE: {\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(true);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(true);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.IDENTIFIER)) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skip(Token.IDENTIFIER)) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(true);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var p = determinePrecedenceStart(token);\n    if (p != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, p);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(true)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        if (!tn.skip(Token.CLOSEBRACKET)) {\n          do {\n            if (tn.peek() == Token.COMMA) {\n              expr = null; // omitted\n            } else {\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\n              if (!expr) return null;\n            }\n            elementExpressions.push(expr);\n            if (tn.peek() == Token.CLOSEBRACKET) break;\n          } while (tn.skip(Token.COMMA));\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      do {\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!expr) return null;\n        args.push(expr);\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        return null;\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression with type arguments\n    var typeArguments: CommonTypeNode[] | null;\n    while (\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\n      tn.skip(Token.OPENPAREN)\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) return null;\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn);\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn);\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.CLOSEBRACE     // current step should handle this\n      ) {\n        break;\n      }\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): i32 {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): i32 {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  Program,\n  Element,\n  CommonFlags,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Function,\n  Class,\n  Namespace,\n  FunctionPrototype,\n  ClassPrototype,\n  ConstantValueKind,\n  Interface\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program) {\n    this.program = program;\n  }\n\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) {\n      this.visitElement(element);\n    }\n  }\n\n  visitElement(element: Element): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) {\n          this.visitGlobal(<Global>element);\n        }\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) {\n          this.visitEnum(<Enum>element);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          if (instance.is(CommonFlags.COMPILED)) {\n            this.visitFunction(<Function>instance);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          if (instance.is(CommonFlags.COMPILED)) {\n            this.visitClass(<Class>instance);\n          }\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\n          this.visitNamespace(<Namespace>element);\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private seen: Set<Element> = new Set();\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program) {\n    super(program);\n  }\n\n  visitGlobal(element: Global): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) {\n      sb.push(\"const \");\n    }\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) {\n            sb.push(\"const \");\n          } else {\n            sb.push(\"readonly \");\n          }\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) {\n          this.visitElement(member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitNamespace(element: Namespace): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private seen: Set<Element> = new Set();\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program) {\n    super(program);\n  }\n\n  visitGlobal(element: Global): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) {\n      sb.push(\"const \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          this.seen.add(member);\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) {\n        this.visitNamespace(element);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(\"function \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    sb.push(\"): \");\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) {\n        sb.push(\"abstract \");\n      }\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      // TODO\n    }\n    members = element.members; // instance\n    if (members) {\n      // TODO\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  readString\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\n    var body = _BinaryenFunctionGetBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\n    this.push(\" \");\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = _BinaryenExpressionGetId(expr);\n    var type = _BinaryenExpressionGetType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = _BinaryenBlockGetNumChildren(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = _BinaryenBreakGetCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  _BinaryenConstGetValueI64Low(expr),\n                  _BinaryenConstGetValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (_BinaryenUnaryGetOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (_BinaryenBinaryGetOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\n        this.push(\", \");\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(_BinaryenDropGetValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = _BinaryenReturnGetValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (_BinaryenHostGetOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program,\n  LIBRARY_PREFIX\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `noMemory` option. */\nexport function setNoMemory(options: Options, noMemory: bool): void {\n  options.noMemory = noMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX };\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const Bn = require('bn.js')\nconst Pipe = require('buffer-pipe')\n\nmodule.exports = {\n  encode,\n  decode,\n  write,\n  read,\n  readBn\n}\n\nfunction read (stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    shift += 7\n    if (byt >> 7 === 0) {\n      break\n    }\n  }\n  // sign extend if negitive\n  if (byt & 0x40) {\n    num.setn(shift)\n  }\n  return num.fromTwos(shift)\n}\n\nfunction write (number, stream) {\n  let num = new Bn(number)\n  const isNeg = num.isNeg()\n  if (isNeg) {\n    // add 8 bits for padding\n    num = num.toTwos(num.bitLength() + 8)\n  }\n  while (true) {\n    const i = num.maskn(7).toNumber()\n    num.ishrn(7)\n    if ((isNegOne(num) && (i & 0x40) !== 0) ||\n      (num.isZero() && (i & 0x40) === 0)) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n\n  function isNegOne (num) {\n    return isNeg && num.toString(2).indexOf('0') < 0\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nfunction encode (num) {\n  const stream = new Pipe()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nfunction decode (buffer) {\n  const stream = new Pipe(buffer)\n  return read(stream)\n}\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","const Bn = require('bn.js')\nconst Pipe = require('buffer-pipe')\n\nmodule.exports = {\n  encode,\n  decode,\n  read,\n  readBn,\n  write\n}\n\nfunction read (stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    if (byt >> 7 === 0) {\n      break\n    } else {\n      shift += 7\n    }\n  }\n  return num\n}\n\nfunction write (number, stream) {\n  const num = new Bn(number)\n  while (true) {\n    const i = num.maskn(7).toNumber()\n    num.ishrn(7)\n    if (num.isZero()) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nfunction encode (num) {\n  const stream = new Pipe()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nfunction decode (buffer) {\n  const stream = new Pipe(buffer)\n  return read(stream)\n}\n","exports.unsigned = require('./unsigned.js')\nexports.signed = require('./signed.js')\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","const Buffer = require('safe-buffer').Buffer\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor (buf = Buffer.from([])) {\n    this.buffer = buf\n    this._bytesRead = 0\n    this._bytesWrote = 0\n  }\n\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n  read (num) {\n    this._bytesRead += num\n    const data = this.buffer.subarray(0, num)\n    this.buffer = this.buffer.subarray(num)\n    return data\n  }\n\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n  write (buf) {\n    buf = Buffer.from(buf)\n    this._bytesWrote += buf.length\n    this.buffer = Buffer.concat([this.buffer, buf])\n  }\n\n  /**\n   * Whether or not there is more data to read from the buffer\n   * returns {Boolean}\n   */\n  get end () {\n    return !this.buffer.length\n  }\n\n  /**\n   * returns the number of bytes read from the stream\n   * @return {Integer}\n   */\n  get bytesRead () {\n    return this._bytesRead\n  }\n\n  /**\n   * returns the number of bytes wrote to the stream\n   * @return {Integer}\n   */\n  get bytesWrote () {\n    return this._bytesWrote\n  }\n}\n","const Stream = require('buffer-pipe')\nconst Buffer = require('safe-buffer').Buffer\nconst leb = require('leb128')\n\nconst nativeTypes = new Set(['i32', 'i64', 'f32', 'f64'])\nconst FUNC_TYPE = 0x60\nconst LANGUAGE_TYPES_STRG = {\n  'i32': 0x7f,\n  'i64': 0x7e,\n  'f32': 0x7d,\n  'f64': 0x7c,\n  'anyref': 0x70,\n  'actor': 0x6f,\n  'module': 0x6fe,\n  'func': 0x6d,\n  'data': 0x6c,\n  'elem': 0x6b,\n  'link': 0x6a,\n  'id': 0x5f\n}\n\nconst LANGUAGE_TYPES_BIN = {\n  0x7f: 'i32',\n  0x7e: 'i64',\n  0x7d: 'f32',\n  0x7c: 'f64',\n  0x70: 'anyref',\n  0x6f: 'actor',\n  0x6e: 'module',\n  0x6d: 'func',\n  0x6c: 'data',\n  0x6b: 'elem',\n  0x6a: 'link',\n  0x5f: 'id'\n}\n\nconst EXTERNAL_KIND_BIN = {\n  0x0: 'func',\n  0x1: 'table',\n  0x2: 'memory',\n  0x3: 'global'\n}\n\nconst EXTERNAL_KIND_STRG = {\n  'func': 0x0,\n  'table': 0x1,\n  'memory': 0x2,\n  'global': 0x3\n}\n\n/**\n * encodes the type annotations\n * @param {Object} annotations\n * @return {Buffer}\n */\nfunction encode (annotations) {\n  const stream = new Stream()\n  encodeCustomSection('types', annotations, stream, encodeType)\n  encodeCustomSection('typeMap', annotations, stream, encodeTypeMap)\n  encodeCustomSection('persist', annotations, stream, encodePersist)\n\n  return stream.buffer\n}\n\nfunction encodeCustomSection (name, json, stream, encodingFunc) {\n  let payload = new Stream()\n  json = json[name]\n\n  if (json) {\n    stream.write([0])\n    // encode type\n    leb.unsigned.write(name.length, payload)\n    payload.write(name)\n    encodingFunc(json, payload)\n    // write the size of the payload\n    leb.unsigned.write(payload.bytesWrote, stream)\n    stream.write(payload.buffer)\n  }\n  return stream\n}\n\n/**\n * encodes the type annoations for persist\n * @param {Object} annoations\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodePersist (annotations, stream = new Stream()) {\n  leb.unsigned.write(annotations.length, stream)\n  for (const entry of annotations) {\n    const form = EXTERNAL_KIND_STRG[entry.form]\n    leb.unsigned.write(form, stream)\n    leb.unsigned.write(entry.index, stream)\n    leb.unsigned.write(LANGUAGE_TYPES_STRG[entry.type], stream)\n  }\n  return stream.buffer\n}\n\n/**\n * decodes the persist annotations\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodePersist (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  let numOfEntries = leb.unsigned.read(stream)\n  const json = []\n  while (numOfEntries--) {\n    const form = EXTERNAL_KIND_BIN[leb.unsigned.readBn(stream).toNumber()]\n    if (!form) {\n      throw new Error('invalid form')\n    }\n    const index = leb.unsigned.readBn(stream).toNumber()\n    const type = LANGUAGE_TYPES_BIN[leb.unsigned.readBn(stream).toNumber()]\n    if (!type) {\n      throw new Error('invalid param')\n    }\n    json.push({\n      form,\n      index,\n      type\n    })\n  }\n\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n\n  return json\n}\n\n/**\n * encodes a typeMap definition\n * @param {Object} definition\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodeTypeMap (definition, stream = new Stream()) {\n  leb.unsigned.write(definition.length, stream)\n  for (let entry of definition) {\n    leb.unsigned.write(entry.func, stream)\n    leb.unsigned.write(entry.type, stream)\n  }\n  return stream.buffer\n}\n\n/**\n * decodes the TypeMap section\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodeTypeMap (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  let numOfEntries = leb.unsigned.read(stream)\n  const json = []\n  while (numOfEntries--) {\n    json.push({\n      func: leb.unsigned.readBn(stream).toNumber(),\n      type: leb.unsigned.readBn(stream).toNumber()\n    })\n  }\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n  return json\n}\n\n/**\n * encodes the type annotations\n * @param {Object} definition\n * @param {buffer-pipe} [stream]\n * @return {Buffer}\n */\nfunction encodeType (annotations, stream = new Stream()) {\n  let binEntries = new Stream()\n\n  leb.unsigned.write(annotations.length, binEntries)\n  for (let entry of annotations) {\n    // a single type entry binary encoded\n    binEntries.write([FUNC_TYPE])\n\n    const len = entry.params.length // number of parameters\n    leb.unsigned.write(len, binEntries)\n    binEntries.write(entry.params.map(type => LANGUAGE_TYPES_STRG[type])) // the paramter types\n    binEntries.write([0])\n    // binEntries.write([entry.return_type ? 1 : 0]) // number of return types\n    // if (entry.return_type) {\n    //   binEntries.write([LANGUAGE_TYPES[entry.return_type]])\n    //   throw new Error('return type are not allowed')\n    // }\n  }\n\n  stream.write(binEntries.buffer)\n  return stream.buffer\n}\n\n/**\n * decodes the Type section\n * @param {Buffer} buf\n * @param {Object}\n */\nfunction decodeType (buf) {\n  const stream = new Stream(Buffer.from(buf))\n  const numberOfEntries = leb.unsigned.readBn(stream).toNumber()\n  const json = []\n  for (let i = 0; i < numberOfEntries; i++) {\n    let type = stream.read(1)[0]\n    if (type !== FUNC_TYPE) {\n      throw new Error('invalid form')\n    }\n    const entry = {\n      form: 'func',\n      params: []\n    }\n\n    let paramCount = leb.unsigned.readBn(stream).toNumber()\n\n    // parse the entries\n    while (paramCount--) {\n      const type = stream.read(1)[0]\n      const param = LANGUAGE_TYPES_BIN[type]\n      if (!param) {\n        throw new Error('invalid param')\n      }\n      entry.params.push(param)\n    }\n    // remove the last byte\n    leb.unsigned.readBn(stream)\n    // const numOfReturns = leb.unsigned.readBn(stream).toNumber()\n    // if (numOfReturns) {\n    //   type = stream.read(1)[0]\n    //   entry.return_type = LANGUAGE_TYPES[type]\n    // }\n\n    json.push(entry)\n  }\n\n  if (stream.buffer.length) {\n    throw new Error('invalid buffer length')\n  }\n  return json\n}\n\n/**\n * injects custom sections into a wasm binary\n * @param {Buffer} custom - the custom section(s)\n * @param {Buffer} wasm - the wasm binary\n * @return {Buffer}\n */\nfunction injectCustomSection (custom, wasm) {\n  const preramble = wasm.subarray(0, 8)\n  const body = wasm.subarray(8)\n  return Buffer.concat([\n    Buffer.from(preramble),\n    Buffer.from(custom),\n    Buffer.from(body)\n  ])\n}\n\n/**\n * encodes a json definition and injects it into a wasm binary\n * @param {Object} annotation - the type definition\n * @param {Buffer} wasm - the wasm binary to inject\n */\nfunction encodeAndInject (annotation, wasm) {\n  const buf = encode(annotation)\n  return injectCustomSection(buf, wasm)\n}\n\nfunction mergeTypeSections (json) {\n  const result = {\n    types: [],\n    indexes: {},\n    exports: {},\n    persist: []\n  }\n\n  const mappedFuncs = new Map()\n  const mappedTypes = new Map()\n  let type = {\n    entries: []\n  }\n  let functions = {\n    entries: []\n  }\n  let imports = {\n    entries: []\n  }\n\n  for (const section of json) {\n    const name = section.name\n    if (name === 'custom') {\n      const sectionName = section.sectionName\n      if (sectionName === 'types') {\n        const type = decodeType(section.payload)\n        result.types = type\n      } else if (sectionName === 'typeMap') {\n        decodeTypeMap(section.payload).forEach(map => mappedFuncs.set(map.func, map.type))\n      } else if (sectionName === 'persist') {\n        result.persist = decodePersist(section.payload)\n      }\n    } else if (name === 'type') {\n      type = section\n    } else if (name === 'import') {\n      imports = section\n    } else if (name === 'function') {\n      functions = section\n      section.entries.forEach((typeIndex, funcIndex) => {\n        const newType = type.entries[typeIndex]\n        if (!newType.return_type) {\n          let customIndex = mappedFuncs.get(funcIndex)\n          if (customIndex === undefined) {\n            customIndex = mappedTypes.get(typeIndex)\n          } else {\n            const customType = result.types[customIndex]\n            if (customType.params.length !== newType.params.length) {\n              throw new Error('invalid param length')\n            }\n\n            newType.params.forEach((param, index) => {\n              if (!nativeTypes.has(customType.params[index]) && param !== 'i32') {\n                throw new Error('invalid base param type')\n              }\n            })\n          }\n\n          if (customIndex === undefined) {\n            customIndex = result.types.push(newType) - 1\n            mappedTypes.set(typeIndex, customIndex)\n          }\n          result.indexes[funcIndex + imports.entries.length] = customIndex\n        }\n      })\n    } else if (name === 'export') {\n      section.entries.forEach(entry => {\n        if (entry.kind === 'function') {\n          // validate that no function signature have no return types\n          // get the type index. entry.index is the global function index (imported function + internal function)\n          const typeIndex = functions.entries[entry.index - imports.entries.length]\n          const exportType = type.entries[typeIndex]\n          if (exportType.return_type) {\n            throw new Error('no return types allowed')\n          }\n          result.exports[entry.field_str] = entry.index\n        }\n      })\n    }\n  }\n\n  return result\n}\n\nmodule.exports = {\n  injectCustomSection,\n  encodeAndInject,\n  decodeType,\n  decodeTypeMap,\n  decodePersist,\n  encodeType,\n  encodeTypeMap,\n  encodePersist,\n  encode,\n  mergeTypeSections,\n  LANGUAGE_TYPES_BIN,\n  LANGUAGE_TYPES_STRG\n}\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\nimport {\n  Compiler,\n  ConversionKind,\n\n  makeSmallIntegerWrap\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId\n} from \"./module\";\n\nimport {\n  ElementKind,\n  Global,\n  FunctionPrototype,\n  Class,\n  Field\n} from \"./program\";\n\n/** Compiles a get of a built-in global. */\nexport function compileGetConstant(\n  compiler: Compiler,\n  global: Global,\n  reportNode: Node\n): ExpressionRef {\n  switch (global.internalName) {\n    case \"NaN\": { // context-sensitive\n      if (compiler.currentType == Type.f32) {\n        return compiler.module.createF32(NaN);\n      } else {\n        compiler.currentType = Type.f64;\n        return compiler.module.createF64(NaN);\n      }\n    }\n    case \"Infinity\": { // context-sensitive\n      if (compiler.currentType == Type.f32) {\n        return compiler.module.createF32(Infinity);\n      } else {\n        compiler.currentType = Type.f64;\n        return compiler.module.createF64(Infinity);\n      }\n    }\n    case \"HEAP_BASE\": { // never inlined for linking purposes\n      compiler.currentType = compiler.options.usizeType;\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return compiler.module.createUnreachable();\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.prototype.fnIndexedGet != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments && typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n\n      switch (compiler.currentType.kind) {\n        case TypeKind.F32: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n          ret = module.createBinary(BinaryOp.NeF32,\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createGetLocal(tempLocal.index, NativeType.F32)\n          );\n          break;\n        }\n        case TypeKind.F64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n          ret = module.createBinary(BinaryOp.NeF64,\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createGetLocal(tempLocal.index, NativeType.F64)\n          );\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // every other type is never NaN\n          ret = module.createI32(0);\n          break;\n        }\n      }\n      compiler.currentType = Type.bool;\n      return ret;\n    }\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments && typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.F32: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n          ret = module.createSelect(\n            module.createBinary(BinaryOp.NeF32,\n              module.createUnary(UnaryOp.AbsF32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              module.createF32(Infinity)\n            ),\n            module.createI32(0),\n            module.createBinary(BinaryOp.EqF32,\n              module.createGetLocal(tempLocal.index, NativeType.F32),\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            )\n          );\n          break;\n        }\n        case TypeKind.F64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n          ret = module.createSelect(\n            module.createBinary(BinaryOp.NeF64,\n              module.createUnary(UnaryOp.AbsF64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              module.createF64(Infinity)\n            ),\n            module.createI32(0),\n            module.createBinary(BinaryOp.EqF64,\n              module.createGetLocal(tempLocal.index, NativeType.F64),\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            )\n          );\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // every other type is always finite\n          ret = module.createI32(1);\n          break;\n        }\n      }\n      compiler.currentType = Type.bool;\n      return ret;\n    }\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        default: { // any integer up to 32-bits incl. bool\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        case TypeKind.F32:\n        case TypeKind.F64:\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = makeSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType,\n            module\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = makeSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType,\n            module\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n          // doesn't need sign-extension here because ifFalse below is either positive\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\n        case TypeKind.I32: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32\n            );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\n          : ConversionKind.IMPLICIT\n      );\n      let type: Type;\n      if (\n        compiler.currentType.is(TypeFlags.INTEGER) &&\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        typeArguments[0].size > compiler.currentType.size\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type);\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        default: { // any value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.kind != TypeKind.USIZE) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, false);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64);\n    if (\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\n      _BinaryenConstGetValueI64High(expr) != 0 ||\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32);\n    if (\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\n      (value = _BinaryenConstGetValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__37__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0))\n      return 0;\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, n) {\n    HEAP.copyWithin(dest, src, src + n);\n  };\n\n  globalScope[\"store\"] = function store(ptr, val, off) {\n    if (typeof off === \"number\")\n      ptr += off;\n    HEAP[ptr] = val;\n  };\n\n  globalScope[\"load\"] = function load(ptr) {\n    if (typeof off === \"number\")\n      ptr += off;\n    return HEAP[ptr];\n  };\n};\n","module.exports = globalScope => {\n  globalScope[\"JSMath\"] = Math;\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nrequire(\"./portable/math\")(globalScope);\nrequire(\"./portable/memory\")(globalScope);\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable\";\nimport \"./binaryen\";\nimport \"./i64\";\nimport \"./float\";\n"],"sourceRoot":""}